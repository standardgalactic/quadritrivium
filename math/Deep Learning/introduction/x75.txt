An autoencoder is a three-layered feed-forward neural network. They have one pecu-
liarity: the targets t are actually the same values as inputs x, which means that the
task of the autoencoder is simply to recreate the inputs. So autoencoders are a form
of unsupervised learning. This entails that the output layer has to have the same
number of neurons as the input layer. This is all that is needed for a feed-forward
neural network to be called an autoencoder. We can call this version the ‘plain vanilla
autoencoder’. There is a problem right away for plain vanilla autoencoders. If there
are at least as many neurons in the hidden layer layer as there are in the input and
output layer, the autoencoder is in danger of learning the identity function. This leads
to a constraint, namely that there have to be less neurons in the hidden layer than
in the input and output layers. We can call autoencoders which satisfy this property
simple autoencoders. The outputs of the hidden layer of a fully trained autoencoder
constitute a distributed representation, similar to PCA, and, as with PCA, this repre-
sentation can be fed to a logistic regression or a simple feed-forward neural network
as input and it will produce much better results than the regular representation.
But we can take another path, which is called sparse autoencoders. Let us say
we constrain the number of neurons on the hidden layers to be at most double the
number of neurons in the input layer, but we add a heavy dropout of e.g. 0.7. Then, we
will have for each iteration less hidden neurons than input neurons, but at the same

8.2
Different Autoencoder Architectures
157
time we will produce a large hidden layer vector. This large hidden layer vector is a
(very large) distributed representation. What is happening here intuitively speaking
is that simple autoencoders make a compact distributed representation, which is a
different representation of the input. This makes it more easy for a simple neural
network to digest it and process it, resulting in higher accuracy. Sparse autoencoders
digest the inputs in the same way, but in addition, they learn redundancies and offer
a more ‘dilluted’ and bigger vector, which is even simpler to process well. Recall
how the hyperplane works in multiple dimensions and this will make sense. There
is a different way to define sparse autoencoders, via a sparsity rate, which forces
the activations below a certain threshold to be considered zero, it is similar to our
approach.
We can also make the autoencoder’s job harder, by inserting some noise into the
input. This is done by creating a copy of the input with inserted random numbers at a
fixed amount, e.g. on randomly chosen 10% of the input. The targets are a copy of the
inputs without noise. These autoencoders are called denoising autoencoders. If we
add explicit regularization, we obtain a flavour of autoencoders known as contractive
autoencoders. Figure8.1 offers an illustration of the various types of autoencoders.
There are many other types of autoencoders, but they are more complex and fall
outside the scope of this book. We point the interested reader to [3].
All of the autoencoders are used to preprocess data for a simple feed-forward
neural network. This means that we have to get the preprocessed data from the
autoencoder. This data is not the output of the whole autoencoder, but the output of
the middle (hidden) layer, which is the layer that does the donkey work.
Let us address a technical issue. We have seen but not formally introduced the con-
cept of a latent variable. A latent variable is a variable which lies in the background
and is correlated with one or many ‘visible’ variables. We have seen an example
in Chap.3 when we addressed PCA in an informal manner, and we had synthetic
properties behind ‘height’ and ‘weight’. These are a prime example of a latent vari-
able. When we hypothesize a latent variable (or create it), we postulate we have a
probability distribution to define it. Note that it is a philosophical question whether
we discover or define latent variables, but it is clear that we want our latent variables
(the defined ones) to follow as closely as possible the latent variables in nature (the
ones that we measure or discover). A distributed representation is a probability dis-
Fig.8.1 Plain vanilla autoencoder, simple autoencoder, sparse autoencoder, denoising autoencoder,
contractive autoencoder

158
8
Autoencoders
tribution of latent variables which hopefully are the objective latent variables and
learning will conclude when they are very similar. This means that we have to have a
way of measuring similarities between probability distributions. This is usually done
via the Kullback-Leibler divergence, which is defined as:
KL(P, Q) :=
N
�
n=1
P(n) log P(n)
Q(n)
(8.11)
where P and Q are two probability distributions. Notice that KL(P, Q) is not sym-
metric (it will change if you change the P and Q). Traditionally, the Kullback-Liebler
divergence is denoted as DK L, but the notation we used is more consistent with the
other notation in the book. There are a number of sources which provide more detail,
but we will refer the reader to [3]. Autoencoders are a relatively old idea, and they
were first proposed by Dana H. Ballard in 1987 [4]. Yann LeCun [5] also considered
similar structures independently from Ballard. A good overview of the many types
of autoencoders and their functionality can be found in [6] as an introduction to the
stacked denoising autoencoders which we will reproduce in the next section.
8.3 Stacking Autoencoders
If autoencoders seem like LEGO bricks, you have the right intuition, and in fact
they may be stacked together, and then they are called stacked autoencoders. But
keep in mind that the real result of the autoencoder is not in the output layer, but
the activations in the middle layer, which are then taken and used as inputs in a
regular neural network. This means that to stack them we need not simply stick
one autoencoder after the other, but actually combine their middle layers as shown
in Fig.8.2. Imagine that we have two simple autoencoders of size (13, 4, 13) and
Fig. 8.2 Stacking a (4, 3, 4) and a (4, 2, 4) autoencoder resulting in a (4, 3, 2, 3, 4) stacked
autoencoder

8.3
Stacking Autoencoders
159
(13, 7, 13). Notice that if they want to process the same data they have to have the
same input (and output) size. Only the middle layer or autoencoder architecture may
vary. For simple autoencoders, they are stacked by creating a 13, 7, 4, 7, 13 stacked
autoencoder. If you think back on what the autoencoder does, it makes sense to create
