Python code. The first line defines (with the command def) a new function called
subtract_one taking a single value referred to as my_variable. The line
ends with a colon telling Python that it will be given more instructions. The symbol
# begins a comment, which lasts until the end of the line. A comment is a piece of
text inside the Python code file which the interpreter will ignore, and you can put
there anything from notes to alternative code.

44
2
Mathematical and Computational Prerequisites
The second line begins with four . They denote whitespace (the character which
the space bar puts in the text, and you see between words of a text). Whitespaces
which come in blocks of four are called indentations. An alternative way is to use
a single tab in place of a block of four whitespaces, but you have to be consistent:
if you use whitespaces in one file, then you should use whitespaces throughout that
file. In this book, we use whitespaces. After the whitespaces, the line has a return
command which says to finish the function and return whatever is after the return
statement. In our case, the function returns my_variable - 1 (the parentheses
are just to make sure Python does not misunderstand what to bring back from the
function). After this, we have a new comment, which the interpreter will ignore, so
we may write anything there.
The third line is outside the definition of the function, so it has no indent, and
it actually calls the inbuilt function print on our defined function on the value of
53. Notice that without the print, our function would execute, but we would not
see anything on the screen since the function does not print anything per se, so we
needed to add the print. You can try to modify the defined function so that it prints
something, but remember that you need to define first and use after (i.e. a simple
copy/paste will not work). This will give you a nice feel of the interaction between
print and return. Every indented whole together with the line preceding the
indent (function definition) in Python is called a block of code. So far we have seen
only the definition block, but other blocks work in the same way. Other blocks include
the for-loop, the while-loop, the try-loop, the if-statement38 and several others.
One of the most fundamental and important operations in Python is the variable
assignment operation. This is simply placing a value in a new variable. It is done
with the command newVariable =”someString”. You can use assignments
to assign any value to a variable (any string, float, int, list, dictionary–anything), and
you can also reuse variables (a variable in this sense is just the name of the variable),
but the variable will keep only the most recent assignment value.
Let us revisit strings. Take the string ’testString’. Python allows to put
strings in either single quotes or double quotes "", but you must end the string
with the same symbol you started it. The empty string is denoted as ” or "",
and this is a substring of any string. Try opening the Python interpreter and
writing in "test" in ’testString’, "text" in ’testString’, ""
in "testString" and even "" in "", and see how it behaves. Try also
len("Deep Learning") and len(""). This is a built-in function which
returns the length of an iterable. An iterable is a string list, dictionary and any
other data structure which has parts. Floats, ints and characters are not iterables, and
most other things in Python are.
You can also get substrings of a string. You can first make an assignment of
a string to a variable and work with the variable or you can work directly with
the string. Write in the interpreter myVar = "abcdef". Now try telling Python
myVar[0]. This will return the first letter of the string. Why 0? Python starts
38Never call this an ‘if-loop’, since it is simply wrong.

2.6
A Brief Overview of Python Programming
45
indexing iterables with ints from 0 onwards, and this means that to get the first
element of the iterable you need to use the index 0. This also means that each
string has N-1 values for indices where N=len(string). To get the f from
myVar, you can use myVar[-1] (this means ‘last element’) or a more complex
myVar[(len(myVar)-1)]. You will always use the -1 variant but it is important
to notice that these expressions are equivalent. You can also save a letter from a string
to a variable with this notation. Type in thirdLetter = myVar[2] to save the
"c" in the variable. You can also take out substrings like this. Try to type sub_str
= myVar[2:4] or sub_str = myVar[2:-2]. This simply means to take
indices from 2 to 4 (or from 2 to -2). This works for any iterable in Python, including
lists and dictionaries.
A list is a Python data structure capable of holding a wide variety of individual
data. A list uses square parentheses to enclose individual values. As an example,
[1,2,3,["c",[1.123,"something"]],1,3,4] is an example of a list.
This list contains another list as one of its elements. Notice also that a list does not
omit repeating values and order in the list matters. If you want to add a value of say
1.234 to a list myList, just use the function myList.append(1.234). If you
need a blank list, just initialize one with a fresh variable, e.g. newList = []. You
can use both the len( ) and the index notation we have seen for strings for lists as
well. The syntax is the same.39 Try to initialize blank lists and then adding stuff to
them and also to initialize lists as the one we have shown (remember, you must assign
a list to a variable to be able to work with it over multiple lines of code, just like
a string or number). Also, try finding more methods like append() in the official
Python documentation or on StackOverflow and play around with them a bit in the
test file or the Python interpreter. The main idea is to feel comfortable with Python
and to expand your knowledge gradually. Programming is very boring and hard at
first, but soon becomes easy and fun if you put in the effort, and it is an extremely
valuable skill. Also, do not give up if at first some code does not work: experiment
print() every part to make sure it connects well and search StackOverflow. If
you start coding fulltime, you will be writing code for at most two hours a day, and
spend the rest of the time correcting it and debugging it. It is perfectly normal, and
debugging and getting the code to work is an essential part of coding, so do not feel
bad or give up.
Lists have elements, and you can retrieve an element of a list by using the
index of that element. This is the only proper way to do it. There is a different
data structure which is like a list, but instead of using an index uses user-defined
keywords to fetch elements. This data structure is called a dictionary. An exam-
ple of a dictionary is myDict={"key_1":"value_1", 1:[1,2,3,4,5],
1.11:3.456, ’c’:{4:5}}. This is a dictionary with four elements (its len()
is 4). Let us take the first element: it has two components, a key (the keyword
which fulfills the same role as an index in a list) and a value which is the same
39In a programming jargon, when we say ‘the syntax is the same’ or ‘you can use a similar syntax’
means that you should try to reproduce the same style but with the new values or objects.
