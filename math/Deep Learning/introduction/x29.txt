treatment.
3.1 Elementary Classification Problem
Supervised learning is just classification. The trick is that a vast amount of problems
can be seen as classification problems, for example, the problem of recognizing a
vehicle in an image can be seen as classifying the image in one of the two classes:
‘has vehicle’ or ‘does not have vehicle’. Same goes for predictions: if we need to
© Springer International Publishing AG, part of Springer Nature 2018
S. Skansi, Introduction to Deep Learning, Undergraduate Topics
in Computer Science, https://doi.org/10.1007/978-3-319-73004-2_3
51

52
3
Machine Learning Basics
make a portfolio of penny stocks, we can reformulate it to be a classification problem
of the form: ‘winner! will rise 400% or more’ or ‘nay, pass’.
Of course the trick is to make a classifier that is good enough. We have two options,
either selecting by hand with some property or combination of properties (e.g. is the
stock bottoming and making an RSI divergence and trading on a low high for the past
two days) or we can remain agnostic about the properties we need and simply say
‘look, I have 5000 examples of good ones and 5000 examples of bad ones, feed it to
an algorithm and let it decide whether the 10001st is more similar to the good ones or
the bad ones in terms of the properties it has’. The latter is the quintessential machine
learning approach. The former is known as knowledge engineering or expert system
engineering or (historical term) hacking. We will focus on the machine learning
approach here.
Let us see what ‘classification’ means. Imagine that we have two classes of ani-
mals, say ‘dogs’ and ‘non-dogs’. In Fig. 3.1, each dog is marked with an X and all
‘non-dogs’ (you can think of them as ‘cats’) are marked with an O. We have two
properties for them, their length and their weight. Each particular animal has the two
properties associated with it and together they form a datapoint (a point in space
where the axes are the properties). In machine learning, properties are called fea-
tures. The animal can have a label or target which says what it is: the label might be
‘dog’/‘non-dog’ or simply ‘1’/‘0’. Notice that if we have the problem of multiclass
classification (e.g. ‘dog’, ‘cat’ and ‘ocelot’), we can first perform a ‘dog’/‘non-dog’
classification and then on the ‘non-dog’ datapoints perform a ‘cat’/‘non-cat’ classifi-
cation. But this is rather cumbersome and we will develop techniques for multiclass
classification which can do it right away without the need to transform it in n − 1
binary classifications.
Returning to our Fig. 3.1, imagine that we have three properties, the third being
height. Then, we would need a 3D coordinate system or space. In general, if we
have n properties, we would need an n-dimensional system. This might seem hard to
imagine, but notice what is happening in the 2D versus 3D case and then generalize it:
look at the two animals which have the 2D coordinates (38, 7) (it is the overlapping
Fig.3.1 Adding a new dimension

3.1
Elementary Classification Problem
53
X and O in Fig. 3.1a). We will never be able to distinguish them, and if a new animal
were to have this length and weight we would not be able to conclude what it is.
But take a look at the ‘top view’ in Fig. 3.1b where we have added an axis z: if
we were to know that its height (coordinate z) is 20 for one and 30 for the another,
we could now easily separate them in this 3D space, but we would need a plane
instead of a line if we wanted to draw a boundary between them (and this boundary
drawing is actually the essence of classification). The point is that adding a new
feature and expanding our graph to a new dimension offers us new ways to separate
what was very hard or even impossible in a lower number of dimensions. This is
a good intuition to keep while imagining 37-dimensional space: it is the expansion
of 36-dimensional space with one extra property that will enable us (hopefully) to
better distinguish what we could not distinguish in 36-dimensional space. In a 4D
space or higher, this plane is which divides cats and dogs the so-called a hyperplane
which is one of the most important concepts in machine learning. Once we have the
hyperplane which separates the two classes in an n-dimensional space, we know for
a new unlabelled datapoint what (probably) is just by looking whether it falls in the
‘dog’ side or the ‘non-dog’ side.
Now, the hard part is to draw a good hyperplane. Let us return to the 2D world
where we have just a line (but we will keep calling it ‘hyperplane’ to inculcate
the terminology) and look at some examples. Xs and Os represent dogs and cats
(labelled datapoints) and little squares represent new unlabelled datapoints. Notice
that we have all the properties for these new datapoints, we are just missing a label
and we have to find it. We even know how to find it: see on which side of the
hyperplane the datapoint is and then add the label which is the label of that side of
the hyperplane.1 Now, we only need to find out how to define the hyperplane. We
have one fundamental choice: should we ignore the labelled datapoints and draw the
hyperplane by some other method, or should we try to draw the hyperplane so that
it fits the existing labelled datapoints nicely? The former approach seems to be the
epitome of irrationality, while the latter is the machine learning approach.
Let us comment on the different hyperplanes drawn in Fig. 3.2. Hyperplane A
is more or less useless. It has a certain appeal since it does separate the datapoints
in a manner that on the ‘dog’ side there are more dogs than non-dogs and on the
‘non-dog’ side there are more non-dogs. But it seems that we could have done this
with no data at all. Hyperplane B is similar, but it has an interesting feature, namely
that on the ‘non-dog’ side all datapoints are non-dogs. If a new datapoint falls here,
we would be very confident that it is a cat. On the other side, things are not good.
But if we recast this problem in a marketing setting where Os represent people who
will most probably buy a product, then a hyperplane like B would provide a very
1You may wonder how a side gets a label, and this procedure is different for the various machine
learning algorithms and has a number o peculiarities, but for now you may just think that the side
will get the label which the majority of datapoints on that side have. This will usually be true, but
is not an elegant definition. One case where this is not true is the case where you have only one dog
and two cats overlapping (in 2D space) it and four other cats. Most classifiers will place the dog
and the two cats in the category ‘dog’. Cases like this are rare, but they may be quite meaningful.

54
3
Machine Learning Basics
Fig.3.2 Different
hyperplanes
useful separation. Hyperplane E is even worse than hyperplane A, but to define it
