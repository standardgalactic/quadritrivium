5. A. Ng, Feature selection, L1 versus L2 regularization, and rotational invariance, in Proceedings
of the International Conference on Machine Learning (2004)
6. D.L. Donoho, Compressed sensing. IEEE Trans. Inf. Theory 52(4), 1289–1306 (2006)
7. E.J. Candes, J. Romberg, T. Tao, Robust uncertainty principles: exact signal reconstruction from
highly incomplete frequency information. IEEE Trans. Inf. Theory 52(2), 489–509 (2006)

120
5
Modifications and Extensions to a Feed-Forward Neural Network
8. J. Wen, J.L. Zhao, S.W. Luo, Z. Han, The improvements of BP neural network learning algo-
rithm, in Proceedings of 5th International Conference on Signal Processing (IEEE Press, 2000),
pp. 1647–1649
9. D.E. Rumelhart, G.E. Hinton, R.J. Williams, Learning internal representations by error propa-
gation. Parallel Distrib. Process. 1, 318–362 (1986)
10. G.E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, R. Salakhutdinov, Improving neural
networks by preventing co-adaptation of feature detectors (2012)
11. G.E. Dahl, T.N. Sainath, G.E. Hinton, Improving deep neural networks for LVCSR using
rectified linear units and dropout, in IEEE International Conference on Acoustic Speech and
Signal Processing (IEEE Press, 2013), pp. 8609–8613
12. N. Srivastava, G.E. Hinton, A. Krizhevsky, I. Sutskever, R. Salakhutdinov, Dropout: a simple
way to prevent neural networks from overfitting. J. Mach. Learn. Res. 15, 1929–1958 (2014)
13. Y. Bengio, J. Louradour, R. Collobert, J. Weston, Curriculum learning, in Proceedings of the
26th Annual International Conference on Machine Learning, ICML 2009, New York, NY, USA,
(ACM, 2009), pp. 41–48
14. R.S. Sutton, A.G. Barto, Reinforcement Learning: An Introduction (MIT Press, Cambridge,
1998)
15. S. Hochreiter, Untersuchungen zu dynamischen neuronalen Netzen, Diploma thesis, Technische
Universität Munich, 1991
16. S. Hochreiter, J. Schmidhuber, Long short-term memory. Neural Comput. 9(8), 1735–1780
(1997)
17. S. Hochreiter, Y. Bengio, P. Frasconi, J. Schmidhuber, Gradient flow in recurrent nets: the
difficulty of learning long-term dependencies, in A Field Guide to Dynamical Recurrent Neural
Networks, ed. by S.C. Kremer, J.F. Kolen (IEEE Press, 2001)

6
Convolutional Neural Networks
6.1 A Third Visit to Logistic Regression
In this chapter, we explore convolutional neural networks, which were first invented
by Yann LeCun and others in 1998 [1]. The idea which LeCun and his team imple-
mented was older, and built up on the ideas of David H. Hubel and Torsten Weisel
presented in their 1968 seminal paper [2] which won them the 1981 Nobel prize in
Physiology and Medicine. They explored the animal visual cortex and found con-
nections between activities in a small but well-defined area of the brain and activities
in small regions of the visual field. In some cases, it was even possible to pinpoint
exact neurons that were in charge of a part of the visual field. This led them to the
discovery of the receptive field, which is a concept used to describe the link between
parts of the visual fields and individual neurons which process the information.
The idea of a receptive field completes the third and final component we need to
build convolutional neural networks. But what were the other two part we have? The
first was a technical detail: flattening images (2D arrays) to vectors. Even though
most modern implementations deal readily with arrays, under the hood they are often
flattened to vectors. We adopt this approach in our explanation since it has less hand-
waiving, and enables the reader to grasp some technical details along the way. You
can see an illustration of flattening a 3 by 3 image in the top of Fig.6.1. The second
component is the one that will take the image vector and give it to a single workhorse
neuron which will be in charge of processing. Can you figure out what can we use?
If you said ‘logistic regression’, you were right! We will however be using a
different activation function, but the structure will be the same. A convolutional
neural network is a neural network that has one or more convolutional layers. This
is not a hard definition, but a quick and simple one. There will be architectures using
© Springer International Publishing AG, part of Springer Nature 2018
S. Skansi, Introduction to Deep Learning, Undergraduate Topics
in Computer Science, https://doi.org/10.1007/978-3-319-73004-2_6
121

122
6
Convolutional Neural Networks
Fig.6.1 Building a 1D convolutional layer with a logistic regression
convolutional layers which will not be called ‘convolutional neural networks’.1 So
now we have to describe what a convolutional layer is.
A convolutional layer takes an image2 and a small logistic regression with e.g.
input size 4 (these sizes are usually 4 or 9, sometimes 16) and passes the logistic
regression over the whole image. This means that the first input consists of compo-
nents 1–9 of the flattened vector, the second input are the components 2–10, the third
are components 3–11, and so on. You can see an overview of the process in the bottom
of Fig.6.1. This process creates an output vector which is smaller than the overall
input vector, since we start at component 1, but take four components, and produce
a single output. The end result is that if we were to move along a 10-dimensional
vector with the logistic regression (this logistic regression is called local receptive
field in convolutional neural networks), we would produce a 7-dimensional output
vector (see the bottom of Fig.6.1). This type of convolutional layer is called a 1D
convolutional layer or a temporal convolutional layer. It does not have to use a time
series (it can use any data, since you can flatten out any data), but the name is here
to distinguish it from a classical 2D convolutional layer.
We can take also a different approach and say we want the output dimension to
be same as the input, but then our 4-dimensional local receptive field would have to
start at input at ‘cells’ −1, 0, 1, 2 and then continue to 0, 1, 2, 3, and so on, finishing
at 9, 10, 11 (you can draw it yourself to see why we do not need to go to 12). Putting
1Yann LeCun once told in an interview that he prefers the name ‘convolutional network’ rather than
‘convolutional neural network’.
2An image in this sense is any 2D array with values between 0 and 255. In Fig.6.1 we have numbered
the positions, and you may think of them as ‘cell numbers’, in the sense that they will contain some
value, but the number on the image denotes only their order. In addition, note that if we have e.g.
100 by 100 RGB images, each image would be a 3D array (tensor) with dimensions (100, 100, 3).
The last dimension of the array would hold the three channels, red, green and blue.

6.1
A Third Visit to Logistic Regression
123
