include the name of the environment). The environment will remain active as long as
37Text editors are Notepad, Vim, Emacs, Sublime, Notepad++, Atom, Nano, cat and many others.
Feel free to experiment and find the one you like most (most are free). You might have heard of
the so-called IDEs or Integrated Development Environments. They are basically text editors with
additional functions. Some IDEs you might know of are Visual Studio, Eclipse and PyCharm. Unlike
text editors, most IDEs are not freely available, but there are free versions and trial versions, so you
may experiment with them before buying. Remember, there is nothing essential an IDE can do but
a text editor cannot, but they do offer additional conveniences in IDEs. My personal preference is
to use Vim.

42
2
Mathematical and Computational Prerequisites
the command prompt is opened. If you close it, or restart your computer, you must
type again activate dlBook01 and hit enter.
Inside
this
environment,
you
should
install
TensorFlow
from
https://www.tensorflow.org/install/. After activating your environ-
ment, you should write the command pip install –upgrade tensorflow
andhitenter.Ifthisfailstowork,put pip3 install –upgrade tensorflow
and hit enter. If it still does not work, try to troubleshoot the problem. The usual way
to troubleshoot problems is to open the official web page of the application and
follow instructions there, and if it fails, try to consult the FAQ section. If you still
cannot resolve the issue, try to find the answer on stackoverflow.com. If you
cannot find a good answer, you can ask the community there for help and usually
you will get a response in a couple of hours. The final step is to install Keras. Check
keras.io/#installation to see whether you need any dependencies and if
you are good to go, just type pip install keras. If Keras fails to install, con-
sult the documentation on keras.io, and if it does not help, it is StackOverflowing
time again.
Once you have everything installed, type in the command line python and hit
enter. This will open the Python interpreter, which will then display a line or two
of text, where you should find ‘Python 3.5’ and ‘Anaconda’ written. If it does not
work, try restarting the computer, and then activate the anaconda environment again
and try to write python again and see whether this fixes the issue. If it does not,
StackOverflow it.
If you manage to open the Python interpreter (with ‘Python 3.5’ and ‘Anaconda…’
written), you will have a new prompt looking like>>>. This is the standard Python
prompt which will interpret any valid Python code. Try to type in 2+2 and hit enter.
Then try ’2’+’2’ to get ’22’. Now try to write import tensorflow. It should
just write a new prompt with>>>. If it gives you an error, StackOverflow it. Next,
do the same thing to verify the Keras installation. Once you have done this, we are
done with installation.
Every section of this book will contain a fragmented code. For every section,
you should make one file and put the code from that section in that file. The only
exceptions from this are the sections in the chapter on Neural Language Models.
There the code from both sections should be placed in a single file. Once you save
the code to a file, open the command line, navigate to the directory containing the
code file (let us call it myFile.py), activate the dlBook01 environment, type
in python myFile.py and hit enter. The file will execute, print something on
the screen and perhaps create some additional files (depending on the code). Notice
the difference between the commands python and python myFile.py. The
former opens the Python interpreter and lets you type in code, and the latter runs the
Python interpreter on the file you have specified.

2.6
A Brief Overview of Python Programming
43
2.6 A Brief Overview of Python Programming
In the last section, we have discussed installation of Python, TensorFlow and Keras,
as well as how you should make an empty Python file. Now it is time to fill it
with code. In this section, we will explore the basic data structures and commands in
Python. You can put everything we will be exploring in this section in a single Python
file (we will call it testing.py). To run it, simply save it, open a command line
in the location of the file and type python testing.py. We start out by writing
the first line of the file:
print("Hello, world!")
Thislinehastwocomponents,astring(asimpledatastructureequivalenttoaseries
of words) "Hello world!" and the function print( ). This function is a built-
in function, which is a fancy name for a prepackaged function that comes with Python.
You can use these functions to define more complex functions, but we will get to that
soon. You can find a list and explanation of all the built-in functions at https://
docs.python.org/3/library/functions.html. If this or any other link
becomes obsolete, simply use a search engine to locate the right web page.
One of the most basic concepts in Python is the notion of type. Python has a
number of types but the most basic ones we will need are string (str), integers (int)
and decimals (float). As we have noted before, strings are words or series of words,
ints are simply whole numbers and floats are decimal numbers. Type in python
in a command line and it will open the Python interpreter. Type in "1"==1, an it
will return False. This relation (==) means ‘equal’, and we are telling Python to
evaluate whether is “1” (a string) equal to 1 (an int). If you put != instead of ==,
which means ‘not equal’, then Python will return True.
The problem is that Python cannot convert an int to a string, or vice versa, but you
could try to tell Python int("1")==1 or "1"==str(1) and see what happens.
Interestingly, Python can convert ints to floats and vice versa, so 1.0==1 evaluates
to True. Note that the operation + has two meanings, for ints and floats, it is addition,
and for strings it is concatenation (sticking two strings together): "2"+"2"=="22"
returns True.
Let us return to our file, testing.py. You can use the basic functions to define
a more complex one as follows:
def subtract_one(my_variable): #this is the first line of code
return (my_variable - 1)#this is the second line…
print(subtract_one(53))
Let us dig into the anatomy of this code, since this is a basis for any more complex
