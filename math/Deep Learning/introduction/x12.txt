1Notice that they also have the same number of members or cardinality, namely 2.
© Springer International Publishing AG, part of Springer Nature 2018
S. Skansi, Introduction to Deep Learning, Undergraduate Topics
in Computer Science, https://doi.org/10.1007/978-3-319-73004-2_2
17

18
2
Mathematical and Computational Prerequisites
A set does not remember the order of elements or repetitions of one element. If we
have a set that remembers repetitions but not order we have multisets or bags, so we
have {1, 0, 1} = {1, 1, 0} but neither is equal to {1, 0}, we are talking about multisets.
The usual way to denote bags to distinguish them from sets is to number the elements,
so instead of writing {1, 1, 1, 1, 0, 1, 0, 0} we would write {"1" : 5, "0" : 3}. Bags will
be very useful to model language via the so-called bag of words model as we will
see in Chap.3.
If we care both about the position and repetitions, we write (1, 0, 0, 1, 1). This
object is called a vector. If we have a vector of variables like (x1, x2, . . . , xn) we write
it as x or x. The individual xi, 1 ≤ i ≤ n, is called a component (in sets they used to
be called members), and the number of components is called the dimensionality of
the vector x.
The terms tuple and list are very similar to vectors. Vectors are mainly used
in theoretical discussions, whereas tuples and lists are used in realizing vectors in
programming code. As such, tuples and lists are always named with programming
variables such as myList or vectorAsTuple. So an example of either tuple
or list would be newThing := (11, 22, 33). The difference between tuple and a
list is that lists are mutable and tuples are not. Mutability of a structure means
that we can assign a new value to a member of that structure. For example, if we
have newThing := (11, 22, 33) and then we do newThing[1] ← 99 (to be read
‘assign to the second2 item the value of 99’), we get newThing := (11, 99, 33).
This means that we have mutated the list. If we do not want to be able to do
that, we use a tuple, in which case we cannot modify the elements. We can
create a new tuple newerThing such that newerThing[0] ← newThing[0],
newerThing[1] ← 99 and newerThing[2] ← newThing[2] but this is not
changing the values, just copying it and composing a new tuple. Of course, if we
have an unknown data structure, we can check whether it is a list or tuple by trying
to modify some component. Sometimes, we might wish to model vectors as tuples,
but we will usually want to model them as lists in our programming codes.
Now we have to turn our attention to functions. We will take a computational
approach in their definition.3 A function is a magical artifact that takes arguments
(inputs) and turns them into values (outputs). Of course, the trick with functions is
that instead of using magic we must define in them how to get from inputs to outputs,
or in other words how to transform the inputs into outputs. Recall a function, e.g.
y = 4x3 + 18 or equivalently f (x) = 4x3 + 18, where x is the input, y is the output
and f is the function’s ‘name’. The output y is defined to be the application of f to x,
i.e. y := f (x). We are omitting a few things here, but they are not important for this
book, but we point the interested reader to [1].
When we think of a function like this, we actually have an instruction (algorithm)
of how to transform the x to get the y, by using simpler functions such as addition,
2The counting starts with 0, and we will use this convention in the whole book.
3The traditional definition uses sets to define tuples, tuples to define relations and relations to define
functions, but that is an overly logical approach for our needs in the present volume. This definition
provides a much wider class of entities to be considered functions.

2.1
Derivations and Function Minimization
19
multiplication and exponentiation. They in turn can be expressed from simpler func-
tions, but we will not need the proofs for this book. The reader can find in [2] the
details on how this can be done.
Note that if we have a function with 2 arguments4 f (x, y) = xy and pass in values
(2, 3) we get 8. If we pass in (3, 2) we will get 9, which means that functions are
order sensitive, i.e. they operate on vector inputs. This means that we can generalize
and say that a function always takes a vector as an input, and a function taking an
n-dimensional vector is called an n-ary function. This means that we are free to use
the notation f (x). A 0-ary function is a function that produces an output but takes
in no input. Such a function is called a constant, e.g. p() = 3.14159 . . . (notice the
notation with the open and closed parenthesis).
Note that we can take a function’s argument input vector and add to it the output,
so that we have (x1, x2, . . . , xn, y). This structure is called a graph of the function
f for inputs x. We will see how we can extend this to all inputs. A function can
have parameters and the function f (x) = ax + b has a and b as parameters. They
are considered fixed, but we might want to tweak them to get a better version of the
function. Note that a function always gives the same result if it is given the same
input and you do not change the parameters. By changing the parameters, you can
drastically change the output. This is very important for deep learning, since deep
learning is a method for automatically tuning parameters which in turn modifies the
output.
We can have a set A and we may wish to create a function of x which gives a
value 1 to all values which are members of A and 0 to all other values for x. Since
this function is different for all sets A, other than this, it always does the same thing,
we can give it a name which includes A. We choose the name 1A. This function is
called indicator function or characteristic function, and it is sometimes denoted as
χA in the literature. This is used for something which we will call one-hot encoding
in the next chapter.
If we have a function y = ax, then the set from which we take the inputs is called
the domain of the function, and the set to which the outputs belong is called the
codomain of the function. In general, a function does not need to be defined for all
members of the domain, and, if it is, it is called a total function. All functions that
are not total are called partial. Remember that a function assigns to every vector
of inputs always the same output (provided the parameters do not change). If by
doing so the function ‘exhausts’ the whole codomain, i.e. after assignment there are
no members of the codomain which are not outputs of some inputs, the function
is called a surjection. If on the other hand the function never assigns to different
input vectors the same output, it is called an injection. If it is both an injection and
surjection, it is called a bijection. The set of outputs B given a set of inputs A is called
an image and denoted by f [A] = B. If we look for a set of inputs A given the set of
outputs B, we are looking at its inverse image denoted by f −1[B] = A (we can use
the same notation for individual elements f −1(b) = a).
4A function with n-arguments is called an n-ary function.
