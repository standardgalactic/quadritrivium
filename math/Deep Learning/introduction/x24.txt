and t(B) = 0, and t(¬A) = 1 if and only if t(A) = 0. Our old friend, XOR, lives here
as XOR(A, B) := A ≡ B.
The system we described above is called propositional logic, and we might want
to modify it a bit. Let us briefly address a first modification, fuzzy logic. Intuitively,
if we allow the truth values to be not just 0 or 1 but actually real values between 0
and 1, we are in fuzzy logic territory. This means that a proposition A (suppose that
A means ‘This is a steep decline’) is not simply 1 (‘true’), but can have the value 0.85
(“‘kinda” true’). We will be needing this general idea. Connections between fuzzy
logic and artificial neural networks form a vast area of active research, but we cannot
go in any detail here.
Butthemainextensionofpropositionallogicistodecomposepropositionsinprop-
erties, relations and objects. So, what was simply A in propositional logic becomes
A(x) or A(x, y, z). The x, y, z are then called variables, and we need a set of valid
objects over which they span, called the domain. A(x, y) could mean ‘x is above
y’, and this is then either true or false depending on what we give as x and y. So
the main option is to provide two constants c and d which denote some particular
members of the domain, say ‘lamp’ and ‘table’. Then A(c, d) is true. But we can
also use quantifiers, ∃ (‘exists’) and ∀ (‘for all’) to say that there exists some object
which is ‘blue’, and we write ∃xB(x). This is true if there is any object in the domain
which is blue. Same goes ∀, and the syntax is the same, but it will be true if all
members of the domain are blue. Of course you can also compose sentences like
∃x(∀yA(x, y) ∧ ∃z¬C(x, z)), the principle is the same.

40
2
Mathematical and Computational Prerequisites
We can also a quick look at fuzzy first-order logic. Here, we have a predicate
P (suppose P(x) means ‘x is fragile’) and a term c (denoting a flower pot). Then,
t(P(c)) = 0.85 would mean that the flower pot is ‘kinda’ fragile. You can look at it
from another perspective, as fuzzy sets: take P to be the set of all fragile things, and
c then belongs to the fuzzy set P with a degree of 0.85.
One important topic from logic we need to cover is a Turing machine. It is the
original simulator of a universal machine from the previously mentioned paper by
Alan Turing [13]. The Turing machine has a simple appearance, comprising two
parts: a tape and a head. A tape is just an imaginary piece of paper that is infinitely
long and is divided into cells. Each cell can either be filled with a single dot (•), with
a separator (#) or blank (B). The head can read and memorize a single symbol, write
or erase a symbol from a cell on the tape. It can go to any cell of the tape. The idea is
that this simple device can compute any function that can be computed at all. In other
words, the machine works by getting instructions, and any computable function can
be rewritten as instructions for this machine. If we want to compute addition of 5
and 2, we could do it in the following manner:
1. Start by writing the blank on the first cell. Write five dots, the separator and three
dots.
2. Return to the first blank.
3. Read the next symbol and if it is a dot, remember it, go right until you find a
blank, write the dot there. Else, if the next symbol is a separator return to the
beginning and stop.
4. Return to step 2 of this instruction and start over from there.
We conclude with the definition of logic gates. A logic gate is a representation of
a logical connective. An AND gate takes two inputs, and if they are both 1, it outputs
a 1. An XOR gate is also a gate which gives 1 if a 1 is coming from either side, gives
0 if nothing is coming, and blocks (produces a 0) if both are coming with 1.A special
kind of a logic gate is a voting gate. This gate takes not just two but n inputs, and
outputs a 1 if more than half of the inputs are 1.A generalization of the voting gate
is the threshold gate which has a threshold. If T is the threshold, then the threshold
gate outputs 1 if more than T inputs are 1 and 0 otherwise. This is the theoretical
model of all simple artificial neurons: in terms of theoretical computer science, they
are simply threshold logic gates and have the same computational power.
A natural physical interpretation for logic gates is that they are a kind of switch
for electricity, where 1 represents current and 0 no current.36 Most of the things work
out (some gates are impossible but they can be obtained as a combination of others),
but consider what happens to a negation gate when 0 is coming: it should produce
1, but this eludes our intuitions about currency (if you put two switches on the same
36This is not exactly how it behaves, but it is a simplification which is more than enough for our
needs.

2.4
Logic and Turing Machines
41
line and close one, closing the other will not produce a 1). This is a strong case for
intuitionistic logic where the rule ¬¬P → P does not hold.
2.5 Writing Python Code
Machine learning today is a process inseparable from computers. This means that any
algorithm is written in program code, and this means that we must choose a language.
We chose Python. Any programming language is actually just a specification of code.
This means to write a program you simply open a textual file, write the correct code
and then change the extension of the file from .txt into something appropriate. For
ANSI C, this is .c, and for Python this is .py. Remember, a valid code is defined by
the given language, but all program code is just text, nothing else, and can be edited
by any text editor.37
A programming language can be compiled or interpreted. A compiled language
is processed by compiling the code, while an interpreted language uses another
program called an ‘interpreter’ as a platform. Python is an interpreted language
(ANSI C is a compiled language), and this means we need an interpreter to run
Python programs. The usual Python interpreter is available at python.org, but
we suggest to use Anaconda from www.continuum.io/downloads. There are
currently two versions of Python, Python 3 and Python 2.7. We suggest to use the
latest version of Python, which at the time of writing is Python 3.6. When installing
Anaconda, use all the default options except the one that asks you whether you would
like to prepend Anaconda to the path. If you are not sure what this means, select ‘yes’
(the default is ‘no’), since otherwise you might end up in a place called ‘dependency
hell’. There are detailed instructions on how to install Anaconda on the Anaconda
web page, and you should consult those.
Once you have Anaconda installed, you must create an Anaconda environment.
Open your command prompt (Windows) or terminal (OSX, Linux) and type conda
create -n dlBook01 python=3.5 and hit enter. This creates an Anaconda
environment called dlBook01 with Python 3.5. We need this version for Tensor-
Flow. Now, we must type in the command line activate dlBook01 and hit
enter, which will activate you Anaconda environment (your prompt will change to
