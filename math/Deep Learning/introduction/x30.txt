we just need a threshold on the weight like weight > 5. Here, we could quite easily
combine it with other parameters and find a better separation by purely logical ways
(no arithmetical operations, just relations <, > and = and logical connectives ∧, ∨,
¬). This could offer us the insight on what the hyperplane means, since we would
know exactly how it behaves and manually tweak it. If we use machine learning for
delicate matters (e.g. predicting failures for nuclear reactors), we want to be able to
understand the why. This is the basis of decision tree learning [4], which is a very
useful first model when tackling an unknown dataset.2
Hyperplane D seems great—it catches all Xs on one side and all Os on the other.
Why not use that? Notice how it went out of its way to catch the middle O. We might
worry about a hyperplane that provides a perfect fit to the existing data, since there
is always some noise3 in the data, and a new datapoint that falls here might happen
to be an X. Think of it this way. If there was no O here, would you still justify the
same loop? Probably no. If 25% of the overall Os were here, would that justify a
loop like this? Probably yes. So, there seems to be a fuzzy limit of the number of Os
we want to see to make such a loop justified. The point is that we want the classifier
to be good for new instances, and a classifier that works in 100% of the old cases is
probably learning noise along with the important and necessary information from the
datapoints. Hyperplane C is a reasonable separation which is quite good and seems
to be less concerned with precision than hyperplane C. It is not perfect, but it seems
to be capturing a rather general trend in the data.
There is, however, a dose of simplicity in hyperplanes A, B and particularly E
we would love to have. Let us see if we can make it happen. What if we use the
features we have to create a new one? We have seen we could add a new one like
height, but could we just try to build something with what we have? Let us try to
plot on the axis z a new feature length
weight (Fig. 3.3, top view). Now, we see that we can
2A dataset is simply a set of datapoints, some labelled some unlabelled.
3Noise is just a name for the random oscillations that are present in the data. They are imperfections
that happen and we do not want to learn to predict noise but the elements that are actually relevant
to what we want.

3.1
Elementary Classification Problem
55
Fig.3.3 Feature engineering
actually separate the two classes by a simple straight plane in 3D. When it is possible
to separate4 two classes in an n-dimensional space with a ‘straight’ hyperplane, we
say that the classes are linearly separable. Usually, one can find a feature which is
then added as a new dimension which makes two classes (almost) linearly separable.
We can manually add features in which case it is called feature engineering, but we
would like our algorithms to do it automatically. Machine learning algorithms work
by exploiting this idea and they automate the process: they have a linear separator
and then they try to find features such that when they are added the classes become
linearly separable. Deep learning is no exception, and it is one of most powerful
ways to find features automatically. Even though later deep learning will do this for
us, to understand deep learning it is important to understand the manual process.
So far we have explored features that are numerical, like height, weight and length.
They are specific in two ways. First, order matters: 1 is before 3, 3 is before 14 and we
can derive that 1 is before 14. The use of ‘before’ instead of ‘less than’ is deliberate.
The second thing is that we can add and multiply them. A different kind of feature is
an ordinal feature. Here, we have the first property of the numerical features ‘before’
but not the second. Think of the ending positions in a race: the fact that someone
is second, someone is third and someone is fourth does not mean that the distance
between the second and third is the same as between third and fourth, but the order
still holds (second comes before third, and third comes before fourth). If we do not
have that either, we are using categorical features. Here, we have just the names
of the categories and nothing can be inferred from them. An example would be the
dog’s colour. There are no ‘middles’ or orders in them, just categories.
Categorical features are very common. Machine learning algorithms cannot accept
categorical features as they are and they must be converted. We take the initial table
with the categorical feature ‘Colour’:
4It does not have to a perfect separation, a good separation will do.

56
3
Machine Learning Basics
Length Weight Colour Label
34
7
Black
Dog
59
15
White Dog
54
17
Brown Dog
78
28
White Dog
…
…
…
…
And convert it so that we expand the columns with the initial category names and
allow only binary values in those columns which indicate which one of the colours the
given dog has. This is called one-hot encoding, and it increases the dimensionality5
of the data but now a machine learning algorithm6 can process the categorical data.
The modified table7 is
Length Weight Brown Black White Label
34
7
0
1
0
Dog
59
15
0
