Hey how's it going everybody? In this video we're going to go over
Git command line basics. We're going to talk a little bit about what Git is
and then we're going to walk through how to get
installed and then the basic commands for working with local and remote
repositories. I'm going to use a couple of images in
this walkthrough and these images were taken from the Pro Git
book written by these two authors here and it is
licensed under the Creative Commons. If you want to
read the book, which is a great resource, you can go to the
Git website, click on the documentation and the book is listed there.
So this video is going to be useful for three different types of people.
First of all, somebody who has never used version control before. This is a
great place to start because Git is the most widely
used version control system out there. Second, for people who have used version
control but not Git. So if you're coming from a version control system like
SVN, then it's going to be great to learn about Git also.
And third, this will be useful for people who have used Git
but have mainly used the GUI visual tools.
So the GUI tools are really useful but it's better to learn
these command line tools from the very beginning because
the GUIs can only do so much and you will eventually run into a situation
where you get stuck and the underlying knowledge of the command line
would be extremely useful. So with all that said, let's go ahead and get
started. So first of all, Git is a distributed
version control system. So if you're coming from a version control system
like SVN, which is a central version control system,
then what is the difference between central and distributed
version control? Well, a central version control system is located in one place.
So people can check out from this central location and make their changes
and then check everything back in. But this can be problematic if you can't
get access to that central server or that central repository.
So for example, if that server's offline or you're working somewhere that
doesn't have a network connection, then you'll only be able to see the files
that you've checked out from that repository and no additional
information about that central remote repository.
Also if something happens to that central repository or
that somehow gets corrupted, then you've got to hope that there's a backup of that
code somewhere. Now on the other hand, a distributed version
control system like Git. In this situation, everybody has a
local repository. So you can have the option to have
that central remote repository, which we'll look at here in a little bit.
But your local repository has all of the information that your
that your remote repository has based on the last time that you sync those two
together. So the good thing about this is that
if you don't have access to that remote repository,
then you can still view every single change that's been made
to that repository since it was created. So in a way, it's almost like every
developer has an entire backup of the repository.
So in the worst-case scenario of something happening to the remote
repository, every developer has a copy of that
same repository on their machine. So that's why it's called a distributed
version control system. So now let's go ahead and get started with Git.
Now I'm not going to go into too much detail about the installation here.
If you go to the website, which is git-scm.com, and then you go to the
downloads tab here, then you can find the download for
any operating system that you're working with, and the
installation is pretty self-explanatory. So after we get
installed, there is a first time setup that we have to go through.
So first of all, after you git get installed,
then you can check the version to make sure that it's installed correctly. So if
you run this command here, git-version, so I'm going to open up
my terminal window here. Now if I run git-version,
and it pops up with some version here, here it says git version 2.3.2,
then that means that git is successfully installed.
Now once you have git successfully installed, now we need to set up
some global configuration variables. Now these variables are important because
if you're working with other developers, then they need to know
who is checking the code in and out and making changes and things like that.
So this is a way to add your name to all of your check-ins and code changes.
So this is the syntax here to add these variables in here. So if I go back to
my terminal, then I can type git config dash dash global
user dot name, and then in quotes I can type in
my name here. So I'll type in Cory Schaffer, hit enter,
and now we can do the same thing for email. So I'll type in
user dot email, and then here I'll type in
my email address at gmail.com, hit enter, and now after we've put in those
values, then to check those values, we can do git config
dash dash list, and this will list all of our
configuration values here. Now I'm going to have a little bit more
than you do, you'll probably only have a few values here, but I've
customized my git a little bit over time, so you can see all the values that I
have listed here. But the important ones to look for are to
make sure that we have our user dot nameset and our user dot email set.
So once you have those values working, then you are good to move on.
Now git config was the first git verb that we actually used. It was the first
action that we used. Now if you ever need help with any of these actions,
then you can use this syntax, either git help in the verb
or git verb dash dash help. And what I mean by that is using
config as an example. So say I want to see what you can do with the
config action. So I can do git help, config, and hit enter, and it'll take me to
the manual page, and you can read all about it here.
Or the other syntax that you can do is git config
dash dash help and read through there. And you can do this with any
git action. So you git add dash dash help does the same thing. It takes you to
the manual page for the add action. So that's extremely useful once you start
doing more intermediate and advanced things with
git. It's useful to look at those manuals and
see exactly what you can do with them.
Now there are two common scenarios for people to begin
using git. So the first scenario is that you have
an existing project on your local machine that you want to start tracking
using git. And the second scenario is whenever
there's an existing project remotely that you want to start developing on.
So first let's take a look at that first example
where you have a local code base that you want to start tracking using git.
So in order to do this it's just as easy as running the git and it command
from within the directory in your terminal. So for example
let me pull up my terminal here. Now the code that I want to start tracking
if I do an ls within this directory the code that I want to start tracking is
within this local repo directory. So if I cd
to local repo and then I do an ls-la in here which will list
all of the files in the directory. You can see that there is a dot project
file here and there's a calc.py file here.
So to begin tracking this code with git it's just as easy
as running git and it. And if I hit enter you can see that
it initialized an empty git repository. And now
if I do an ls-la then you can see that it placed this dot git file here.
Now this dot git it's actually a directory. This dot git directory
contains everything that's related to our repository.
So if we ever want to stop tracking our project
with git then all we have to do is remove
this git directory just like we would any other directory.
And if I do an ls-la it's gone and we're no longer
tracking this project with git. But we don't want to do that we want to
track this project. So let's do this again. Now you can see it put that
git directory back there and now we are using git within this directory.
So now we're using git in our directory but
we haven't actually committed anything yet. So
before we commit anything let's first run this
git status here. So if I pull up my terminal and I run
git status you can see here that we have two untracked files
.project and calc.py. Now this .project file is just a file that I
created as an example of a file that we don't want in our repository for
other people to see. So there's a lot of files that contain
personal preferences specific to our machine or our operating system
that aren't actually part of the code that we want tracked.
So for example say that I had my personal preferences within this .project
file I wouldn't want to add those to the
repository and whenever other people check those out they would be getting my
preferences and we don't want that. So what we want to do is ignore these
files and to ignore files you just have to create
a .gitignore file. So I'm going to do a touch on a .gitignore file
which will create which will create that .gitignore file
and now let me go ahead and open this up in my text editor.
Okay so the gitignore file is just a simple text file where we can add files
that we want git to ignore and we can also use wildcards. So for
example here in this slide I have this star.pyc
which will ignore all files with a pyc extension.
So that's a python example but that's not important it's
I'm just showing the concept here. So let's go ahead and add all these files
here to our gitignore file and I'll paste that in
and save that and now let me go back to my terminal
now that we've added those to the gitignore file and saved it.
Now let's rerun git status and now you can see here that the .project file is
no longer coming up in our list of untracked
files it's only the .gitignore file and the calc.py file
and we want to commit the gitignore file because we want the repository
to know to always ignore those files. Okay now let's take a step back here
and try to picture exactly where we are right now.
Now with git there are three states that we need to know about.
There's the working directory, the staging area, and the committed files
and right now we're currently in our working directory.
So untracked and modified files will be in our working directory
and it will list those when we ran git status. So
you can see here if I open up my terminal then these are the files in our
working directory here. Now the staging area is where we
organize what we want to be committed to our repository.
Now the reason for the staging area is so that we can pick and choose
what we want committed. So if we've done a lot of work spanning multiple
files and we want to make multiple commits from those changes
then you can stage individual files and commit those in small chunks at once.
So that's going to allow us to be more detailed with our commits.
So for example you don't want to make a commit
that where you add a message that just says like I made a lot of changes to the
code. You want commits that are very detailed as to what changes were made.
So now that we know about that staging area let's go ahead and add files to the
staging area. So if we want to add all the files
that are currently untracked or that we've made changes to
to the staging area then we could run git add dash
capital A or we could add these individually.
So for example here if I did a git add
dot git ignore then if I do a git status
and that's going to show us okay so here we have
calc.py which is currently untracked and then you can see
that our git ignore file is in our staging area because we ran
git add dot git ignore and like I said in the slide if we want to add
everything to the staging area then we can just do git add
dash capital A and hit enter and now if I run git status
then you can see that all of our files are now in the staging area.
So if we were to run git commit right now then it would commit
these changes to our repository. Now if you ever want to
remove files from the staging area then you can use the git reset
command. So if I did git reset calc dot py and
then did a git status you can see that the git ignore
file is still in our changes to be committed which is in the staging area
and our calc dot py file is in the untracked files.
If you want to remove everything from the staging area
then you can run git reset without any other options
and it will remove everything so if I type git status now
then you can see that all these files are moved back to our working directory
as untracked files. Okay but we actually want to make
a commit now so let's go through this process again.
What we want to do is we want to run git add
dash a to add everything to the staging area
and now if I run a git status you can see that
all of these changes will be committed and in order to get these
in order to commit these files we run git commit
and then dash m which will put a message. Now the messages are important.
You want to be detailed as to the changes that you made
to the code but this is our first commit here so
we're just going to put something like initial commit so if I hit enter there
you can see that it added the two files to the repository.
Now if I run a git status you can see that it says that the working directory
is clean that's because we've committed those files and now we
don't have any modified or untracked files those are being tracked now and
we haven't modified them since we committed them.
Now another useful command here is the log command so if we run
git log then we can see the commit that we just made.
So this gives us the hash number of that commit.
Now all those hashes will be unique and then you can see
that the our author who made the commit and then the message for that commit
also. So now for this example we are successfully
tracking our local project and we have made changes and
committed those changes to the repository. So now let's talk about the
situation that we mentioned earlier where we want to track an existing
remote project with git. Now this is likely
how most of you will be using git if you're going to be using it
in the workplace. So for example say that your company
has a remote repository and you want to clone that remote repository and begin
developing on it. Now the syntax for this is get clone
then the url and then where you want to clone that repository.
So in the example that I'm going to use I'm going to use
this remote repo here which is actually just a directory on my local machine.
Now usually this is going to be a url so for example if this was coming from
github or something like that then it may look
something more like this so you do get clone and then
the url of the remote repository and then
where you want to clone that repository. So in this case the dot
is just means in the current directory. But like I said in this example I'm going
to be using this directory here which is on my local
machine but it's going to behave exactly like a remote repository would.
So let me open up my terminal and let me go back
to this git basics directory. Now if I run an ls here
then I have this directory called clone repo I'm going to
cd into that. Now if I do an ls-la here then you can see that this is
completely empty these are just relative paths here.
So now I want to clone a remote repository here
so I want to do a git clone and then the url of the repository
and then this dot means that I want to clone all the files
from that repository into this current directory. So if I hit enter
you can see that it cloned into the current directory
now if I do an ls-la then you can see now I have files here.
Now I set up this sample remote repository to be very similar to
the example that we just used in the local directory.
So now that we've cloned that remote repository now let's
see how we can view information about that remote repository.
So in order to do that we can use a couple of commands one of these commands
is git remote-v and another is git branch-a.
So if I was to do git remote-v then you can see it lists
the information to the repository here so
this is just the location on my local machine of where this repository is
and also if I was to do git branch-a then it will list all of the
branches in our repository not only locally but remotely as well.
Now we haven't gone over branches yet but we will do that here shortly.
Now let's make a couple of changes to the code base
and we can take a look at how to commit those files and how to push them to
the remote repository.
So over here I'm going to go into this clone repo and open up this calc.py
file and now I'm just going to make a simple change here I'm just going to
change this multiply function to return what we want it to return so I'll do
return x times y and I'll save that. So now we've made a change to our code
so now that we've made a change to our code how are we going to push these
changes to the remote repository. So first we need to commit these changes
locally just like we did before so if I open up the terminal here
then the first thing I can do is git diff and git diff is going to show me the
changes that I have made to the code. So you can see here
that it has this minus sign with the past that's what I removed
and then the plus sign here return x times y that's what I added in.
So those are the changes that I made to the code now if I run git status we've
seen this before then you can see that in our
working directory we have this modified calc.py file
and now if you remember we want to add those to the staging directory so that
they can be committed. So we'll do a git add dash capital A to add
all the changes now if I run git status again then we can see
that those are ready to be committed and now we can do git commit
dash m and then for a message here we can just do
you know multiply function. Okay so now we have committed these files
locally and now we want to push these changes to the remote repository so that
other people have access to those. Now whenever you're ready to commit those
changes and push them to the remote repository
there are two things that you want to do. I get pull and I get push
now people a lot of times forget to get pull
but you have to remember that we're now working on a project that could
potentially have multiple developers and people have been pushing code to that
remote repository while we've been working on our own
features so what the git pull does is it will pull
any changes that have been made since the last time
that we pulled from that repository and as you can see after we ran that pull it
said that we were already up to date because there have been no changes to
that remote repository since the last time that we pulled from it
and now we're ready to push and we will do a git push
and this origin here is just the name of our remote repository and then the
master is the branch that we want to push to so if we run that
then we have successfully pushed those changes that we just made
to the master branch of that remote repository
so now that we've worked a little bit with local and remote repositories
now let's go ahead and take a look at a common workflow
that a lot of developers use when working with git
so i said before that we were going to take a deeper look into
branching so so far we've been working directly
on our master branch but this isn't really how you should be
using git from day to day so let's say that for example
now instead of that multiply function we want to work on our
divide function so a common workflow that you're going to use to do this
is to create a branch for your desired feature
and then begin working off of that branch so the syntax for creating a branch
is git branch and then the name of the branch which we'll just call
calc divide so i'm just going to copy that now let's open up our terminal
and now let's create that branch so git branch calc divide
and now if i run git branch without the branch name then it's going to list
all of my local branches you can see that i have master here
which has the asterisk beside it and that means that i that's the branch that
i'm currently working on if i want to start working on the calc divide branch
then i have to check that branch out and that's using this syntax here
git checkout and then the name of the branch so i'm going to do git checkout
calc divide now if i rerun that git branch you can see that i am
working on the calc divide branch so now let's start working on the changes
that we want to make on this branch so the changes i want to make here i want
to work on this divide function so i want to return
x divided by y and i'll save those changes
and now that i've made those changes now let's just commit this
just like we have been doing so if i do a git status you can see that our
calc dot py file has been modified i want to
add those changes to our staging area using the git add command
then i want to do a git commit with a message of we'll just call this
divide function well divide function and now we have
successfully committed this change to our local calc divide branch
now this had no effect on our local master branch
and it's had no effect on our remote repository
so now let's say that we want to push this branch to our remote repository
so this is the syntax for doing that here this git push
dash u origin which is the name of our remote repository
and then the branch that we want to push to now i'm not going to go too far
into what that dash u does since it's a basic git video
but basically the u option just tells git that we want to associate
our local calc divide branch with the remote calc divide branch
and then in the future instead of doing this git push dash u
origin calc divide stuff like that we can just do
git push and git pull like this and it will know that those two branches
are associated to each other but we're not going to go too far into that right
now so if i pull up the terminal here and i do
this command git push dash u origin calc divide
hit enter now we have pushed that calc divide branch
to the remote repository so now if you remember
earlier we did this git branch dash a command
and if we run this again this command was to see
all of our branches so if we run this they can see that we
can see our two local branches here calc divide which has the asterix which
means we're currently working on that branch
then we can see that in our remote repository
we have a calc divide branch and the master branch
now there's a lot of reasons for why you would want to push your branch up
to the remote repository and a lot of companies that's where they run
their unit tests and things like that to make sure that all the
code runs well before it's merged with master
but let's say that all of those unit tests and everything
ran really well and now we're ready to merge that branch with master
now the way we want to do this is we want to check out
our local master branch so we'll do git checkout master and you can see here
that we switched to our master branch now we want to pull all the changes down
remember before we commit anything to master we always want to
pull down the changes in case any changes were made while we were working
on our feature you can see here that it says that we're already up to date
because nobody else has made changes to that remote branch since we've been
working on the calc divide branch and now we can do this option on
git branch here which is dash dash merged and what that's going to tell us
is the branches that we've merged in so far and you can see here that if I run
that calc divide doesn't pop up here because it
hasn't been merged yet so in order to merge that branch with master
you do a git merge and then the name of the branch
so i want to merge calc divide with master so i'm in the master branch
i do a git merge calc divide and it will merge those changes into master
now that i have merged those changes into the master branch
then i can push these changes to our remote master branch
by doing a git push origin master just like we did before
and then now those changes have been pushed to the master
master branch on the remote repository so now that we have finished
merging those changes from calc divide now that feature is done and we're ready
to delete that branch so that same command that i ran
earlier just to double check that everything was successfully merged
if we rerun git branch dash dash merged here
now you can see that calc divide shows up here so that means that
we have already merged in all the changes in that branch into master
so now we're ready to delete that branch since it's no longer necessary
so we can do git branch and then dash d which will
delete it and then calc divide which is the name of our branch
so now that has been deleted locally but remember that we
also pushed that branch to the remote repository so
that command that we did earlier git branch dash a
if we run that again then you can see that we deleted our local branch and
all we have is master but we still have this calc divide
branch on our remote repository so to delete a branch from the remote
repository then it's this syntax here we can do
a git push origin which is the name of our remote repository
dash dash delete then the branch so if we run that
and then we rerun git branch dash a you can see that all we have is our local
master branch and our remote master branch
okay and i know that that was a lot to take in especially if you're new to
something like git but it's really not that bad once you
get the hang of it and this becomes part of your daily routine
now really quick i'm going to run through a faster example here
because i know that that seemed like a very long process but
if i'm not talking through step by step then you'll see
how fast it is to actually make these changes with this
workflow so for example run the master branch here
and say i wanted to work on the subtract function so i can do
git branch subtract and then git check out
subtract so now i'm working on the subtract branch i can come in here
make the changes we want to return x minus y
save that do it get status over here we've modified that
we need want to add that to our staging directory
now we want to commit those changes and you want the commit messages to be
more detailed than that but this is just an example
and then we can do a git push u origin subtract
so now we've pushed that branch to our remote repository
and let's say that all those tests ran well so now we're ready to merge this
with master we can check out our master branch
and now we can do a git pull because we want to pull in all the changes that
have been made so now we pulled in all the changes
now we can do a git merge of the subtract branch this will merge
subtract with master and now
we can push those changes and then you can go through the process of deleting
that branch just like we looked at earlier
but you can see how that process isn't actually
as slow as it was with me going through and step by step explaining it
along the way so that was a broad overview of using the git command line
on local and remote repositories i know that was a lot to take in for one
video but i really hope it was useful for you guys
if you do have any questions just ask in the comment section below
now there's a lot that we didn't get to in this video and i'm going to make
additional videos soon on other topics like if you run
into merge conflicts if you need to undo your mistakes
some other common pitfalls tagging versions in git
and also advanced topics like your git history
rebasing cherry picking and things like that
so be sure to subscribe to the channel to make sure that you catch those later
videos and again i hope this video was useful for
you all and thank you for watching
