Hey how's it going everybody? In this video we're going to go over
Git command line basics. We're going to talk a little bit about what Git is
and then we're going to walk through how to get
installed and then the basic commands for working with local and remote
repositories. I'm going to use a couple of images in
this walkthrough and these images were taken from the Pro Git
book written by these two authors here and it is
licensed under the Creative Commons. If you want to
read the book, which is a great resource, you can go to the
Git website, click on the documentation and the book is listed there.
So this video is going to be useful for three different types of people.
First of all, somebody who has never used version control before. This is a
great place to start because Git is the most widely
used version control system out there. Second, for people who have used version
control but not Git. So if you're coming from a version control system like
SVN, then it's going to be great to learn about Git also.
And third, this will be useful for people who have used Git
but have mainly used the GUI visual tools.
So the GUI tools are really useful but it's better to learn
these command line tools from the very beginning because
the GUIs can only do so much and you will eventually run into a situation
where you get stuck and the underlying knowledge of the command line
would be extremely useful. So with all that said, let's go ahead and get
started. So first of all, Git is a distributed
version control system. So if you're coming from a version control system
like SVN, which is a central version control system,
then what is the difference between central and distributed
version control? Well, a central version control system is located in one place.
So people can check out from this central location and make their changes
and then check everything back in. But this can be problematic if you can't
get access to that central server or that central repository.
So for example, if that server's offline or you're working somewhere that
doesn't have a network connection, then you'll only be able to see the files
that you've checked out from that repository and no additional
information about that central remote repository.
Also if something happens to that central repository or
that somehow gets corrupted, then you've got to hope that there's a backup of that
code somewhere. Now on the other hand, a distributed version
control system like Git. In this situation, everybody has a
local repository. So you can have the option to have
that central remote repository, which we'll look at here in a little bit.
But your local repository has all of the information that your
that your remote repository has based on the last time that you sync those two
together. So the good thing about this is that
if you don't have access to that remote repository,
then you can still view every single change that's been made
to that repository since it was created. So in a way, it's almost like every
developer has an entire backup of the repository.
So in the worst-case scenario of something happening to the remote
repository, every developer has a copy of that
same repository on their machine. So that's why it's called a distributed
version control system. So now let's go ahead and get started with Git.
Now I'm not going to go into too much detail about the installation here.
If you go to the website, which is git-scm.com, and then you go to the
downloads tab here, then you can find the download for
any operating system that you're working with, and the
installation is pretty self-explanatory. So after we get
installed, there is a first time setup that we have to go through.
So first of all, after you git get installed,
then you can check the version to make sure that it's installed correctly. So if
you run this command here, git-version, so I'm going to open up
my terminal window here. Now if I run git-version,
and it pops up with some version here, here it says git version 2.3.2,
then that means that git is successfully installed.
Now once you have git successfully installed, now we need to set up
some global configuration variables. Now these variables are important because
if you're working with other developers, then they need to know
who is checking the code in and out and making changes and things like that.
So this is a way to add your name to all of your check-ins and code changes.
So this is the syntax here to add these variables in here. So if I go back to
my terminal, then I can type git config dash dash global
user dot name, and then in quotes I can type in
my name here. So I'll type in Cory Schaffer, hit enter,
and now we can do the same thing for email. So I'll type in
user dot email, and then here I'll type in
my email address at gmail.com, hit enter, and now after we've put in those
values, then to check those values, we can do git config
dash dash list, and this will list all of our
configuration values here. Now I'm going to have a little bit more
than you do, you'll probably only have a few values here, but I've
customized my git a little bit over time, so you can see all the values that I
have listed here. But the important ones to look for are to
make sure that we have our user dot nameset and our user dot email set.
So once you have those values working, then you are good to move on.
Now git config was the first git verb that we actually used. It was the first
action that we used. Now if you ever need help with any of these actions,
then you can use this syntax, either git help in the verb
or git verb dash dash help. And what I mean by that is using
config as an example. So say I want to see what you can do with the
config action. So I can do git help, config, and hit enter, and it'll take me to
the manual page, and you can read all about it here.
Or the other syntax that you can do is git config
dash dash help and read through there. And you can do this with any
git action. So you git add dash dash help does the same thing. It takes you to
the manual page for the add action. So that's extremely useful once you start
doing more intermediate and advanced things with
git. It's useful to look at those manuals and
see exactly what you can do with them.
Now there are two common scenarios for people to begin
using git. So the first scenario is that you have
an existing project on your local machine that you want to start tracking
using git. And the second scenario is whenever
there's an existing project remotely that you want to start developing on.
So first let's take a look at that first example
where you have a local code base that you want to start tracking using git.
So in order to do this it's just as easy as running the git and it command
from within the directory in your terminal. So for example
let me pull up my terminal here. Now the code that I want to start tracking
if I do an ls within this directory the code that I want to start tracking is
within this local repo directory. So if I cd
to local repo and then I do an ls-la in here which will list
all of the files in the directory. You can see that there is a dot project
file here and there's a calc.py file here.
So to begin tracking this code with git it's just as easy
as running git and it. And if I hit enter you can see that
it initialized an empty git repository. And now
if I do an ls-la then you can see that it placed this dot git file here.
Now this dot git it's actually a directory. This dot git directory
contains everything that's related to our repository.
So if we ever want to stop tracking our project
with git then all we have to do is remove
this git directory just like we would any other directory.
And if I do an ls-la it's gone and we're no longer
tracking this project with git. But we don't want to do that we want to
track this project. So let's do this again. Now you can see it put that
git directory back there and now we are using git within this directory.
So now we're using git in our directory but
we haven't actually committed anything yet. So
before we commit anything let's first run this
git status here. So if I pull up my terminal and I run
git status you can see here that we have two untracked files
.project and calc.py. Now this .project file is just a file that I
created as an example of a file that we don't want in our repository for
other people to see. So there's a lot of files that contain
personal preferences specific to our machine or our operating system
that aren't actually part of the code that we want tracked.
So for example say that I had my personal preferences within this .project
file I wouldn't want to add those to the
repository and whenever other people check those out they would be getting my
preferences and we don't want that. So what we want to do is ignore these
files and to ignore files you just have to create
a .gitignore file. So I'm going to do a touch on a .gitignore file
which will create which will create that .gitignore file
and now let me go ahead and open this up in my text editor.
Okay so the gitignore file is just a simple text file where we can add files
that we want git to ignore and we can also use wildcards. So for
example here in this slide I have this star.pyc
which will ignore all files with a pyc extension.
So that's a python example but that's not important it's
I'm just showing the concept here. So let's go ahead and add all these files
here to our gitignore file and I'll paste that in
and save that and now let me go back to my terminal
now that we've added those to the gitignore file and saved it.
Now let's rerun git status and now you can see here that the .project file is
no longer coming up in our list of untracked
files it's only the .gitignore file and the calc.py file
and we want to commit the gitignore file because we want the repository
to know to always ignore those files. Okay now let's take a step back here
and try to picture exactly where we are right now.
Now with git there are three states that we need to know about.
There's the working directory, the staging area, and the committed files
and right now we're currently in our working directory.
So untracked and modified files will be in our working directory
and it will list those when we ran git status. So
you can see here if I open up my terminal then these are the files in our
working directory here. Now the staging area is where we
organize what we want to be committed to our repository.
Now the reason for the staging area is so that we can pick and choose
what we want committed. So if we've done a lot of work spanning multiple
files and we want to make multiple commits from those changes
then you can stage individual files and commit those in small chunks at once.
So that's going to allow us to be more detailed with our commits.
So for example you don't want to make a commit
that where you add a message that just says like I made a lot of changes to the
code. You want commits that are very detailed as to what changes were made.
So now that we know about that staging area let's go ahead and add files to the
staging area. So if we want to add all the files
that are currently untracked or that we've made changes to
to the staging area then we could run git add dash
capital A or we could add these individually.
So for example here if I did a git add
dot git ignore then if I do a git status
and that's going to show us okay so here we have
calc.py which is currently untracked and then you can see
that our git ignore file is in our staging area because we ran
git add dot git ignore and like I said in the slide if we want to add
everything to the staging area then we can just do git add
dash capital A and hit enter and now if I run git status
then you can see that all of our files are now in the staging area.
So if we were to run git commit right now then it would commit
these changes to our repository. Now if you ever want to
remove files from the staging area then you can use the git reset
command. So if I did git reset calc dot py and
then did a git status you can see that the git ignore
file is still in our changes to be committed which is in the staging area
and our calc dot py file is in the untracked files.
If you want to remove everything from the staging area
then you can run git reset without any other options
and it will remove everything so if I type git status now
then you can see that all these files are moved back to our working directory
