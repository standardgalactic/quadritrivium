as untracked files. Okay but we actually want to make
a commit now so let's go through this process again.
What we want to do is we want to run git add
dash a to add everything to the staging area
and now if I run a git status you can see that
all of these changes will be committed and in order to get these
in order to commit these files we run git commit
and then dash m which will put a message. Now the messages are important.
You want to be detailed as to the changes that you made
to the code but this is our first commit here so
we're just going to put something like initial commit so if I hit enter there
you can see that it added the two files to the repository.
Now if I run a git status you can see that it says that the working directory
is clean that's because we've committed those files and now we
don't have any modified or untracked files those are being tracked now and
we haven't modified them since we committed them.
Now another useful command here is the log command so if we run
git log then we can see the commit that we just made.
So this gives us the hash number of that commit.
Now all those hashes will be unique and then you can see
that the our author who made the commit and then the message for that commit
also. So now for this example we are successfully
tracking our local project and we have made changes and
committed those changes to the repository. So now let's talk about the
situation that we mentioned earlier where we want to track an existing
remote project with git. Now this is likely
how most of you will be using git if you're going to be using it
in the workplace. So for example say that your company
has a remote repository and you want to clone that remote repository and begin
developing on it. Now the syntax for this is get clone
then the url and then where you want to clone that repository.
So in the example that I'm going to use I'm going to use
this remote repo here which is actually just a directory on my local machine.
Now usually this is going to be a url so for example if this was coming from
github or something like that then it may look
something more like this so you do get clone and then
the url of the remote repository and then
where you want to clone that repository. So in this case the dot
is just means in the current directory. But like I said in this example I'm going
to be using this directory here which is on my local
machine but it's going to behave exactly like a remote repository would.
So let me open up my terminal and let me go back
to this git basics directory. Now if I run an ls here
then I have this directory called clone repo I'm going to
cd into that. Now if I do an ls-la here then you can see that this is
completely empty these are just relative paths here.
So now I want to clone a remote repository here
so I want to do a git clone and then the url of the repository
and then this dot means that I want to clone all the files
from that repository into this current directory. So if I hit enter
you can see that it cloned into the current directory
now if I do an ls-la then you can see now I have files here.
Now I set up this sample remote repository to be very similar to
the example that we just used in the local directory.
So now that we've cloned that remote repository now let's
see how we can view information about that remote repository.
So in order to do that we can use a couple of commands one of these commands
is git remote-v and another is git branch-a.
So if I was to do git remote-v then you can see it lists
the information to the repository here so
this is just the location on my local machine of where this repository is
and also if I was to do git branch-a then it will list all of the
branches in our repository not only locally but remotely as well.
Now we haven't gone over branches yet but we will do that here shortly.
Now let's make a couple of changes to the code base
and we can take a look at how to commit those files and how to push them to
the remote repository.
So over here I'm going to go into this clone repo and open up this calc.py
file and now I'm just going to make a simple change here I'm just going to
change this multiply function to return what we want it to return so I'll do
return x times y and I'll save that. So now we've made a change to our code
so now that we've made a change to our code how are we going to push these
changes to the remote repository. So first we need to commit these changes
locally just like we did before so if I open up the terminal here
then the first thing I can do is git diff and git diff is going to show me the
changes that I have made to the code. So you can see here
that it has this minus sign with the past that's what I removed
and then the plus sign here return x times y that's what I added in.
So those are the changes that I made to the code now if I run git status we've
seen this before then you can see that in our
working directory we have this modified calc.py file
and now if you remember we want to add those to the staging directory so that
they can be committed. So we'll do a git add dash capital A to add
all the changes now if I run git status again then we can see
that those are ready to be committed and now we can do git commit
dash m and then for a message here we can just do
you know multiply function. Okay so now we have committed these files
locally and now we want to push these changes to the remote repository so that
other people have access to those. Now whenever you're ready to commit those
changes and push them to the remote repository
there are two things that you want to do. I get pull and I get push
now people a lot of times forget to get pull
but you have to remember that we're now working on a project that could
potentially have multiple developers and people have been pushing code to that
remote repository while we've been working on our own
features so what the git pull does is it will pull
any changes that have been made since the last time
that we pulled from that repository and as you can see after we ran that pull it
said that we were already up to date because there have been no changes to
that remote repository since the last time that we pulled from it
and now we're ready to push and we will do a git push
and this origin here is just the name of our remote repository and then the
master is the branch that we want to push to so if we run that
then we have successfully pushed those changes that we just made
to the master branch of that remote repository
so now that we've worked a little bit with local and remote repositories
now let's go ahead and take a look at a common workflow
that a lot of developers use when working with git
so i said before that we were going to take a deeper look into
branching so so far we've been working directly
on our master branch but this isn't really how you should be
using git from day to day so let's say that for example
now instead of that multiply function we want to work on our
divide function so a common workflow that you're going to use to do this
is to create a branch for your desired feature
and then begin working off of that branch so the syntax for creating a branch
is git branch and then the name of the branch which we'll just call
calc divide so i'm just going to copy that now let's open up our terminal
and now let's create that branch so git branch calc divide
and now if i run git branch without the branch name then it's going to list
all of my local branches you can see that i have master here
which has the asterisk beside it and that means that i that's the branch that
i'm currently working on if i want to start working on the calc divide branch
then i have to check that branch out and that's using this syntax here
git checkout and then the name of the branch so i'm going to do git checkout
calc divide now if i rerun that git branch you can see that i am
working on the calc divide branch so now let's start working on the changes
that we want to make on this branch so the changes i want to make here i want
to work on this divide function so i want to return
x divided by y and i'll save those changes
and now that i've made those changes now let's just commit this
just like we have been doing so if i do a git status you can see that our
calc dot py file has been modified i want to
add those changes to our staging area using the git add command
then i want to do a git commit with a message of we'll just call this
divide function well divide function and now we have
successfully committed this change to our local calc divide branch
now this had no effect on our local master branch
and it's had no effect on our remote repository
so now let's say that we want to push this branch to our remote repository
so this is the syntax for doing that here this git push
dash u origin which is the name of our remote repository
and then the branch that we want to push to now i'm not going to go too far
into what that dash u does since it's a basic git video
but basically the u option just tells git that we want to associate
our local calc divide branch with the remote calc divide branch
and then in the future instead of doing this git push dash u
origin calc divide stuff like that we can just do
git push and git pull like this and it will know that those two branches
are associated to each other but we're not going to go too far into that right
now so if i pull up the terminal here and i do
this command git push dash u origin calc divide
hit enter now we have pushed that calc divide branch
to the remote repository so now if you remember
earlier we did this git branch dash a command
and if we run this again this command was to see
all of our branches so if we run this they can see that we
can see our two local branches here calc divide which has the asterix which
means we're currently working on that branch
then we can see that in our remote repository
we have a calc divide branch and the master branch
now there's a lot of reasons for why you would want to push your branch up
to the remote repository and a lot of companies that's where they run
their unit tests and things like that to make sure that all the
code runs well before it's merged with master
but let's say that all of those unit tests and everything
ran really well and now we're ready to merge that branch with master
now the way we want to do this is we want to check out
our local master branch so we'll do git checkout master and you can see here
that we switched to our master branch now we want to pull all the changes down
remember before we commit anything to master we always want to
pull down the changes in case any changes were made while we were working
on our feature you can see here that it says that we're already up to date
because nobody else has made changes to that remote branch since we've been
working on the calc divide branch and now we can do this option on
git branch here which is dash dash merged and what that's going to tell us
is the branches that we've merged in so far and you can see here that if I run
that calc divide doesn't pop up here because it
hasn't been merged yet so in order to merge that branch with master
you do a git merge and then the name of the branch
so i want to merge calc divide with master so i'm in the master branch
i do a git merge calc divide and it will merge those changes into master
now that i have merged those changes into the master branch
then i can push these changes to our remote master branch
by doing a git push origin master just like we did before
and then now those changes have been pushed to the master
master branch on the remote repository so now that we have finished
merging those changes from calc divide now that feature is done and we're ready
to delete that branch so that same command that i ran
earlier just to double check that everything was successfully merged
if we rerun git branch dash dash merged here
now you can see that calc divide shows up here so that means that
we have already merged in all the changes in that branch into master
so now we're ready to delete that branch since it's no longer necessary
so we can do git branch and then dash d which will
delete it and then calc divide which is the name of our branch
so now that has been deleted locally but remember that we
also pushed that branch to the remote repository so
that command that we did earlier git branch dash a
if we run that again then you can see that we deleted our local branch and
