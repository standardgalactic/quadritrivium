Okay. I don't know if you can see it. So, oh, shit, I have to press a button.
All right. All right. So it's okay now? Yeah, good. I can see it. Yep. Go for it.
All right. Perfect. Now, this is the plan. And we can follow it or we can jump depends
how fast things are going. The first point, which I already mentioned is that computation
is a convention, but I don't mean it in a sense that it's not real. It's just by changing
the convention, you change the computation, and none of them is more real than the others.
They are all either equally real or equally conventions, but they work, all of them. This
is my point. And I will show you the program if we have time. And I start with very, very
simple in case you said you recording, if it gets online, I start very simple so that
other people who are not well prepared about this can understand. So suppose we have an
alien device, I say it's alien because we don't know how it works. And we are supposed
to don't know how it works and to not be able to break in to see how it works. And we know
what it does. So it has, I don't know if you see the mouse, but it's a knob with two possible
positions, A and B. And Q is a switch with two possible positions, C and D. This on the
left and at the right, there is a pointer, which can indicate either X or Y. But these
notations are just put here so that we can refer to these positions. They are not written
in the device because it's alien and they didn't know these letters. But we know that
if we put the knob and the switch in the positions A and C, the pointer will indicate X. And if
we switch the switch to D, the pointer will indicate X. But then if we put the knob in
position B and the switch in position C, the pointer indicates Y. And then the other remaining
possibility, it indicates X again. So now there are two guys, Alice and Bob, who try to figure
out what it does. And Alice believes that it is an AND gate. And for this, she puts the labels F
from false and T for true to the knob, the switch and the pointer. And indeed, it works like the
truth table for the AND boolean function. So only when both of them are true, the pointer
indicates true and the other case it indicates false. But Bob used a different labeling. So what
he got is a different function, the NAND gate, which is basically like AND, but at the end,
you're negated. So he just flipped these two labels. So they get into an argument, they ask
their friends, Carol, David, and so on. And each of them comes with different interpretations.
And they are different, eight different boolean functions. And the device can compute the result
for each of these. We can arrange them like this, where the in and young choices correspond to
true and false. But this is just a nice way to arrange them. So they conclude that there is
something, a relativity of information and computation. They depends on the convention
of the user. They are not an objective reality, but they are a consensus or something, a convention.
In the case of a computer, you have N, suppose you have N different memory cells. Some of them
can be written by the user. There's that form the input. Some of them can be read by the user,
not directly. We use some user interface to do these kind of things. And others are not exposed
to the user. And at every step, the processor changes the state of the memory by following a
particular rule. This rule, although usually computers are not presented like this, but since
it's a state machine and works in steps, this rule is a function that takes N bits and then
computes what those bits should be at the next step. So it's a boolean function again, or N
boolean functions, if you want. So in this case, you can choose the convention, like in the case
of the alien device. There will be two to the power of N just by choosing what each memory cell,
how to interpret each memory cell states as zero or as one or the other way around.
And the particular case is this. So this is the same like this case within memory cells,
but with only three. And this is the alien device that we discussed earlier. It's just like this,
but the computer is more longer and it repeats. It takes its own state as an input that it computes
the next state. And the first objection that comes to mind, and which also blocked me for a while in
this question, was that you can have an AND gate, which is with two push buttons connected in series
and an OR gate, which is two push buttons connected in parallel. And if you ask anyone, they will
say, yeah, the one in series is an AND and the one in parallel is an OR. Everybody who studied a
bit of computer science, they will say this. But still, you can use them to compute any other of
these eight gates that I mentioned earlier. You can use the circuit in series to compute OR,
or you can use the circuit in parallel to compute AND and the other Boolean functions that
that we encounter with the alien device. And of course, computers are made of transistors. So,
and we can say this objective push buttons is either pushed or is not indeed. But you can
formulate a different sentence is about the buttons being pushed on or
being in a position on and off. And there will be different sentences
with different truth values. But they will be
all equally valid. There will be none that is more special. So,
this at first is not very convincing. But if we look at how computer science is applied and how
computers are built, we will see that they actually don't respect this idea that
there is an AND objectively and there is an OR objectively. They switch the convention all the
time. I mean, when I say they, when the hardware is produced for optimization purposes, the convention
is switched internally by design. The hardware, the people who design the hardware, they choose
to do this and they will give some examples. So, now if the objection is that even if we insist that
we can represent the push state of the button as a zero or as one, we make this choice once for all
and it never changes. But in the computer, it actually changes. So, I will give some examples
that will show. So, first of all, there are memory cells that don't look different. So, they are the
mirror image of one another when they are in the state that we want to call zero or in the state
that we want to call one. They look just the same and there is no reason to prefer a convention over
the other just by the fact that they are symmetric. But then even if we choose
a particular convention for a computer, we can see that the other convention works too. So,
for example, to people who have computers that are implemented using different conventions,
they can communicate by flipping the bits they send to each other by inverting them.
Two AIs would be able to communicate and you can conceive of an AI that has a part of actually
this is how they are. They are not, the AI is not in the same computer. They are spread in a network.
So, it's like, we have some neurons in a computer, some neurons in another and so on.
It's even more complicated. But they still work. So, if you change, if you would have a hardware
with a different convention, it will still work because what matters is that at the end,
there is a synchronization between these conventions. And it's actually even in the same
computer. So, we have different kinds of memory sets in the Ezra memory. We have a way to represent
the bits on the hardware a different way and there is no problem about this. Another thing is that,
okay, so this is about communicating when used to opposite conventions. You just use this gate.
Another example is the Arithmetic Logic Unit, which does, which performs additions.
But you can use it to perform subtractions and even various logic operations by changing the
conventions of how to represent the numbers by bits. For example, there is this complement
notation that you use to make easily subtractions as if you do additions and so on.
But the interesting, okay, now about universality. You can use a NAND or you can use a NOR. I mean,
you can make a computer only on NAND gates or only of NOR gates because they are universal. So,
you don't need to have all possible logic gates in the same computer. You can have only one kind
of logic gate and it will do the same operations. So, now the question will be, for example,
if we talk about the computers being sentient. If there is a very atomic experience that is
associated with performing the operation NAND, and my computer doesn't have such a gate because
it's made only of NOR gates, doesn't mean that I don't have this experience. The NAND operation
will be made. It will be realized out of NOR gates, but there is no NAND gate inside of it. So,
these are some kind of questions that we should ask when we try to think how the computer can be
sentient, for example, if we think it can. So, there is this kind of interpretation that I
discussed so far that you can choose to invert the convention for the bits to represent 0 and 1.
There is also another convention that is used by hardware manufacturers to permute the bits,
and these papers illustrate this and they are very important for the computer science.
But even more, computer science has a very central concept, the concept of simulation. So,
when you have a Turing machine, and I describe a bit what a Turing machine is, it has like an
infinite, this is a theoretical abstract Turing machine. Computer is an implementation of physical
instantiations of this, but it has finite memory, but this one has an infinite possible memory
that can access. This tape is possible, it can be extended infinitely,
indefinitely, and all it does is to move at each tape to move to the left or to the right one cell,
or to read the content that is in the current cell or to write. And then the internal state changes
and decides what's the next step. And this is a Turing machine and all computer programs or
algorithms can be implemented with Turing machines, and there are Turing machines that can simulate
any Turing machine. And now the question is, what does it mean that they simulate? They simulate,
I'll give an example. So, here there is the initial state of the tape in the left and the
final step after the computation in the right. And we see that there are three ones, a space between
them or a zero between them and two ones. And at the end, it will be five ones together. Another
example is this one, another example is this one. And if we look a bit like this, we realize that at
this example, we realize that we can interpret in two different ways at least. One of them is that
they perform additions. And another one is that this Turing machine performs, just removes the
isolated occurrences of zero. So, they look like different functions, but they behave the same.
So, when you describe what it does, you can describe it in different way, but the operation,
the physical process is exactly the same. And if we examine how in computer science, we decide
when a Turing machine is able to simulate another Turing machine, we see that it is something like
this. You select some of the states of the first Turing machine, say A, Turing machine A simulates
the Turing machine B. And then by the process of the Turing machine A, it will go from one state
to the other of those that you selected. Either it goes directly or it goes through intermediate
states that are not necessarily among the ones they selected, but it ends in those. And if this
connectivity between the states is identical to that of the other Turing machine, then we say
the first one simulates the second one. And the interesting thing is that there are universal
Turing machine able to simulate any other Turing machine, but there is nothing in the hardware
to tell us what kind of the number of symbols, for example, of the Turing machine or the number of
because when a Turing machine simulates a Turing machine with a different number of symbols or
with a different number of possible internal states of the head. Since it's universal, it
will behave just like that one, but it's hardware will still be made of, it will still work as
is the first Turing machine. And yet in computer science, we say that they are equivalent. I mean,
the computation done with the first Turing machine is equivalent to the computation done with the
one that it simulates. And these are examples of very small universal Turing machines,
with 15 possible internal states in the head, that reason, right? And with only two symbols,
this is like a world record. And another one is with only three internal states, but with nine
symbols. And there are more examples. Actually, it's very easy to make universal Turing machines.
This cellular automaton is another universal Turing complete, but it's not,
doesn't look like a Turing machine, it's just a cellular automaton. So you have a row where you
can have dark or light cells. So there are only two possible colors. And the rule is like this,
if there are three dark cells, no, three full cells, the one in the middle changes to empty,
and so on. These are the rules. And these are listed the rows in a temporal succession. So
you start with one with a single cell that is not empty. The other ones on the row are empty.
And by applying this rule, you obtain an X-Row and an X-Row. So you represented each row
to represent the state of the same row, but at a different time. And this is universal. And
you can choose the initial row so that you can implement any other Turing machine,
any computer program. So if you want, you can make, you can, you can simulate on this Turing
machine your operating system of your computer or whatever. But this is in principle because nobody
is doing this in practice, they just prove that it's universal. And the same with the
corner is game of life. This is also Turing complete. So you can, on the corner is game of
life, you can program any computer game, for example, but you can also program this cellular
automaton and vice versa, because those that are Turing universal, they are considered equivalent.
So it doesn't really matter. There is nothing objective there. The only objective thing is the
way they connect. And this is not, this doesn't enforce, which is zero or one, doesn't enforce
what the states represent. This is the part that we put in and it is our convention.
And now I'll give some examples that again, going back to the computers,
we have, for example, this is when you transmit the information,
you transmit information, but there is noise that and some of the bits can be damaged. So to make
sure that this doesn't happen, you use an error correction code. And this is a very simple example.
So you just take each bit and multiply it so that you have three copies, and then you send it. And
in case the noise damage is one of them, then you'll vote, basically, so the majority of the,
so in this case, two are zeros and one is one, but you trust the majority and you put it back
to zero and you recover the bit. Of course, it can happen that two or three of the bits are
damaged by the noise. But this is the reason why we use more sophisticated, but in any case,
no matter what error correction code you use, it is possible that you will get
the wrong message after the transmission. Now, these are not quite used in the computers normally,
only when you transmit the information, but in the case of quantum computing, they use
much more sophisticated correction codes because otherwise, the computer itself doesn't remember
its own state if you don't use this. And what I mean by this is that this is a very simple
example where you copy it, but the more complex error correction code that I use in practice
replace the bits with more complicated strings following more complicated rules that have no
relation apparently with the initial bit, except that you know the code that you by convention
decided to use. And this is even more so in the case of the encryption where you can choose
a way to encrypt and the key and you'll encrypt the message and it doesn't look like at all like
the original message. That's the whole idea. But the interesting thing is that now
there is encrypted computing, so you have a computer program running on a server. You send it the
input in an encrypted form and it computes it and then it computes it without decrypting it because
it doesn't have the key. So blindly, basically, is like, I don't know, you have a computer program
that you want to solve a Rubik's Cube and you send the Rubik's Cube, but you don't tell how it is and
yet still he's able to solve it without seeing it. So it looks like magic, but it's something
based on very rigorous isomorphism between mathematical structures and it actually works and it's used
more and more. And the conclusion of this part is that interpretations
are actually not only very important, but without them, you wouldn't be able to have a programmable
computer because to program the computer means to simulate on it another computation. So basically
another Turing machine and the fact that the convention is not so strong connected with the
state of the hardware, it's changed on the fly, allows us to use the same logic circuits to do
different operations. So like, for example, when you use the adder to perform subtractions or
a shift on beats and so on. Although it's designed to work like another, it's also
usable like these other things and it's used. So if we would be so stuck to the hardware to
have a convention that it is right there in the processor and in the memory of the computer,
respected all the time and is never changed, there will be only one program that will run,
there will be only one Boolean function that this computer computes. But now we can change it by
programming. So this means that programmable computers and universal computers, although this
is an abstract universal means that you can program anything with them, but obviously you'll
need more and more memory if you want, because there are programs that require more memory.
But supposedly you can access it through internet,
find some server and use that server to store the additional memory. So anyway,
this will not work without changing the convention. And I say secretly because at the end the user
doesn't see that you change it. So you change it, you do the operation and you deliver to the user
back in its own convention, in the original convention, so that the user doesn't
have to interpret using his own mind because this is why we have computers.
The user fixes the interpretation but internally is not represented.
And for example here Alice put some
letters labeled the states of the knob and the switch and of the pointer.
And she fixes the interpretation of what the alien device does. And internally it could be
implemented in any possible way. I mean it could be an or like connected
some push buttons in parallel. You wouldn't know because you use it like an and as Alice wants.
It could be any of the eight possible Boolean functions. So you can take any of the possible
eight gates and put it inside this device and simulate any of the other seven out of the eight
possible Boolean functions that you can realize with this. And there will be no difference for the user.
So if we believe that the computer has a mind like the AI or the chat
GPT has a mind, it's actually our own convention. I mean it's obvious when you look at the computer
science but I don't understand why computer scientists themselves think that it can be
conscious. But let's move forward to see why I don't think.
It's too long. The presentation is too long. I will skip a bit.
But I because I want to show that there is a way to probe experimentally how
how big is this ambiguity that is allowed by the fact that it's a convention.
I'll move forward to an experiment. So I have I chose a problem which is
so-called NP complete but it's very simple. It's the simplest one. You get, for example,
a number of coins and you want to divide with the friends so that each of you get equal value,
equal share. So this is not a good partition but this one is a good partition. And the
problem is the partition problem is that you get a list of numbers and you want to find out if you
can split them equally without throwing out any of them or cutting in half the coins or whatever.
And the program cannot solve it in a polynomial time. It requires an exponential time although
this can be optimized but never polynomial but it can verify it. So if you give the numbers
and the partition, it will verify very quickly if the partition is fair. So this is why it's
it's a good problem because it's not too simple. You can solve it hard but you can verify it
fast, verify the solution once you know it. And what I did was I made maybe now I should
share another new share. Okay so here I have a computer program that does this. So what it does
is that it has a partition and it has a list of numbers and it has a partition which in this case
means that all the numbers are in one of the parts of the partition and no number in the
other one but we can choose any partition. And anyway if I press I, I can input but if I press
A it will test all possible partitions but how it will test them? It will run the program for this
partition and then it will read the result of the as if it tested the other partitions without
calculating, without running the algorithm to test each one of them. So there are two in this case
to the power of six possible ways to to split six numbers into two. Sorry, I'm only seeing the
code itself if you've got some sort of output it's not being shown. Oh no, all right, sorry, yeah.
So this is another screen which is runs when you run the, sorry, is it okay. So
it's basically the program when you run it and what it does is it verifies for a single partition.
So you call the program just to verify not to go through all the partitions just to verify
one of them and you have to tell it I put these numbers in the left and these numbers in the
right. In this case I put all the numbers in the left and no number in the right and yet
the program can decrypt from by changing the conventions of the bits can decrypt what would
have been the result if you would have passed a different way to a different partition to verify
and it does this just by using the fact that there is of this fundamental notion of simulation
in in computer science. So what it does it changes the conventions of the bits
without running again the partition it says yeah I know that I sent you 000 000 and I get
this result but I change the convention without running you again and then I read the result
according to the new convention and I collect all these results and compare them with what would
have happened if I would run the program for that partition and what the program shows and the reason
I make it open so that everybody can verify is that it does it for a single case and the user
can debug can go step by step through the program and see what it does and check that indeed it does
for a single case but then somehow from that single run it know what would have happened
in the other cases by changing the convention of course this is not a trivial thing to do but
all the code is available and it can be verified not very much code but just this is just for the
verification I mean to verify that the program really works as I claim so there is a small
algorithm that just add those numbers and compares them basically that
but I did it in a way that so that I could apply
decryption and encryption to to those bits to those to the data because
you cannot decrypt it in all possible situations you have to have a program that keeps the input
in the memory until the calculation is finished you know but even so if you put 100 numbers in your
input data and then 100 bits to be zeros and ones you have to to the power 100 possible inputs
calculations but it only needs to do one now this doesn't mean that it reduces the
search for a solution to finding an actual solution this would be this would mean that
p equal and p and this is not proved yet either away or either proved or disproved
because the verification itself takes an exponential time you have to verify each
possibility but you verify it without running again the the program to compute it this is
this is what I mean so so basically it's like you have a machine that does a thing and instead
of Alice Bob and six other people believing that it does eight different things there is a
potentially unlimited number of people who believe it does different things and everybody
can look at the machine and find the result for for their own Boolean function that they
attribute it to the machine and they will all work at the same time so it's not it's nothing
magic here it appears surprising because we tend to believe that there is a unique computation
that the computer does when it works like for example from this moment to
five minutes later what it did is a unique physical process but if you look at the
unique physical process in different ways you can read the more possible computations that's all
and I need of course a way to encrypt and decrypt and the problem with this is that
for a simple program I can write something like this to encrypt and to decrypt
to the interpret basically the data in a way that I read a different computation than
then initially but for an AI this would be impossible not because because I'm not smart
enough and I don't have computational power enough to encrypt and decrypt the complex processes
that you have to run when you run an AI on the hardware so but what I show is that it is possible
in principle and in practice for simple cases so it's it's it would be easier to break all the
encrypted communications than to decrypt but what do I mean to decrypt an AI
so the mic let me formulate the questions and connect with what I did so with what I explain
so far I'll return to the slides can you see the slides yep okay so what I what where I where I am
going with all this discussion because okay people can agree okay there is a lot of conventions
involved but always stick with the convention the point is that suppose that the computer will
become sentient according to whose convention because if we can make an exponentially large
number of possible conventions depending on how much memory the computer has there will be
many conventions and it he doesn't know our convention because the convention is in our
mind so the physical process is the same the what I do when I press the keyboard for example is the
same but I read I interpret differently the convention and the computer doesn't know what's in
my mind so let me let me show using so this experiment can be verified
let me let me show where where can it can be downloaded in case everybody somebody
wants to verify it so sorry this this page on github and this is the the file it it's in
c++ and people can go step by step and can verify that what I said is so and also in this paper
which is at this link and has this title it can be downloaded it has a description of the
of the algorithm so I was met a matrix multiplication to to to do this thing that
that's for the reason I explained earlier because if you work in a particular reference frame
you may believe that this is an objective thing but if you change the reference frame you can read
a different a different story from from this so basically I had a geometric
way to to approach the problem and the the implementation is
is at this page when github the code now I return to the slides to say how can you use
this to produce more ai's in parallel first I I want to explain in in a different way what
happens if I run so you see the slides now right okay so this is a server and I run the
that program that I showed earlier on the server and somebody sends so these guys around are connected
and are the clients that use the program that is on the server and they send a partition as
number of zeros and ones and the the numbers are all the same they send a list of numbers in
the partition and the server computes them but they don't tell the partition that they have in
mind they flip the bits to to encrypt it so they send it to the server the program on the server
computes it and it gives the result and then they look at the result and decrypt it and find the
result for for their partition and if it happens that everybody sends the same data it to optimize
it will say okay everybody send the same data I will run only once because it's only one data
but each of them can encrypt in that data a different partition so for example they can
in this case there are eight it would be like three bits to represent the partition to be like
they have three numbers and the three numbers can be partitioning two in eight possible ways
these three bits will represent this but in the program that I shown you can change the number
I start with six but you can change the number but potentially it can be so that everybody on the
planet sends at the same time the same partition to the server it computes the only ones but each
one of them have different partitions that we started with before we encrypted them but we
can encrypt and get the same result by using different encryption keys and then we can decrypt
the same result because we all receive the same result but it is encrypted but each one of us
apply different key because we encrypted them with different keys and you will get all possible
partitions at once computed by running only once the program on the server by everybody
by all clients so
oh here I described the steps
did I go too fast or did I have questions because I don't want to skip over the details and
no no it's all good unfortunately I'm gonna have to run in about nine minutes I've got another
meeting I have to be on okay but yeah please go ahead all right so I'll move forward now if you
have here an AI on the server and the I said I will do the calculations by my own hand I will not
run this program because the I and the program live on the same server but the I said I will do it
myself because I am an AI and I'm smart and it will do the program and suppose that at the end it
doesn't send back the result of the calculation it sends all the data that also contains the state of
the AI by the same idea to decrypt I can decrypt the full string but it would be a very huge key
a very complicated encryption and decryption but
this is a thought experiment so suppose I am like a very smart guy who can do this decryption
are everybody of the clients are such smart brilliant gods basically to decrypt such
a big complex data they will see different AIs and the I will have different experiences because
it will take the steps on the computation and it gets different numbers so for example the I suppose
has some reactions to the numbers like people like when I meet seven I say it's luck so seven
dwarfs or 12 it's like 12 months and so on that you have some additional thoughts that are triggered
by by those numbers and then the I can go in the direction of the thought and dream like they
dreaming like we do all the time when when and we start from from an apparently random thought
then the I will become the possibilities to interpret what the I experienced diverges
because you just because I changed those numbers and it can have different experiences for for
example it reminds the anyway I will not be able to finish if I give all these details so let me
go back to what I said I will do first establish that the computation is a convention that there
are many possible ways to obtain a computation that it's depend on the user is relative to the
user and if they I would be would be sentient the same hardware will run many different this
this was what I was trying to establish at this point and the rest is not necessarily related to
to poly computing because the rest is I am using this ambiguity to make a probabilistic argument
that we are not reducible I mean our consciousness is not reducible to a computation so I would say
I would stop and here's some comments from you and see what where we go great well thank you very
much a couple of things so yes as you saw from our poly computing paper I'm completely in agreement
with you on the the conventions and the observer relativity and all of that my main comment is
and and I'm not you know trying to define properly sentience consciousness all of that is
is a difficult thing and that requires you know much more time but I will say just one thing
which is that everything that you've just now said applies to the biology in other words biology
does exactly the same thing there are all of the parts of an organism are constantly trying to
reinterpret everything that everything else is doing and it is completely free to interpret
those signals in in new ways and that kind of observer relativity is something that biology
uses extensively and you know this idea of multiple minds on the human brain I mean the
reality is and I'm not just interested in human brains I'm interested in you know all kinds of
biological things but the reality is that if if you take some sodium pentothal and you put it into
your carotid artery and you put the sleep the left hemisphere for about 20 minutes the right
hemisphere usually doesn't talk but it can can write and what if you ask it questions about
what does it believe and how does it feel about your job and your various things you will get
answers that are often completely different from what the verbal hemisphere reports and that's not
in and so there's that there are issues of dissociative identity kind of scenarios I mean
this this idea that we are running just one mind is is tough it's tough to support the borders of a
mind or you know right now you and I our left hemispheres are having this this conversation but
there are many other modules in there yeah right that action and so and so re-interpreting everything
re-interpreting memories re-interpreting signals is something that biology does all the time so I
think this is a very valuable way to look at things but I don't think it distinguishes
biologicals from devices that are that are made in other media I think this is something very
fundamental to any kind of cognitive system no matter what it's made of it's going to have the
same the same property but that's but that's my opinion yeah all right how many minutes do you
still I have about two minutes and and I will send you I just it's funny I just wrote something
fairly lengthy on exactly that topic so I will I will send it to you and maybe we can we can have
we can have another another discussion about it all right great thank you very much I don't know
because if I start something else I'm afraid I will speak more way more than two minutes and
we'll we'll exchange emails and maybe chat another time to if we if we need
absolutely and I agree with with you and to some extent so I think that indeed biology
but I am not a biologist but I'm happy that but that biology needs to interpret in different ways
uh so basically to use the environment as a computer in different ways and its own parts
yeah in some sense because uh if I understand it's between one hemisphere and the other but
I I believe that in the hemisphere you have different clusters of neurons that would disagree
about what what happened to you and if they given the chance to to speak they will say different
things and if they are not given the chance they they will force you to to commit this
the Freudian sleep or something just to to express themselves and uh I I am totally in
agreement with this part and especially that you need these resources for survival and for
evolution even at the cellular level you need to be very flexible in what you
attribute to in how you interpret the environment
yeah the environment and the contents of your own memory so so your own memory is is is constantly
being interpreted and reinterpreted and there are some remarkable examples yeah
