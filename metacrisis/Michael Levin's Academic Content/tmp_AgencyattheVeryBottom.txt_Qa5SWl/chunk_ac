arbitrary choice of input.
And what P1 is going to do
is it's going to preserve the A unit in A.
So our A unit here is A1.
So we map to A1 and A,
and then P2 similarly preserves the B unit
mapping us to B2 and B.
So just to get a picture of why this is in fact useful,
this tells us what we're using the Cartesian product for.
Anytime you've done some graphing,
you've been using the Cartesian product,
whether you realize it or not.
So this is our A on our X axis, B on our Y axis,
and here's the ordered pair A1 comma B2.
Well, our projection functions allow us to remember
that this product, it's A1 units along this axis
and B2 units along this axis.
If you were to try to understand this ordered pair
without these projection functions,
it wouldn't mean anything.
It's these projection functions
that take this ordered pair, this point, this dot,
and actually turn it into something meaningful
by relating it back to B and A.
In particular, what you could say is it remembers A and B.
So we've got this ordered pair.
We're like, wait, what am I doing with this?
Oh yeah, I've got A and I've got B.
I've got this A1 unit and this B2 unit.
That's what's going on.
So what's interesting about this perspective on products
is that it lets us ask a question
that we couldn't have asked before
when we were just looking inside things.
There's a new question, which is if that a product of sets
is just a set combined with functions to A and B,
doesn't any set qualify?
Because as long as A and B are non-empty,
then any set is gonna have functions to them.
So let's say PC, that's like a candidate for the product,
a product candidate, it's just some arbitrary set.
We don't know.
Well, it doesn't have a function F to A
and a function G to B.
The answer is kind of, yeah, it does.
But what we're going to see
is that it's not necessarily optimal.
A times B is going to end up being optimal.
This other candidate may not be optimal.
And we're gonna express that with a universal property.
So let's look at a specific candidate for the product,
a product of three sets, A times B times C,
which is gonna have elements of the form A comma B comma C.
So this is an ordered triple now instead of an ordered pair
where A comes from A, B comes from B,
and then C comes from C now.
So we have these functions,
let's just call them F and G to A and B just like before.
And it's gonna do what we're gonna expect.
So we're gonna take an input,
let's say A1 comma B2 comma C1.
What F is going to do is it's going to preserve the A unit
just like before A1 and A.
And what G is gonna do is preserve the B unit,
B2 and B just like before.
And then the C stuff ends up being irrelevant.
So you can see that we are doing the same job
we did before of projecting to A and projecting to B
and remembering those sets.
So we want to now, intuitively,
we understand A times B times C is inefficient
compared to A times B
because it clearly has something extra.
But how do we actually show that it is?
What we're going to do is compare A times B times C
to A times B.
This comparison is going to end up being
our universal property and it's going to show us
that A times B times C is inefficient.
So the way we compare sets is with a function
because that's how you relate sets to each other
is with functions.
We're gonna call that function H.
And to understand what's going on,
we're gonna follow this diagram very carefully.
So I'm gonna move through this kind of slowly.
Bear with me.
So we've got this input.
Let's just say it's A1 comma B2 comma C1.
We're gonna define H to preserve the A unit and B units.
We're gonna map from our order triple
and A times B times C to an ordered pair
and A times B, we're gonna keep the same A unit A1,
keep the same B unit B2,
then we'll just delete the C unit because it's extraneous.
So we've gone down from H to here
and now we could go either left or right.
Let's go left.
So P1 is gonna take us to A1 and A from this ordered pair.
Now, what's interesting is that F does the same thing.
So H then P1 starts over here and ends up over here.
F does the same thing.
It starts over here and ends over here.
Well, two functions, if they start in the same place
and end in the same place, they're equal.
So F is equal to H followed by P1.
And similarly, G is equal to H followed by P2.
So what this tells us in a very precise way
is that if we take A times B times C
and we lock off the extraneous part,
we end up doing the same work.
So we can take A times B times C, cut off a piece of it
and still do the same job as before.
That tells us that A times B times C
had something extraneous and was therefore inefficient.
And what's particularly noteworthy
is this is the only way we can compare them
to have them do the same job.
H is forced by how we are using A times B
and A times B times C.
We're using them to reconstruct A and reconstruct B.
And it turns out that if we want to use A times B times C
to reconstruct A and B in the same way as A times B,
we are forced to effectively turn it
into A times B to do the job.
So there's sort of top-down design here.
I say, I've got this job, reconstruct A, reconstruct B.
I have to turn things into A times B
and there's a forced way to do so
given my alternative candidate.
I started here, this isn't perfect.
I end up here, this is perfect.
What makes this a universal property
is that this same relationship that A times B has
with A times B times C, this unique factorization
where A times B times C gets turned into A times B
to do the job, it has with every other candidate
for the product.
So I've given them stupid names like Bibbidi-boob,
Bibbidi-bib, it doesn't matter what they're called,
just every other set that could do the job.
This is infinite going upward
because there's an infinite number of candidates.
Each of them comes with their projections to A,
each of them comes with their projections to B,
but each of them gets mapped uniquely to A times B
where it ends up saying, okay, yeah,
A times B is actually better than me at this job.
It's the same relationship for each one,
a unique way of saying you want to be me
to do this job properly.
So effectively, all of these other candidates
are sort of cheating off A times B's homework,
A times B is in fact optimal via this universal property.
Something I just think is interesting
as someone with an economics background
is this actually feels very similar to a preference order,
which is obviously a very agentic concept.
So from an active inference perspective,
if I want to have like a favorite ice cream flavor,
what I'm using that to do is to reconstruct
my anticipated flavor and anticipated texture experience.
My favorite flavor of ice cream
is going to be the one that's best
at reproducing my anticipations.
The unique factoring could be like selling
the strawberry ice cream and using the proceeds
to buy chocolate ice cream.
So universal properties,
it looks very much like having a favorite way
of doing something, which is clearly an agentic concept.
So here are the principles of universal property.
So universal properties are the most efficient solution
to a problem that specifically exists in math.
So we're not using this to solve a physical problem
or a human problem.
We're using it to solve a mathematical problem
that you can define in purely mathematical terms.
And yet despite the fact that it's just math,
you have an efficient,
we have a favorite way of doing things.
We also have a way of defining top-down
goal-driven control.
If I say, I've got some other thing here
and I want to make it the best way of doing things,
I don't need to look inside of it.
I just need to define this unique mapping to A times B.
And similarly, we can test optimality.
So we don't just have to like assume or guess optimality,
we can test it by looking at these kinds of mappings
and asking, does it factor through A times B, yes or no?
That's going to tell us about optimality.
And now that we have this picture
of the universal property of the Cartesian product,
we're going to see a couple of very cool agentic things
that you can only do with this definition
and not with the internal view of Cartesian product.
So the first thing we can do
is we can find unexpected competencies
that we could only discover by probing objects.
