is we're going to choose a generating set
which we're going to choose to be just the number one.
Now by definition of a monoid
I have to be able to combine one with itself
to create something
because a monoid says I combine numbers
to create other numbers.
I'm going to use the plus symbol to denote the operation
because it will in fact turn out to be addition
but we don't know that yet
so this is just an arbitrary choice of notation right now.
So I have to write down by definition
I'm not thinking I'm being lazy
but just I'm nevertheless compelled to write down
one plus one equals something.
Well I'm going to be as lazy as I can.
I don't want to turn on my brain.
So I'm going to write one plus one equals random squiggle
and then because random squiggles in the set
I have to write down one plus random squiggle
that's going to equal some other random squiggle
because I am being lazy.
I don't want to think at all.
I'm just moving my hand around randomly totally brain dead.
Well the result of this
is I'm going to create some set called M for monoid
which is going to look like zero one random thing
which is one bigger than one random thing
which is one bigger than this
squiggle that's one bigger than this
squiggle that's one bigger than this
going out infinitely
because I'm never going to write two random squiggles
the same way the odds of that is zero.
So I'm going to generate an infinite amount
of random squiggles that are all one bigger than the previous.
Well if we compare that to our set of natural numbers
it's clearly the same
because I got zero one two three four five
it's the same set.
So it could have happened by random chance
that when I'm writing these random squiggles
maybe I wrote two by accident
I wrote three by sheer chance, et cetera.
So I could have generated the natural numbers
if I just got in luckier with my choice of squiggles.
Well who cares what the squiggles are
so you can in fact say that this monoid
is the natural numbers
and so that's what we've done
we've actually generated the natural numbers
under addition by being as lazy as possible.
So this is our free monoid
the natural numbers under addition
we generate it by starting with one
doing one plus one plus one plus one
totally brand dead takes no thought.
Let's contrast this with an expensive monoid
and you'll see how lazy the free monoid is.
So we'll take our generating set to be one again
and we'll do some familiar relationships
so we'll have zero plus one is one
one plus one is two, two plus one is three
but now we're gonna establish a non-trivial relationship
we're gonna turn our brain on
and actually think about something
and make a deliberate choice
we're gonna say three plus one is zero.
Now that might seem weird
but this is totally legitimate
because all we have to do with a monoid
is combine numbers to create other numbers.
Well three plus one if I combine them to create zero
I've satisfied the rules of a monoid.
So it looks weird but it's actually totally legitimate.
So now what else do we get?
Well three plus two is three plus one plus one
three plus one is zero
so three plus two ends up being one
then like three plus three is two
and two plus two is zero, et cetera.
So all these relationships just follow
from our choice up here.
And what we're doing is we're counting
but we're counting in a loop instead of a line.
So with the regular natural numbers
you just go one, two, three, four, five, et cetera
extending outward with our expensive monoid
we go in a loop zero, one, two, three
is zero, one, two, three, zero, one, two, three, et cetera.
Now this might look weird
but it's actually familiar
because this is how we count on a clock.
So if I tell you like nine o'clock
plus five o'clock equals two o'clock
that makes sense to you
and something like three plus two equals one
can make sense as well.
Now we're using zero instead of 12 here.
So imagine a clock that goes zero, one, two, three,
zero, one, two, three
that's what we're doing with our expensive monoid.
So it looks weird
but you all know how to count this way
it's just counting with the clock.
So now what we want to do is do what we did before
with our universal property of the product
and compare our free monoid to our expensive monoid.
So we built one in a lazy way
we built one with a bit more effort
we want to show that the lazy way of doing things
is the optimal way of doing things.
We're going to do so with a function just like before
but this needs to be a function
with a little more structure
it needs to preserve the structure
needs to preserve the use of the one monoid
in the other monoid.
What we're doing with both of these monoids
is we are counting by one
that's what we saw we're generating
by just adding one to itself over and over.
So the function is gonna preserve the counting structure
as long as each counts by one in the same way.
And so the way this is gonna work
is that if we map a number in the free monoid
to a number in the expensive monoid
the next number in the free monoid
gets mapped to the next number in the expensive monoid.
So it's just gonna match up with each other
counting by one.
So here is a diagram that shows this.
So here's our comparison, our function.
So we've got all of our natural numbers over here
zero, one, two, three, et cetera.
And then we're going to have our expensive natural numbers
which is just going to be zero, one, two, three repeating.
What is our function?
What's our mapping going to look like?
Well, the first few are obvious, zero maps to zero,
one maps to one, two maps to two, three maps to three.
What is four mapped to?
Well, we don't have four over here.
So we can't just map it to four.
So what are we gonna do?
Well, four is one more than three.
We've mapped three to three.
So we should map four to one more than three over here
which is zero.
So that's what we're gonna do.
So four maps to zero, then five is one more than four,
one is one more than zero.
So five gets mapped to one because four gets mapped to zero.
And so it just continues outward like this.
So this is our comparison.
This is our choice of function.
And we're gonna see a really interesting picture
that's gonna show us the laziness and the optimality
of one monoid versus the other.
So here is that picture.
So here is our expensive monoid.
The way a monoid is sort of formally defined
is you have a dummy object
which I've denoted with this gray circle here.
It doesn't really mean anything.
It's just there because it has to be there.
And then the numbers are going to be relationships
that extend outward from the dummy objects.
We're gonna have zero, one, two, three
all extending outward.
So we're gonna start with zero.
That's just there by default.
So then we have one, that's green here by this legend.
One plus one is two, two plus one is three.
So the image I want you to have in your mind
is like ripples extending outward
from a stone dropped in water.
We dropped this dummy object in the water
and our numbers are ripples that extend outward from it.
Now what happens is a bit unnatural
with this rippling motion
is it actually collapses back to zero again.
So it's like we've done some extra work with our water setup.
We have some special technology
that pulls everything back to zero
and then it ripples outward again.
So it's rippling but in a somewhat unnatural way.
It's not how we would expect physics to work.
Let's compare this to our free monoid
where we're going to have things rippling outward again
from the dummy object.
This time what our legends are going to show
is the colors are mapping to these colors over here.
So red maps to this, green maps to this,
blue to this, purple to this.
So we start with zero again.
Zero plus one is one, one plus one is two,
two plus one is three.
Now we don't collapse, we go forward.
So four, three plus one is four, four is red
