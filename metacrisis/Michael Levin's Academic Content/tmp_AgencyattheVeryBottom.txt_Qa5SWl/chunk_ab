So again, this is a trade-off.
So we have trade-offs, and therefore we must have scarcity,
but again, there's no finite physical resource.
We don't have a finite amount of numbers.
Numbers, we don't even have a finite amount of fields.
So what's going on?
To understand agency and mathematics,
we need to solve this problem
because I'm arguing that scarcity is necessary for agency.
So we need to understand what scarcity is in mathematics.
So here's what we have so far.
Economics tells us scarcity is about finite resources.
Math isn't finite, and yet it has scarcity
because it has trade-offs.
So where does scarcity come from?
There's a touch.
Sorry, go ahead.
No, okay.
So to solve this little riddle,
what we're going to do is we're going to look
at a situation in math where math does not make trade-offs.
We're gonna see the difference.
What's going on when math doesn't make trade-offs
versus when math does make trade-offs,
and that's gonna tell us what scarcity is.
And then that'll let us make the case for math being agentic
because we'll see that math has scarcity
and therefore meets the necessary conditions for agency.
So here is the situation in math
where you don't make trade-offs,
and that situation is contradiction.
So there's a famous logical principle
called the principle of explosion,
which says that if we contradict ourselves,
we can derive anything.
So if we assume P and not P, where P is any proposition,
so I'm saying P is true and not true,
hence contradicting myself,
then Q follows where Q is anything.
So if I say, if I am Benjamin and I am not Benjamin,
hence contradicting myself,
I can derive that John F. Kennedy is alive
and living on the moon with his best friend Santa Claus.
That follows from the contradiction.
So in particular, contradiction lets us avoid trade-offs.
We could have an odd number that we divide by two
and get a whole number,
or we could totally order the complex numbers.
We can do anything because we don't have to worry
if it makes sense because we can just contradict ourselves.
So scarcity is what's necessary for trade-offs,
but when we contradict ourselves,
we can avoid making trade-offs.
So it makes sense to associate a lack of scarcity
with contradiction.
That is in fact what I'm going to argue
is that we have scarcity when and only when
we do not contradict ourselves,
which is to say when we are being logically consistent.
So scarcity in math relates to logical consistency in math.
And that might seem weird,
but I think when you look at this picture,
it becomes quite clear
because what happens when you commit yourself
to logical consistency,
when you say I am not going to contradict myself,
you commit yourself to making choices.
You say I have to pick.
Do I want to assume P or do I want to assume not P?
Both assumptions are fine.
You can start deriving theorems in one direction,
then you can go back and make the other assumption
and derive theorems in the other direction,
but you just can't do both simultaneously.
You have to pick one.
So scarcity, this or that, logical consistency,
P or not P, to me they feel like the same concept.
So what I'm saying here is that agency requires choice,
requires trade-offs, requires scarcity.
Math has scarcity because it has logical consistency.
That's what I'm associating with scarcity.
So as long as we're being consistent,
we're going to have scarcity
and therefore meet the necessary conditions
for being agentic.
So now what we're going to do
is look at some actual examples of agentic things in math,
which are universal properties and adjoint functors.
So we've set the table for math maybe being agentic
because it meets the necessary conditions.
Now we're going to see, does it actually do agentic things?
Now I'm going to argue that it does.
So starting with universal properties,
we have, this is an important concept in math
that relates to a few agentic ideas.
First of all, optimization,
which is obviously very important for agency.
We're also going to see how it relates
to a concept of top-down goal-driven design or control
that you can do in math with universal properties.
We'll also see how universal properties constitute
a solution type that we can remap
onto new mathematical body types.
So just like we can think of an organism
as being optimal for its environment,
we'll see how we can talk about a mathematical structure
as being optimal for its environment
via a universal property.
So what is a universal property?
A universal property is a way of defining
a mathematical object by how we use it
rather than what it's made of.
So instead of looking inside of it
to see all the parts and pieces,
we're just going to ask,
what are we doing with this thing
and how well does it do the job?
We're going to consider a collection
of all mathematical objects that do the same job.
And we're going to ask,
what's the best at doing that job?
The universal property is going to be a special relationship
that the optimal mathematical object
has with all other objects that says,
I am better than you.
So it's universal because it's talking
to every other thing in the environment
and it's saying the same message to each one,
a universal message for every object
that says, I'm better than you at this.
So, you know, back off and let me do my thing.
So here's a very simple example of a universal property.
We actually have two of them in this picture.
So we have an ordered set.
This is the minimal element.
This is the maximum element.
So if we consider the job here,
we could ask,
we want a thing that's bigger or equal to everything else.
And if we consider this top element here,
it's the best at doing that job
because it's bigger than this thing.
It's bigger than this thing.
And then it's equal to itself.
So it sends the same message
to every other object in this environment
that says, yes, I am bigger than or equal to you.
So that's the universal property.
It's the same singular relationship
with everything else, including itself.
And then the bottom element similarly,
it is optimal to task of being smaller than everything else.
And it sends the same message,
I'm smaller than you, I'm smaller than you.
And then I'm less than or equal to myself.
The same message for everything.
That's a simple example of a universal property.
Now let's look at a more interesting example
of a universal property, which is the Cartesian product.
We're going to see that we can define the Cartesian product
in terms of what it does instead of what's inside of it.
We'll see how we can compare the Cartesian product
to other objects that do the same job as it.
And we'll see that that allows it
to satisfy the universal property.
And then we'll see how this leads
to some interesting agentic things
that you can end up doing
with this use-based definition of the Cartesian product.
So let's start with the internal view
of the Cartesian products.
This is the standard way to define the Cartesian product
that every math student is going to learn.
We have two sets, A and B.
The Cartesian product is the set written A times B.
Of all ordered pairs, let's form A comma B,
where A comes from big A and B comes from the set B.
So a very simple example,
let's say A is a two-element set, A1 comma A2,
and B is the two-element set, B1 comma B2.
Then A times B is just every way
of pairing an element of A with an element of B.
So we have A1 paired with B1, A1 paired with B2,
A2 paired with B1, A2 paired with B2.
So this is like very basic like intro like proofs
for like any undergraduate math students
is going to learn this definition.
But we have another way of defining the product,
which is based on how we're using it
instead of what's inside of it.
So this is an object denoted A times B
along with projection functions P1 and P2
that map to A and map to B respectively.
So these functions are part of the definition
because we're considering it in terms of how we use it.
And what we do with sets is we make functions.
So our use is based on functions.
To see what these functions do, a very simple example
is it takes our ordered pair A1 comma B2
as just an arbitrary, excuse me,
