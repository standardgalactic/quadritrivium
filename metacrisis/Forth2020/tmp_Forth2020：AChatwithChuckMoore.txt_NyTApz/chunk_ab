And he sent it to me, but I missed the message or something.
Well, a few years later, I guess it was 2017 or so.
Carl Clanch, who is a fellow IBM 1130 enthusiast,
sent me a message that he had spoken with Chuck.
And Chuck had said, I think I send it to the sky Flanders and
he'd since gotten rid of the papers and so I rummaged around
in my Gmail and I found it.
And it turns out it's either a free version one or pretty close to
version one copy of the code and the basic kernel,
the, you know, the assemble level words and then the additional words on
it, but, and I've had a tiny amount of contribution to helping Carl
get it working on the IBM 1130 emulator.
And Carl actually has a working IBM 1130.
And he's, he's gotten it working.
One critical word that we probably would all be completely lost without
had it not had that wasn't there in this version, which was period.
So he couldn't print out the top of the stack.
I think that the top of the stack may have only been shown in the
indicator on the, on the 1130 for the, for the accumulator.
And it was a very interesting, a very interesting bit of work to, to
put it together and get it running.
There were, there were some typos or some not typos, but some, some hand
written notes on the code and notice some things that needed to be
adjusted a little bit, maybe also we made typos, putting it in.
And there is, there's actually floating about out there a version one
fourth of the IBM 1130.
The way I became interested in fourth personally was I was hired by
MCI telecommunications.
Like 1986 or thereabouts.
And I had no fourth experience, but a friend recommended me.
And I came in and the guy said, well, listen, let's, let's give you a
try.
First thing I want you to do is write a word that shows a timestamp.
So I fumbled around and wrote a timestamp.
Then the next thing he said is I want you to implement drivers for a
multi port serial card.
And I wrote that and then he said, okay, you got the job.
And I ended up working for eight years.
And I ended up using LMI fourth under some DOS extender.
To implement a system that ran on.
At the end, I think it was nearly a thousand.
What we're called site controllers.
And they are put in their co located at the various MCI facilities and
talk to digital cross connects and extended.
Extender sup frame monitoring units.
And it would send all the information back to a central computer,
which would then use its interface support to do things like,
you know, a customer call up, say, Hey, I need a,
a circuit from Washington DC to Los Angeles.
And they would go into the digital cross connects hook up the,
hook up the T one, get it all running.
And then, you know, go out and get it delivered to the customer.
And then when they're working with their endpoints down to whatever
provision is necessary,
and it was very cool and interesting system. I haven't done much with
fourth sense.
But I'm always like, I'm always looking backwards, like, oh,
I want to do this.
I want to work on like, I'm writing 1130.
Emulator and things like that. So it's always an interest me too.
To do things with older current,
not necessarily New Yorker.
But I program and C-Shark and do a lot of sequel stuff.
Anyway, pleasure to meet you, sir.
Thank you so much.
Forth is brilliant.
It was brilliant.
It is brilliant, and shall continue to be better.
Take care.
Well, I can add a little bit to the 1130 story.
It isn't as if I was sitting in an office working with the 1130.
The 1130 was on the abandoned production floor of a textile mill.
It was a huge room about 200 feet long and 100 feet wide.
And the exact center of it was this 1130, which had been delivered by IBM.
And nobody knew what to do with it, except me.
And so that was the environment in which Forth was invented.
It was challenging in many ways.
Yeah.
It was the 1130.
If there hadn't been 1130 in my high school, this was about 1972,
and I started using one.
And at that time, I had no understanding of what I was doing.
Then, for the 1130, I probably would never have gotten into computing.
But that started my career.
The first minute computer.
Yeah. Yeah.
I call it my first personal computer.
Hi, Chuck.
Hey.
We've met a couple of times and many of us here will remember the August 1980 edition
of Bytes, where you introduced the language to a much wider audience.
But that was the time that you felt that the software had been done and you are now looking
towards the hardware.
Could you tell us a bit about how you made that transition from software to hardware
and you moved towards the Novics period of Forth history?
Yes, I did feel the software had been perfected in the context of Forth.
What I was doing at the time was putting Forth on many different computers and interfacing
it with many different devices.
And this, of course, is very easy to do.
That's why Forth exists.
But the interfacing with many different devices got very frustrating because these devices
were badly designed.
The interface I had to go through was bizarre, baroque.
And I got kind of tired of doing that.
And I said, well, I could design a better interface.
I could design a better computer.
Now, people didn't do that at the time.
This was the business of someone else.
So it took really a leap of faith to abandon software for hardware.
And I actually didn't because I had to develop the software to design the hardware.
But thereafter, my software efforts went in the hardware direction and simulators and
layout tools.
And it was very rewarding.
My hardware worked.
And it worked much better than anyone expected or even would admit.
And I'm still doing that in the sense of the Greeneray's multi-processor chips.
They are incredibly simple, incredibly effective, and totally unpopular.
So fourth hardware is just as unacceptable as fourth software.
Yep, and that's absolutely fine.
Some people like fourth, like everybody here, I would imagine.
Other people don't understand.
Hi, it's Howard Oakford here.
We've met a couple of times, too.
I'd just like to say thank you.
You've made my career in programming much more fun than it would ever have been otherwise.
May your fathom flowers bloom.
Thank you.
G'day Chuck.
I met you once back in 1988, back in the year when I was struggling symposium here.
But I've been using fourth since the early 80s.
I started the big project with that, and I've been using it ever since.
And yes, a lot of people won't admit that it works so well.
That's true, it was a hardware and software.
And it also makes the hardware a lot simpler.
We don't have to use any complicated hardware.
And that was my original fourth board I did up with the Rockwell chips, et cetera.
And then I ended up into a module, a little credit card size module.
But this is the mid-80s, and that was OK for the mid-80s.
And now I use the P2 multi-core processor with 64 smart pins, et cetera.
And so I do a lot of better control.
But this is a question I really wanted to ask you.
You just mentioned the greener rates.
It's got all these processes on there.
I've got the propeller, parallax propeller processor.
We've got eight cogs, well, eight cores.
It has hub RAM, so it shares everything.
And every one of those cores can access all the IO equally.
But when I look at the greener rates, I can't figure out how I can use it.
You're saying it's an effective processor.
What has it proved to be effective in, you know, really?
How can I use it for general embedded control and smart stuff?
That's a good question.
It has 144 computers.
They aren't exactly cores.
They're independent computers.
They communicate with one another.
And the ones around the edge communicate with pins.
So if you want to control a pin, you have to use the computer, which is attached to it.
And that computer pretty much can't do anything except run that pin
and communicate with its neighbors.
So you end up building a little network of computers, not 144,
but maybe half a dozen that all cooperate and communicate in running the protocol on that pin.
It's a fun thing to do.
It's totally different than any other computer where you would just run a serial processor.
Your whole attention is in coordinating the efforts of as many independent computers as you want.
I don't think I've done an application with more than about a few dozen computers.
So Chuck, so in talking about applications, if you had to showcase an application,
say, look how well it does this.
And I'm bearing in mind too that what you said already,
there's a bit of work setting it all up for those cores to communicate with one another.
Or, you know, those little secret years to communicate with one another.
I'm familiar with the whole architecture.
But what would you say?
Which, you know, you could hold up an application and say, man, you know, this does it so well.
Well, one obvious applications through and forth to.
You can use some of the some of the computers to drive a display.
You can use some of the computers to read a keyboard.
And you can put them together to run forth.
I haven't done that.
I've never got around to doing that, although I got close.
We've got each computer has 64 words of RAM.
And one of the computers interfaces with a flash memory.
So there's infinite, infinite amounts of data available.
Another set of three computers can communicate with DRAM.
So what you want to do is set up a system whereby.
You read code from flash, you store it in DRAM.
And you read it back from DRAM and do whatever you want to do.
So so with with, you know, so, you know, I'm wondering why you haven't got a PC with it yet.
Come on, you know, you can do it.
But the thing is, OK, so I use chips, you know.
So that one's got 512 K of RAM and plus all the 4K RAM on each CPU, et cetera.
And so it's really easy to make it work.
And if and I talk to an IO and I can even instruct the IO to do something by itself.
It's a smart IO.
It has everything built into it.
I, you know, I keep racking my brains looking at the green arrays.
And I can't think, you know, like, even if I could get it to do something,
it'll be a lot of work.
You know, it'll be fun, but it'll be a lot of work to do it.
And you mentioned memory displays, for instance, said, well,
