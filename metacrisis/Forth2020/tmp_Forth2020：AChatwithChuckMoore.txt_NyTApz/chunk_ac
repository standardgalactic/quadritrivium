there are a lot of more effective ways of doing displays.
But I can do a VGA or even a HD display from the RAM on this one.
But I have to add bolt on all that RAM onto the green arrays.
You know, I'd really love to see a green arrays one that was had less CPUs
had a bit more memory on each one and more access to the IO.
And it was like, that would be really great.
You know, 64 CPUs.
Forget about 144.
Give me 64.
And, you know, as you said, you don't need to use many.
We'd love to do that.
We've had plans for doing that, but we've never been able to make such a chip.
Right.
And we'd have to integrate someone else's memory onto our chip, and that isn't easy to do.
Yeah.
Well, yeah, I appreciate it.
I just wanted to ask you that question because it's like it's the one thing that bugs me.
It's like these fourth chips are going right from the early days.
I know VIX and all that.
And they're all really great.
And then, you know, like I've got 21, I've got the Shabooms and everything like that.
But I can't figure out how to use a green array.
So I'd really love to see some application or even forget about application notes,
but just by showcase, something to showcase that particular chip power was used really well.
Well, the biggest advantage of the 144 is it doesn't use any energy.
So if you have to put a lot of energy in to make it work, that's the trouble.
Yeah.
Yeah.
Right.
Thanks, Chuck.
Yeah.
No, I appreciate it.
It's all very much all your work.
We love fourth.
The other question, I just wanted to ask, nothing to do with technical things,
but we often talk about how is it that we can really promote fourth?
You know, it's just that mindset.
You know, you've had way more experience with encountering the opposition
and with people accepting fourth.
And it's like, well, I had fourth built into the chip and silicon on this particular P2 chip.
And that was a hard task to get that done at the time.
And but fourth is a dirty word.
You know, people just don't like, companies don't like mentioning it.
Do you see anything that would help break down that barrier?
A killer app.
We've been looking for a killer app for 50 years and haven't found one.
No.
Well, absolutely.
See, you know, I think I think most of the fourth use, you know,
I've always used fourth on micros embedded.
And and so it's built into airports and roadways and all kinds of vending machines,
anything, you know.
And so they're all out there.
People just don't see it, but it keeps going 24 seven.
And it's also my my prototype language that I use.
You probably want a prototype.
This, you know, people are used to using breadboards or fourth.
You can move stuff around like that.
You can fritz all you like with fourth.
And it's very quick.
So, you know, I have a project now where they are saying, hey, you know,
do it with Arduino, you know, C and everything else like this.
And I'm thinking they can ask me, but I'm still doing it my way
because, you know, I can get it done.
But yeah, but it's just that opposition to it.
And I don't know if there's anything we often talk about it on our group.
And fourth, 2020, how we can get young people interested.
It's not going to be a killer app.
I think it's going to be the easy use, how they're using it.
Make it's how to how to make it use fourth, you know, can use fourth easily.
Straight away, they say.
I have a question for Chuck.
Chuck, was the sun force in bios or open force open?
How was the name open OS?
Open boot.
Open boot.
Open boot from San Celeros.
Yes, exactly.
Open boot.
Was this not the fourth killer app because this was installed in so many computers
and also on the one laptop per child.
I know this was a really big, a really big installation of force.
Yes, that's true.
But bios is such a obscure application that it didn't attract any any any any attention.
It was a technical trial.
The attention that open boot attracted was attempts to replace it with conventional software.
That didn't work.
Fourth didn't work to because there was not an industry behind it.
That's always been a problem.
We lack large scale support.
Yeah, Intel came along and and killed open firmware open not open boot open firmware.
And yeah, Intel was responsible for UEFI and that killed open firmware.
But fourth really doesn't need corporate support to prosper.
It's it's an individual thing rather than a collective.
As you did check with your being a raised talk on you did a discussion of that video
how you got the 144 chipset to drive the video.
I was very impressed that you don't have generic video hardware driving the video
in your demonstration.
You had the green erase chips, each programming the timing.
And that was significant of how you got the green erase chip to do video.
That wouldn't be normally required just to produce an output for people to see.
In applications which don't really need consoles.
If you manipulating data, you work the data and you produce the storage of the of the
output for the for later display for people to see.
And so the video display was just just a really fantastic ability.
That the chip array could actually program and the speed.
I think it was absolutely significant was the.
The power savings that your chipset that nobody else could do.
And it was a lot of fun to program that DGA.
And it was it wasn't easy timing was a big problem.
And it was just fun.
I would say so too.
It's quite unique that you've got this hardware and you're interfacing the green
arrays into that hardware.
So there's another incredible example of what the green erase chipset can do.
It can bang anything.
It's got it's got the speed.
And this is with a an obsolete geometry 180 nanometers.
This is this is abandoned competitive with with the
10 nanometer geometries.
You could equate that the green arrays chipset to be a risk processor.
Where everybody's going to assist type processes with multi with multi instructions.
What you can do on a risk processor like the green arrays.
It's so much quicker.
It may need a little bit of effort to do the stuff that needs to be done.
But clearly the number of instructions to do the work supersedes the performance that any
of the standard processes can work with.
And at the cost of power, which was so much cheaper on.
I've got to jump in here a little bit about programming these machines.
Chuck's machines.
I was one of the first Novix programmers.
And one of the early green arrays series of processors.
Jeff Fox and I, at the beginning, we're doing our darned this to pack as much code as we could
into those 64 words of Ram over years.
Now we found that the smaller amount of code, the smallest amount that you can put into a node.
Let's them use the least power because each node is cooperating, sending messages between them.
And when it isn't running, it isn't, it's only got leakage power going.
So look for the earlier speaker about getting into a green arrays programming mind mode.
Look at the examples that are on the green arrays website.
You'll get a lot of that.
One of the things that I did sort of is a Skunkworks program with a good friend of mine, Bill
Minch, who was also an early programmer for the, I think it was the 24 processor chip,
was to implement a virtual machine to execute E fourth.
And we put Bill's, Bill was the originator of E fourth and Ting has taken off with it in assembly
language. We did it all in high level. And we built a virtual machine using, I think it was
three or four of the nodes to execute E fourth op codes, eight bit op codes directly.
And that has facilitated actually, it's been moved and Greg Bailey's version of poly fourth,
fourth things code is now running virtually on the, on the green arrays chip.
And all of the development that's happening currently is being done in standard fourth.
You do not need to know the details, just like every other processor. So take a look at those
application write ups on the green arrays website.
For example, if I may, 10 words of code forms an ethernet Manchester decoder and receiver
converting the legally signals on the twisted pairs into bits going to the next node.
Wow.
You know, I listened to all this and I think, wow, this is the stuff you guys are doing are
credible little chunks, right? And then there's a question of how could something like fourth
be paid? How do we take forth to the next level? How do we get it to, you know, push it into the
future? I'll tell you something, you know, I watched this one guy on YouTube, his name is Jeff
Geerling, and he's trying to deal with taking a video card and getting it to run in a PCIe single
lane on some of the new Raspberry Pi compute boards. If you could do something like build
a fourth driven video card with an open interface that could be, you know, could be
added to the drivers and such could be added to that would have some kind of a standard interface
that's like, you know, we'll work with OpenGL or I don't know what the current,
the modern of the current video standards are. If you could build something like that,
that would then sit in like a PCIe one, one lane PCIe slot, you sell a billion of those because
they repeat the CM4, the Raspberry Pi CM4s, things are taking, are becoming incredibly popular,
build small like, you know, systems with a bunch of slots and stuff like that for multiple
CPUs and then having a, you know, a PCIe card or something like that sitting in there to show,
have a video. It seems like a busy building. Bob, thank you. Track is busy building a thing
called HD fourth from his last, from his last discussion. And that seems so significant what
he's working with on an HDMI interface. It'd be interesting to see further development that
he's working on, on his HD fourth. The HD fourth has evolved into what I call UHD fourth.
Even better. For the 4K display. Wow. It's running on a PC.
A x86.
It's unique characteristic is that a lot of the code is an assembler. Well,
is in machine language. And there's no assembler. There are hex op codes for the x86 instructions.
Now, I had to memorize those op codes.
But it was as easy to memorize the op codes as it was to memorize the assembler code.
And it gives you beautiful versatility and efficiency. Completely unportable.
But that's, that's what I use. I call it color fourth, but that's, that's versions I'm using now.
And it is the nicest fourth I've ever had because it gives me the closest interface with the hardware.
On the other hand, in the old days, when you wanted to interface to a chip
or a board, that chip or board was documented. And you could really download the spec sheet and,
and work with it. Nowadays, there's no documentation. The best I have found is in Windows.
But Windows is incredibly complex, incredibly obscure, badly designed,
almost impossible to work with. And I work with it when I must. But it has turned me off trying to
interface with the larger world. As I said before, I've never been able to figure out how to get on
the internet. The world has changed. And I'm afraid it's changed in such a way as to disadvantage us.
The, well, calls hackers. You're supposed to sign on
to the corporate vision of computers. And if you don't, or can't do that, you're being left behind.
That perhaps some of you know, Werner Vinge's science fiction novels. He has one called
Oh, Fire in the Sky, something like that. In which the problem of
buggy, enormous software was mentioned. The spaceships of that era were programmed in some
obscure language that nobody could really master. And it was determined that you should
improve rewrite the software. So that that was simple, clean, bug free. And entire planets
attempted to do so. They could not reproduce all of the obscure bugs in the existing software.
So it was not useful on existing spaceships. And the whole project led to
enormous costs, effort and failure. That would equate in today's view with trying to reprogram
windows, say, or Linux in forth. It probably can't be done. It certainly is not
sound like much fun, because you have to reproduce the bugs.
