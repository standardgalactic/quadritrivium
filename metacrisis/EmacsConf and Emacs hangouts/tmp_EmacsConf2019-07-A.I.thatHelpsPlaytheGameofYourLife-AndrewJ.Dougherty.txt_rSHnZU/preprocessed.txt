What if you could collect thousands of AI tools and apply them towards planning your life?
That's exactly what FRGCSA has been working on for the last 20 years.
Only soon, you can download a VM containing the core systems.
In today's increasingly complex world, sometimes we can be blindsided by rules we didn't know existed.
If you're living on the edge, this can be a disaster.
What if all the rules that applied to us, from legal, to financial, to just basic common sense,
were collected into a system that was capable of reasoning with them and planning with them?
You could put your objectives into the system and it would factor in all these things and spit out a plan.
Well, that's just one of the many things that FRGCSA's free life planner, AI, seeks to do.
AI is problem solving and software that can do this has to grow larger as problems in their complexity multiply.
Over the last 20 years, the FRGCSA project has collected thousands of code bases and written hundreds of code bases,
gluing everything together and making it available from within Emacs, Pearl, and Prolog.
The free life planner, FLP, takes this and applies it directly towards assisting users in their minute-to-minute, day-to-day, and year-to-year lives.
Think of a massive collection like Read Your Head and Star Trek The Motion Picture of things like strong game-playing systems like AlphaZero,
but tailored to the specific problems people most often encounter with finances, meal planning, transportation, healthcare, etc.
If you're interested in a personal AI assistant, stay tuned as we cover the free life planner.
But it is, after all, only one of over 600 custom code bases developed for FRGCSA.
Soon, panoply, the virtual machine distribution of FRGCSA will be released for you to explore.
So, let's have a look at some of what FRGCSA can do for you.
FRGCSA wants to help you solve as many problems as it can, treating the world as a game which it tries to win by proofs that bad things don't happen.
We know that if a set of problems constitutes t-bits of information and a set of programs contains less than t-bits of information,
that it is impossible to solve these problems from these programs.
When it comes to AI, bigger is better.
In 2002, this led me to Emacs, Pearl, Debian, and Psyche, and a growing list of over 100,000 external code bases.
In fact, FRGCSA excels at finding and packaging software and exposing APIs for reuse.
Someone once asked me, what does FRGCSA do? I couldn't give them an answer. I didn't know where to begin.
There aren't any silver bullets to demonstrate.
So, where does Emacs fit in?
It is the developer console, mission control, where most development and usage occurs.
There are dozens of modes, thousands of key bound functions.
Let's look at some representative Emacs systems written because we couldn't find anything with similar capabilities.
This is Unilong, a multi-agent system facilitator in Acura for DCSA system.
Unilong lets all the systems talk to each other.
For the free life planner, we want to spider the internet to find, retrieve, and index rules and software to apply them towards improving the way we live on a daily basis.
But to intelligently spider, you need to be able to understand the text.
Because lots of useful information on the internet is in text form, FRGCSA is heavily focused on natural language understanding.
This is NLU. It's a system based on semantically annotating text.
Okay, so our spider is helping us to locate rules.
But what about software? We still need more software.
New software is being written all the time. How do we gather it?
IS is an information extraction system.
It allows you to label text like software metadata, using text properties, and then train a model and use it to label other text.
This way we can extract information about software systems we wanted to acquire in package.
Okay, great. We're getting more software. Now what do we do?
Let's go back to rules for a minute.
We have a lot of text, but how do we translate it into a machine-readable format?
That's where NLU-MF comes in.
Okay, we have rules in a machine-readable format, but how do we know when they're applicable?
We have to store the world state somehow.
Enter free KBS2, our free knowledge-based system, with persistent storage of rules and facts.
It has useful Emacs front-end for rapidly manipulating symbolic rules and facts and editing the knowledge base.
So now we have some refined executable rules. How do we reason with these common-sense rules?
Enter the psych system, undoubtedly the world's largest, most sophisticated common-sense AI.
But psych is proprietary.
Well, thanks to Douglas Miles, the author of the free Libre logic-move system, that's not a problem anymore.
Logic-move aims to be backward-compatible with psych itself.
Let's demonstrate our psych mode too, which aims to create a deep channel between Emacs and logic-move.
Today's software is fantastic.
But there's not a lot in the way of integrated approaches to planning one's life to improve the way we live on a daily basis.
The version of Freelife Planner on the Panoply VM distribution currently does calendaring, recurrences, reminders, planning, scheduling, and execution.
But the good news is we can make it a lot better.
The potential for a rule-based crowdsource life planner is tremendous.
People finally started understanding better what FLP, and to some extent FRDCSA, does when I wrote the following use case story.
It's the homelessstory.html. I'll provide the link later.
It's a story of a person facing homelessness who uses FLP to escape homelessness.
I highly suggest you read it to familiarize yourself with the FLP.
Some people think it is science fiction, but I assure you this story is doable with the tools we've collected.
Okay, where are we? We have a rule-based system, but our software cannot do everything. No piece of software can.
We have lists of software that the spider and IES got us.
Retrieving it is easy. Packaging it is hard. How do we package the software?
Why not record ourselves packaging software to add data to the AI so it can learn how to make packages?
So we have lots of data about how to package, but now the system has to figure out how to make packages on its own.
It needs to be able to think and plan.
What's more, once the software is packaged, FLP has to figure out how to use that software.
Enter the software robot called Prolog Agent.
Prolog Agent is an intelligent agent under development that can control EMACs in order to achieve objectives and will eventually be able to make use of recorded traces.
So now we have all these rules in software, but wouldn't it be nice if we could help teach the user some of the rules and how to use the software?
That's what Clear does. Clear is a great way to have books, manuals, websites, etc. read to you, allowing you to pause, quit, resume, and filter out nonsense.
If you'd like to get a copy of Panoply when the public alpha is hopefully released in a few months, please email me.
I will add your name to the mailing list, but also please join us at FRDCSA and or Freelife Planner on FreeNode.
I would like you to try out the FRDCSA, familiarize yourself with it, and test it.
Thank you so much for listening. Have a great day.
