It's extensible data.
Extensible, that word is very, very important
when you're thinking about your data.
You know, maps, those things we exalt,
those things that should not be denigrated.
So let's explore because we can understand
this essence of closure.
We can understand that it's just data,
but how do you actually take advantage
of this epiphany that we found?
Like, how do you just use data in a closure program?
It's a little confusing.
So we looked to the web to kind of understand.
We said, this is important for us to get right.
So we wanna research it, as anybody does.
And of course, we don't just want data.
We want extensible data.
So extensible data goes into Google
and what comes out?
The answer to all of our problems.
Literally the first result.
We were very happy.
We didn't have to go hunting too far.
So we clicked right through,
learned about XML,
and found that that was indeed just data.
It was exactly what we were looking for.
So we took that big, massive,
Adam-y mish-mash from before.
We knew that was bad now.
That's not how you do closure.
And we turned it into this,
and I think we can all agree
that this is a beautiful transformation
of that otherwise ugly thing.
This is just data, pure data.
This is the closure way, we all agree.
And let me just highlight this one beautiful,
compact section of just data.
And if you look a little closer,
you can see it.
The data.
The data is right there.
It's just data.
It's beautiful.
But unfortunately, we quickly found
that even though we had this beautiful
just data representation as extensible data,
we still had to use it in our program, right?
We still gotta get this into closure.
Fortunately, this is very easy.
Closure is an extensible language.
And this little tiny code snippet
is all we need to be able to leverage
this beautiful, pure, extensible data
in the runtime closure representation of extensible data.
I'm not really sure what to call that,
but that's sort of where it ends.
If you look closer, you can see
this varied, compact piece of closure code
that just parses it.
One of the great things about truly extensible data
is that everything is a string.
I think that's what extensible means.
Yeah.
Which gives you the opportunity
to write a lot of coercion functions.
Those are my favorite functions to write.
I'm assuming you all agree.
And so what we were left with here
was sort of a beautiful closure
in memory representation of extensible data.
We really need a name for that.
I'm not sure what to call that.
And yet something was missing.
We lost something.
We had this kind of mishmash of atoms,
and we knew that wasn't the closure way.
But it had this beautiful property that we were missing.
I want my encapsulation.
That's the one.
That's the one.
Fortunately, closure's here to help us bring it back.
So we wrote this beautiful function to encapsulate data.
And encapsulation is all about limiting people
from seeing things that they're not supposed to,
because that's dangerous.
We all know that as closure programmers.
So here you can see this beautiful and simple function
that simply shallow walks through our closure
in memory representation of extensible data.
Still need a better name for that.
And it tests against this concept
we invented called a visibility map.
It's a beautiful concept.
And if you don't have access to see something,
we just replace it with a value.
Obviously, you're expecting something back.
We don't want to throw an exception,
but we need something to put in there.
And so let me just highlight for you.
We found the perfect thing to pop right into that slot
that you were expecting to get something back.
So this was really great.
And we were excited to have this very general purpose
encapsulate function, but then how do you use it?
So let's walk through.
So first, as a starting point,
I want you to focus on the visibility map itself.
Now, unfortunately, this visibility map has a problem.
We were lazy and we wrote it directly
in the closure representation of extensible data
as opposed to data itself.
So we're working on that.
And once we get this visibility map
into proper extensible data into an XML file,
we will open source it.
You're welcome.
But once you have this visibility map, how do you use it?
It's so easy.
You just pass it through to your encapsulate function
and then encapsulate uses it.
And what comes out the other end?
Nothing.
.(audience laughing and laughing loudly.)
Nothing?
No, like, not nothing, nothing.
Nothing.
Nothing?
Like, nothing.
Nothing.
Yeah, I think you get it.
Okay.
And I'm really proud to announce
that after going through this process
of porting our code base,
the closure way to using proper extensible data
at the cost of just a few hundred thousand lines of XML,
we were able to achieve a 4% line of code reduction
from our original Java code base.
And we're very proud of that.
Thank you.
Very proud.
Thank you very much.
Okay.
Thank you.
This is a closure talk.
So, I have to give you a table of things that are,
I'm gonna show you all the really dumb, complex things
that you have to deal with
and then show you all the simple, awesome things
that we get, because we're on closure.
Syntax.
Data.
.(audience laughing loudly.)
Inheritance.
A box of corgi puppies.
.(audience laughing loudly.)
Stop.
Monday mornings.
Friday evenings.
Tripping over a pile of lime bikes outside.
That dance that Snoopy does.
A tech booth in the hallway
that's giving out cool t-shirts,
but ran out of your size.
A perfectly popped bag of popcorn.
The dark void that resides within your sad, sad soul.
The REPL.
.(audience laughing loudly.)
Oh, wait, we forgot about a REPL.
Yeah, that reminds me.
Let's go back.
Yeah, let's go back.
You should be ready now.
Oh.
.(audience laughing loudly.)
Okay, this is fine.
This happens a lot.
Yeah, that's normal, I think.
Sometimes if you hit enter, it'll just...
Oh, there we go.
Okay.
.(audience laughing loudly.)
Thank you, demo gods.
Okay.
That was a close one.
Okay, so we're in our REPL
and I can actually show you how amazing it is.
And I wanna tell you a little something
about closure called closure core async.
This is really interesting,
because it lets you write your concurrent programs
and I'll just kind of show you.
Now that we have the REPL up,
I have closure async.
I should have closure core async here.
And then I'll do this, and then...
Ah.
Alex, I think you forgot to include the library.
