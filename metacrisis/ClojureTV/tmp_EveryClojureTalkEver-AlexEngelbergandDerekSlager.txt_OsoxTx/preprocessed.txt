Every closure talk ever.
Hi, I'm Alex Engelberg.
I didn't really rehearse my slides that much.
I'm basically gonna stand at the podium
without moving around much.
I'm probably just gonna read all the words
directly off the slide verbatim.
Chances are that you can read faster than I can talk,
in which case when you finish reading
the end of this sentence, there'll be an awkward moment
where even though you're done reading it,
I'm still not done saying it,
so you just have to sit there
and wait for me to finish talking
before we can go on to the next bullet point.
Also, fun fact about me, I like pizza.
This slide is about me, but this talk isn't about me,
it's about you.
It's about us, it's about community.
It's about the 80% of you that are jammed
into the equivalent of a cheap budget airline middle seat.
It's about building.
It's about us.
It's about me saying nothing of substance,
but saying it in a way that sounds like maybe there is.
You knew this was coming, so let's get it over with.
Profound, you take the dictionary
and you split it apart and then you're done.
That's that simple.
So let's do just that.
Pro from the Latin, professional.
This talk is going to be very professional and found.
We found all the content in your talks, thanks.
So who are we?
We are Random Corp and our mission is to change the world.
How do we do it?
We leverage blockchain technology to power IoT solutions
in the cloud, using machine learning
at scale to optimize cryptocurrency ICOs with Kubernetes.
Everybody in this room should work for Random Corp.
We're amazing, we've got it all figured out
and we have some very unique perks.
Alex, why don't you tell them about them?
Weekly invigorating leadership speeches.
Have finished research projects to put on your resume.
You're welcome.
Late paychecks.
That happened once, one time, Alex.
Triplet programming?
Pair programming is like super last year.
So there's one thing I want you to take away from this talk.
It's that software is hard.
And one thing that we didn't really consider
when we were trying to build this vision
is just how hard software is, you know?
And my job is to kind of walk you through what we encountered
and teach you some lessons along the way.
And I want to show you this architecture diagram
that we came up with.
We have a front-end server.
And we have a cluster of front-end servers
and we figured we needed to sort of balance the load.
So we added a load balancer
and this got us another sort of six months or so.
Then we realized the front-end server was falling over.
So memcached.
The memcached also got us sort of another three months
of leeway before more traffic was coming in.
And then the memcached started running out of memory.
So we were like, another memcached.
So it's to me.
We heard a lot of good things about message queues.
And we really wanted to include a message queue
in our architecture, the sort of,
we couldn't choose between the sort of top competitors,
Kafka and RabbitMQ.
So we just include both of them.
And we just let them kind of chase each other around
a little bit.
So that's the front-end server.
Then we get to the back-end server.
And this is where it gets interesting
because this is where you have to choose your database.
And we step back and we said,
what problem are we trying to solve?
And we decided we needed a database
that was that had high read throughput.
It was version controlled and it was highly available.
And you know, we're at a closure conference.
You can probably guess what technology we went with.
We ended up going with Google Sheets.
And hey, it's like atomic but cheaper.
So we had the front-end server, the back-end server.
We were like, what's next?
The back-end server.
Three tier architecture.
So we went on like this
and we made a lot of architectural decisions.
And before we knew it, it looked like this.
And we were just, I think this diagram does a good job
of really illustrating that the decisions
that you make early on in your company
can really kind of bite you later in your company's life.
If you really don't really take the time
to really think through those architectural decisions.
So hopefully this kind of teaches you all a lesson
on how you should really build your architecture.
So we ran into some challenges.
And at Random Corp, we consider challenges
to be opportunities.
They're opportunities to give back our lessons
to the community.
And let you avoid making the same mistakes again.
And when we wanted to transmit those lessons back to you,
we turned to the only form of communication
that really makes sense for these,
which is angsty medium thought pieces.
The first thing we did was we used Slack
for revision control.
Hey, if it's more than 10,000 messages old,
you probably don't need it anymore.
Our continuous integration was actually
just a cron job on my laptop.
Hey, if I give my source code to the cloud,
what if they don't give it back?
Finally, type systems.
Ugh.
That's my nuanced hot take.
I'm just gonna leave it at that.
So we had these challenges.
And if you look at these problems
that our company was having,
if you can kind of distill that down
to one thing we needed to change in our company,
I think it was obvious,
we needed to choose a new programming language.
Obvious, obvious.
Now choosing a new language is a big decision, right?
This can be make or break for your company.
And we wanted to be thoughtful about it.
You've seen evidence of our thoughtfulness already.
We wanted to follow a scientific process
where we really evaluated the pros and cons
and understood the elements of the language
that we're gonna best fit random corp in our goals.
So of course we turned to the same tool
many of you have in the past.
Wheel of Hacker News.
And we spun the wheel and it let us down a path.
Just so happened we started with go
and wasn't bad, things were going pretty well.
But our code base started to grow
and yet the compiler was still super fast.
And we couldn't really trust the compiler
was doing a good job when it was that fast.
So of course we moved on.
Ruby came up next.
And unfortunately after some brief research
it was discovered that Ruby's actually a color,
not a programming language.
So that was right out.
Then Scala, we thought should we use Scala?
Maybe, maybe not.
And so we moved on, we built more Scala
and unfortunately this is what we looked like
while we were waiting for it to compile.
So that didn't work either.
And we just kept going down the list
and there were so many possibilities
and so many languages to try
and we tried all of these and it was just,
it was such an arduous process to go through
and to try and understand the pros and the cons
and to pluck from this list and figure out
which language really works for us,
which language is really gonna power
our next generation random court platform.
But we found problems in each of these
and the biggest problem was that
half of these languages don't exist,
we just made them up.
That didn't help.
So we needed a different approach.
And we've learned from many of you
that when you're trying to make a decision
that involves closure, sometimes, you know,
going to Wikipedia and other places
isn't necessarily the best way to do it.
So instead, we went to our local library
and we walked directly into the section
with the oldest books we could find.
You have to walk through a dust cloud to get there.
And we plucked from the shelf, just by happenstance,
some old book.
And some old book was incredibly powerful and inspirational.
It was written by very smart people
and they use very big words.
To be honest, we didn't really understand a word of it.
And it was definitely not at all about closure
and yet it was because we say it was.
And it became clear that closure's the language for us.
Off we went.
So it's time to learn closure.
We were coming from a Java architecture
and when we started learning closure,
we noticed a bunch of stark differences,
some good, some bad.
And I want to show you kind of the things
that we ran into.
First, we'll start with the good.
And first thing is error messages.
You know, Java error messages,
you're going to get a lot of these
if you write a server in Java.
You're just going to see these all over the place.
No pointer exception, what does that mean?
Stack traces, where did these come from?
But then we turned to closure
and we noticed a stark improvement.
Boom.
Two and a half hours later,
I was able to find what was wrong in my form.
Yeah, yeah, I know closure 110 is going to fix this,
but just like let me have this one.
Let's talk about state.
In Java, we love encapsulation.
And what encapsulation means is you have your class
and you have private variables.
And you put your state in those variables
and don't let anyone else touch them
except through your getters and setters
and your constructors.
And this is encapsulation,
and we came to know and love this
when we were working in Java.
Then we switched to closure and we were like, okay.
Apparently it's like more elegant
or better or decomplected
if we switched to records or something
and like everything's better now.
But I was very unsatisfied
with this seemingly clean approach
because where did my encapsulation go?
I wanted my encapsulation back.
And that's clearly the best solution
because it's my opinion.
But closure is extensible.
So when I have an opinion,
I can just change the language to my liking.
And I'm a problem solver.
So I put together a solution to this problem.
So I'd like to show you what I came up with
and I think it's really awesome.
I brought back the encapsulation.
We have our getters and setters back
and then it came time to put in the state
and we were like closure is usually immutable variables.
But they have atoms, so let's just use them.
Yeah, there's that at sign signaling to me
something's wrong, but I just kind of went with it.
And I think this is clearly the best way to use state
and I hope you agree.
Let's talk about macros.
If there's one thing I want you to take away from this talk,
it's that macros run at compile time,
which means like it's the obvious conclusion to draw
is that there are no downsides.
Like at all.
I promise.
Which means you should use as many macros as possible.
Let's talk about threading macros in particular.
Now I think these are a real game changer
because you can take a data structure,
you can apply a lot of operations to the same data structure.
And it looks nice and iterative, it's really easy to read
and I really like these a lot.
And you probably do too, but we also sort of run into
this problem with threading macros
that eventually we have a lot of different operations
that we wanna apply that don't quite fit into the same mold
of the same threading macro.
So for example, we have conge
and that takes the collection as the first argument.
We have map v, that takes the collection
as the last argument.
And so we ended up having the thread first,
thread last, we had the as arrow and the conge arrow.
And I think this looks really ugly
because we have to compose all these macros together.
It's just gross.
It would be nice if we had one macro
that could combine all these together.
And I'm a problem solver and I can extend this language.
So I did, I have the thread first,
thread last backwards question mark as arrow, conge arrow,
bang, and this is amazing.
It's the most elegant way to solve this problem
because it's a single macro that combines all these different
macros' behavior.
And, it's so much better already.
And we introduced this in our code base
and it was an absolute game changer instantly.
And I'm so sold on this idea.
I've actually made a repo, you can check it out.
This actually exists.
If you want to go check this out,
just go to thread first, thread last backwards
question mark as arrow, conge arrow, bang,
it's pretty awesome.
This is the bread and butter of our code base
and I hope you get some use out of it.
You guys can go there right now on your mobile phones.
We're happy to wait, should just take you a few minutes
to tap that in there.
Yeah, give it a star.
Don't mess up the character.
Yeah.
Build tools, when we got to build tools,
we determined the options available to us were line again.
So I'd like to move on the REPL.
If there's one thing I want you to take away from this talk,
it's how amazing the REPL is.
We're Clojureans, we love our REPLs.
And it's the most instantaneous way to run your code.
And if you've written any other closure,
or any other non-closure language,
you've probably had to worry about how much time
is it gonna take before when I write my code
and when I get to see if it works.
But when you have your REPL available to you,
you can instantaneously send your code to the REPL
and it's the speediest experience for development.
I could just keep talking about this,
but I just want to show you.
We have a demo prepared.
It's gonna go great.
Please demo, gods.
Shine upon us.
So yeah, so if I just type line REPL,
and this is gonna be instantaneous.
It's about immediate feedback, it's about speed.
Speed.
Once this loads, it's just gonna be
the fastest experience ever.
We just have to wait a few seconds for this to load.
Okay, it's making progress.
Yeah, this is gonna take a little while.
It's fine, this happens a lot.
I'm just gonna go back and we'll come back to this.
So we've noticed a lot of you as you go
through your closure journey.
You start off a little like we did, right?
Maybe translating from the thing you knew
to the thing that's new.
But there's that moment in all of our journey
where we get it.
Closure makes sense.
We find the essence of closure.
I think everybody sort of comes to the same realization.
And so we want to share that realization with you.
But first, I want to talk about where we started.
3%, we were very proud of this.
3% was the reduction in overall lines of code
when we translated from Java to closure.
Thank you.
3%.
Thank you.
Powerful, transformative effect.
And yet, we talked to people, we watched your talks
and it seemed like maybe we were missing something.
Some people thought we could do even better.
It seemed unimaginable.
But then we got it.
We figured it out.
They didn't.
We figured it out.
And because it's so important, this was an epiphany,
I'm going to look everybody in the eye,
walk to the edge of the stage,
and say very slowly, this epiphany we all reach,
it's just data.
I don't know if everybody got it.
So I'm gonna continue my walk across the stage.
And I'll just say it again from here.
Move the slides.
It's just data.
I'm saying it really slowly, so you know it's important.
But I feel like I need to say it one more time over here.
It's just data.
It's we all get it at some point.
They still don't get it.
Okay, I'm gonna do it one more time,
but I'm just gonna say the last word
and I'm gonna say it very slowly.
So you know that's the important one.
Data.
That's what closure's about.
That's the essence of closure.
That's what we were missing.
And it's closure, so it's not just data data.
It's extensible data.
Extensible, that word is very, very important
when you're thinking about your data.
You know, maps, those things we exalt,
those things that should not be denigrated.
So let's explore because we can understand
this essence of closure.
We can understand that it's just data,
but how do you actually take advantage
of this epiphany that we found?
Like, how do you just use data in a closure program?
It's a little confusing.
So we looked to the web to kind of understand.
We said, this is important for us to get right.
So we wanna research it, as anybody does.
And of course, we don't just want data.
We want extensible data.
So extensible data goes into Google
and what comes out?
The answer to all of our problems.
Literally the first result.
We were very happy.
We didn't have to go hunting too far.
So we clicked right through,
learned about XML,
and found that that was indeed just data.
It was exactly what we were looking for.
So we took that big, massive,
Adam-y mish-mash from before.
We knew that was bad now.
That's not how you do closure.
And we turned it into this,
and I think we can all agree
that this is a beautiful transformation
of that otherwise ugly thing.
This is just data, pure data.
This is the closure way, we all agree.
And let me just highlight this one beautiful,
compact section of just data.
And if you look a little closer,
you can see it.
The data.
The data is right there.
It's just data.
It's beautiful.
But unfortunately, we quickly found
that even though we had this beautiful
just data representation as extensible data,
we still had to use it in our program, right?
We still gotta get this into closure.
Fortunately, this is very easy.
Closure is an extensible language.
And this little tiny code snippet
is all we need to be able to leverage
this beautiful, pure, extensible data
in the runtime closure representation of extensible data.
I'm not really sure what to call that,
but that's sort of where it ends.
If you look closer, you can see
this varied, compact piece of closure code
that just parses it.
One of the great things about truly extensible data
is that everything is a string.
I think that's what extensible means.
Yeah.
Which gives you the opportunity
to write a lot of coercion functions.
Those are my favorite functions to write.
I'm assuming you all agree.
And so what we were left with here
was sort of a beautiful closure
in memory representation of extensible data.
We really need a name for that.
I'm not sure what to call that.
And yet something was missing.
We lost something.
We had this kind of mishmash of atoms,
and we knew that wasn't the closure way.
But it had this beautiful property that we were missing.
I want my encapsulation.
That's the one.
That's the one.
Fortunately, closure's here to help us bring it back.
So we wrote this beautiful function to encapsulate data.
And encapsulation is all about limiting people
from seeing things that they're not supposed to,
because that's dangerous.
We all know that as closure programmers.
So here you can see this beautiful and simple function
that simply shallow walks through our closure
in memory representation of extensible data.
Still need a better name for that.
And it tests against this concept
we invented called a visibility map.
It's a beautiful concept.
And if you don't have access to see something,
we just replace it with a value.
Obviously, you're expecting something back.
We don't want to throw an exception,
but we need something to put in there.
And so let me just highlight for you.
We found the perfect thing to pop right into that slot
that you were expecting to get something back.
So this was really great.
And we were excited to have this very general purpose
encapsulate function, but then how do you use it?
So let's walk through.
So first, as a starting point,
I want you to focus on the visibility map itself.
Now, unfortunately, this visibility map has a problem.
We were lazy and we wrote it directly
in the closure representation of extensible data
as opposed to data itself.
So we're working on that.
And once we get this visibility map
into proper extensible data into an XML file,
we will open source it.
You're welcome.
But once you have this visibility map, how do you use it?
It's so easy.
You just pass it through to your encapsulate function
and then encapsulate uses it.
And what comes out the other end?
Nothing.
.(audience laughing and laughing loudly.)
Nothing?
No, like, not nothing, nothing.
Nothing.
Nothing?
Like, nothing.
Nothing.
Yeah, I think you get it.
Okay.
And I'm really proud to announce
that after going through this process
of porting our code base,
the closure way to using proper extensible data
at the cost of just a few hundred thousand lines of XML,
we were able to achieve a 4% line of code reduction
from our original Java code base.
And we're very proud of that.
Thank you.
Very proud.
Thank you very much.
Okay.
Thank you.
This is a closure talk.
So, I have to give you a table of things that are,
I'm gonna show you all the really dumb, complex things
that you have to deal with
and then show you all the simple, awesome things
that we get, because we're on closure.
Syntax.
Data.
.(audience laughing loudly.)
Inheritance.
A box of corgi puppies.
.(audience laughing loudly.)
Stop.
Monday mornings.
Friday evenings.
Tripping over a pile of lime bikes outside.
That dance that Snoopy does.
A tech booth in the hallway
that's giving out cool t-shirts,
but ran out of your size.
A perfectly popped bag of popcorn.
The dark void that resides within your sad, sad soul.
The REPL.
.(audience laughing loudly.)
Oh, wait, we forgot about a REPL.
Yeah, that reminds me.
Let's go back.
Yeah, let's go back.
You should be ready now.
Oh.
.(audience laughing loudly.)
Okay, this is fine.
This happens a lot.
Yeah, that's normal, I think.
Sometimes if you hit enter, it'll just...
Oh, there we go.
Okay.
.(audience laughing loudly.)
Thank you, demo gods.
Okay.
That was a close one.
Okay, so we're in our REPL
and I can actually show you how amazing it is.
And I wanna tell you a little something
about closure called closure core async.
This is really interesting,
because it lets you write your concurrent programs
and I'll just kind of show you.
Now that we have the REPL up,
I have closure async.
I should have closure core async here.
And then I'll do this, and then...
Ah.
Alex, I think you forgot to include the library.
I know.
That's insane.
.(audience laughing loudly.)
I think maybe we're gonna have to give up on this.
Okay, fine.
All right, let's move on.
Okay, okay, okay.
.(audience laughing loudly.)
So as I said earlier,
this isn't about Alex and I or random core.
This is about us as a broader community.
And we need to grow that community for closure
to continue to be fruitful
and provide the benefits for all these other companies
that it's provided for random core.
One challenge.
Closer is still a smaller language
and we don't necessarily have a huge marketing budget.
We thought we could help.
And so we worked with a team of professionals
and created what we think is a powerful
and compelling advertisement
that's gonna bring more people to the closure community
and we're excited to share it with you today.
Do you use boring programming languages?
Why does it have to be so enterprising?
Our static type's weighing you down.
How am I gonna get promoted if my code doesn't compile?
Do people recognize the stickers on your laptop?
I'm so mainstream.
Boy, do we have the product for you.
Introducing Closer.
Closer is a list that runs on the JVM.
Closer.
Immutable persistent data structures everywhere.
Closer.
There's also a transpiler from Closer to JavaScript.
Closer script.
First class support for software transactional memory.
Press.
Actually, nobody really uses press.
Adams.
It's easy.
It's easy.
No, I think you mean simple.
Simple.
Just listen to some of our satisfied customers.
When I cheat my copy,
I need to make sure it's not that many other people drinking it.
The closure fix my laptop perfectly.
Hipster driven developments.
With Closer, I enjoy using Emacs.
Emacs is intolerable.
So it's critically important when you're building software
to take into account not only the benefits,
but also the trade-offs.
And an important part of Closer development
is analyzing the problem and considering more than one choice.
All benefits, new trade-offs.
Everything makes so much more sense when you realize
it's just data.
It's just data.
It's not code, it's data.
No code, only data.
It's just data.
It's better to have 100 functions operate
on one way of structure than have 10 functions operate
on 10-day structure.
So where are you waiting for?
Become a Closurian today.
Some restrictions apply.
See store for details.
Side effects may include side effects.
You're welcome.
We have nothing more to give and we're not taking questions.
Thank you.
I hope you all enjoyed the conch.
Thank you.
