Hello guys, my name is Andrey and this is a story of Monolith library which I rewrote into small modules and
In this talk, I'm going to show you what opportunities that opened up
In my previous life. I used to be a dotnet developer. I wrote silverlight WPF applications
But you know they kept saying silverlight gonna die JavaScript will kill silverlight
So I decided to check if it's true. I got this book
Read it and as an exercise. I created this graph drawing library
Graph as collection of vertices and edges. This graph here. It has
2000 vertices
6000 edges can render something larger than that. This is
20,000 edges and 5000 nodes and
and
It is really customizable. We can change lots of different arguments here and
Library itself is rendering agnostic
Which means it can render using different technologies like webgl or SVG or even
CSS if your browser does not support
Sits SVG or webgl
So needless to say I never returned back to silverlight development
But when I was doing this library, I reinvented a lot of builds
For example, how do we normally structure our JavaScript applications?
We have collection of small files then we can connect those files together using tools like
Grant a gulp or a cat to produce a release and then we put this release somewhere into
distribution folder applaud that to github for everyone to use and
What we do inside of each file is we love to developers
Sometimes we wrap content of the files into immediately invoked function expression plus context in that expression and
augment that context with our public API
If we are coming from a dotnet or Java background, we try to mimic that with
something similar to namespaces
But neither of these approaches is perfect
There are many problems scope is one of them. For example, if you forget to put
an expression into into function body here and after we concatenate all those files
We'll end up being in a global scope here
Another huge problem is dependency resolution. For example, what if our library depends on some third-party library?
What do we do? Do we include that into our bundle or do we tell every developer to?
include that library into their html pages and
Then we start to worry about the order of execution
So these are the problems which developers faced during development of the library
But then how do users of your library use it?
so
They go to github.com they download release they included it into html file
then they start using it and then
They hope it will not break. They hope the dependencies are all satisfied and there is nothing else
Is overwritten in a way, which shouldn't be overwritten this library Viva graph itself the way it is written right now is
6,000 lines of code. It's really a large library. It offers a lot of functionality
And it's really huge and that's actually not a problem
What if someone needs to use just a small part of your library like this guy?
He only wanted to use graph generators, but he didn't really care about
Visual aspect of the graph how to render that graph. So what does he have to do?
Well copy pasting just graph generators into his code does not make much sense. So it doesn't make sense to
Use entire 6,000 lines of code, right and the solution to that is
small modules and NPM
NPM stands for no prescribed meaning
Some people call it node package manager and what it does is actually manages packages for node
Each package in node is just a collection of files
Usually JavaScript files in that package are written in a common.js format in common.js
You clearly declare what your file experts and if you need something you just require that something
What's really nice about common.js is
each file represents a scope if you
Do not export something from your file
It remains hidden. No one will see that
Variables which are not exported from the file
This works really well in node
but what do we have to do in the browser and
The answer to that is browserify
You can think of browserify as a smart concatenation tool which knows how to concatenate common.js modules and teaches the browser
What is common.js? Let me actually give you an example here
So in this folder we have index.js and foo.js index.js
Requires foo.js and foo.js just prints hello world to the console. So if you run this in node
No surprises hello world. Now if you browserify this file
You see
we have concatenated bundle with all our functions and
a small small code over here which teaches the browser what is common.js
It teaches what is required what is module and what is experts. That's it very very simple very clever
Very small, but after we do this and let's say output
Result of browserified bundle into a file
Then include this file into our HTML file here like this
We can start using this in the browser
You see hello world so if someone needs to use just generators
What we do we require a package which knows how to generate graphs
Then we create a grid graph 10 by 10 here and in this example, we just print number of nodes of that graph
So run this in node
100 nodes in 10 by 10 grid graph if you open this in the browser
Again 100 nodes so code starts to be reusable in both platforms
So I started to redo in my library into small modules. There is a separate module which knows how to
How to construct a graph how to add nodes to the graph how to remove nodes from the graph and nothing else
That's just it's only responsibility
There is a separate module which knows how to construct Barnes hot tree to
Effectively simulate and body force problem officer just in body problem
And there is a separate module which knows how to integrate physical forces have to work with physics
now
Composibility is a huge part here if you combine these three together into
One package you end up actually having a force-based graph layout module
Which knows how to lay out graph in memory, but it doesn't really care about how you represent the graph on the screen
So for that there is a separate module which you can use
To render graphs with your favorite rendering library. Here's an example of Fabric.js library, which renders graphs in
using Fabric.js very famous or very popular to the drawing library
For example, this is a 10 by 10 grid here. You see any mates and rabbit here and this is
interactive you can zoom in zoom out using mouse wheel and
This is rendered by Fabric.js itself
What's really nice is that this graph over here and these images here
Were created by exactly the same code
Fabric.js knows how to render images when you run it in Node.js
so
Just use that to render these images here and use it to render
Graph over here. Just amazing
And because everything is so obstructed you can actually
Create a separate module which knows how to render graph in, for example, the terminal
So this module here
It renders graph using ASCII symbols
So we create a grid graph 10 by 10 here and then we require that ASCII symbols rendering
Module and then we just render it here. So if you run this in the terminal
You see it starts being like 10 by 10 grid graph using just ASCII symbols
Or let's say
Change it to something more fun
Let's say path
100 nodes and then just run this here and you see it starts forming a shape of a path
Because everything is so obstructed it is usually very easy to swap out different parts
So for example in this example, I'm actually pretending in the browser that my browser is a terminal
So you can see a 10 by 10 grid graph render it with ASCII symbols with the same module, but in the browser
So with this approach you kind of become a yes, man
If someone comes to you and asks to implement feature in your library like this guy
He wanted to add support for Gaffy files. Gaffy is very popular open source graph analysis and
drawing tool
Which is a desktop application. It is really nice too, but with monolithical library
You would double think do I really need to include this functionality to my library or?
Maybe I don't need it. It's already six thousand slimes of code does everyone benefit from using that
integration with small modules you just tell yes, you just create a new module and
Publish it and you're done like here. I created this
Small module I showed how to import files into Gaffy or how to export files from the Gaffy and you just make people happy with this approach
Because everything is so abstracted like 3d is another amazing thing, but again with a monolith library
You need to be careful about adding more stuff into it with
npm modules sure you just create a new module which knows how to do 3d layout and
Just know how to render for example here is a basic example of rendering 3d graphs
there is a separate module which knows how to lay out graphs in memory in 3d space and
This one is using 3g as to render
Large graphs here like this is a 10 by 10 by 10 grid render it in space. You can fly around here or this is
Binary tree perfect binary tree here or just
Plane grid
Let's render something different like the graph without any links, but which has 10,000. Oh, sorry just 1,000 nodes
It's like it's a small explosion
So you see all these different different graphs, they're actually rendered by exactly the same code
Because you usually use modules your code usually ends up being very very small like this example
Which renders all these different graphs is really really small like this is the entire source code for that
So what it does here it just imports the query string module to parse query string arguments
then it constructs graph from the query string and
Again, I'm using graph generators module here, and I'm just passing to that graph generators
Name of the graph and then how many nodes I need for that graph and then I'm requiring the 3d
Renderer engine here, and then I just run it here. So
19 lines of code very simple very cleared like you can easily see what what's the purpose of this module very simple
Composition again is is really easy to do composition because I already had 2d visualization
Why can't I just combine it with 3d?
Right, so here is a 2d and 3d render it side by side. It is a large graph here
But the layout is exactly the same on the left is
Fabric.js render in a graph on the right is 3.js render in the graph and they see you see if you just drag one node
it starts flying over there and the graph starts destroying itself just a small animation and
Very easy to compose pieces from different parts of the library really really cool, so
NPM as it is right now has more than 62,000 packages. I
Thought wouldn't it be cool to just see these entire packages
Visualized by by this library itself. So here's an example. This is 62,000 packages visualized
by
By this graph drawing library
Every blue dot is actually a package you see when I hover over a blue dot
It tells the name and also how many dependencies that package have and you can zoom in zoom out from this graph using mouse wheel here
like this is the larger picture of
NPM universe part and
If we keep zooming out, you'll see a small ring of isolated packages forming like asteroid ring here
Let's zoom in a little bit here. So you can see in the middle are
Very popular packages like this one here. It's low-dash one of the most popular packages on NPM. This is request
This is async and this guy here is
underscore so if we keep zooming in here and see
This gray area is actually all connection all dependencies we can zoom in here
It's a lot of dependencies to lots of modules here
so
On on the edges of this graph there usually tends to be
like namespace
Libraries like this thing here
Look at the name
Everything starts with generator. Can you guess what the thing in the middle is?
Yay, it's yeoman generator
So this thing over here is everything related to law-dash
If we go somewhere else like to this area, you see everything that's related to Viki and
and graph itself this graph drawing library
Forms a small group over here
So I always knew that
In node it is common to have
Tests like people tries to cover their code with test and it's not surprising because with that many packages
If you want your package to be
Legit and if you want it to be noticeable you have to cover it with test you have to have good documentation
It's just common practice
But I actually never saw how many packages were covered with test with this visualization. I thought I can easily do that so
Here you ready if I click this highlight cover it with tests it will show all packages cover it with test
it is
10,000 packages out of
62,000 packages the good thing to
Yeoman you see how they cover almost all of their packages with that so
Really nice almost half of the packages are covered with unit test
Which is really really good
Now you can also search packages over here for example if you search for
Grand it will highlight all all packages related to grind so it's almost two thousand almost three thousand packages related to grand
In the middle and then there are lots of them out there
Let's search for
This is gulp
What about browser if I
There we go
Not so many but we can do something like regular expressions
Let's find everything what has I find it and see it's almost
665,000. Oh, sorry 665 packages
We can highlight
Like let's say dot dot matches everything
Let's see
This is entire npm universe
So this graph has almost 62,000 packages and it's almost 120,000 edges here
Let's see we can find everything what has just one letter name
so it's 33 packages and
You see all alphabet is actually taken and this data over here. It's actually pre-computed. I wouldn't be able to
Lay out this graph at runtime so but because I already created all these npm modules
I could easily pre-compute
Pre-compute layout of each of these node offline. It took me like four hours to calculate this layout
But I didn't have to do anything new. It's just exactly the same modules running in Node.js and computing this layout for me
So most likely when you will be watching this presentation
Modules like four or five will be already taken
So with these many packages
You can you can actually use almost all of them with browser if I
Here is an example of a browser if I dependencies itself
So you see browser if I is in the middle and it depends on a lot of small modules
We can also switch to 3d view
This is browser if I dependencies graph
So because everything is so so small and modular. I also thought maybe it would be just nice and cool to
Expert this graph into 3d model file
so I did that I created the small module which experts graph into
3d model and I sent that model file into company
in New Jersey called Shapeways and
Just a couple weeks and 20 bucks later. I got
This in my mailbox. This is a 3d printed graph of
Browser if I dependencies so this is
Graph here
Graph here. This is the same graph
But this is like real graph which is like JavaScript escape from the browser
Recently I saw a tweet from someone saying checkmate
JavaScripters and this guy was pointing to an answer of Eric Lippert the guy who was a principal engineer of C sharp
DB script J script and
Eric was arguing that it is really hard to write
large application and is it is
Specifically hard to do so using JavaScript because JavaScript is dynamic type language
It does not offer that compiler support or for developers, but then in exactly the same post
Eric argues that
modularization encapsulation and
Code reuse are the ways to mitigate or fight that complexity and this is exactly what NPM is about
NPM has
everything modular
You can always hide your data using common GS file scopes
You you don't have to export everything and it is very easy to reuse this
Codebase you can find actually all of these examples you can find on my github and
Just feel free to check it out
Thank you very much. Hope you enjoyed this video. Let me know
