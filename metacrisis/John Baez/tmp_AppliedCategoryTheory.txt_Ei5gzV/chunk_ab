It's an institute for applied mathematics, but with a heavy slant on applied category theory.
And they hired a number of people, including Evan Patterson and also Sophie Libkin, who's here, who will appear later in the story.
And it's a real incubator for ideas on applied category theory now.
And so this is another one of the sociological moves that I had to be made, I think, to bring applied category theory forward.
I recommended Brendan not try to start an institute right after his first postdoc, but luckily he was much braver than I would ever be, and he went ahead and did it, and it's quite successful now.
So in 2022, Sophie Libkin, Mika Halter, Evan Patterson, James Fairbanks, and another person I haven't mentioned, Andrew Voss, used Algebraic Julia to systematically build models of epidemiology using open petri nets with rates.
So here are some open petri nets, the rates that the number data is not being shown here, and here they're being stuck together to form a larger open petri net.
The way that they're being stuck together, you'll notice, is not end-to-end. This is not the normal end-to-end composition that you see in a category.
This is something a little bit more general. We're sticking them together using a trick called an operad.
So operatic composition is one of the things that they incorporated in their Algebraic Julia software, which is, so this was done, this previous work was done in a slightly hot basis, but this really used operads in a systematic way.
And then in 2022, also, another team of people, including myself, used Algebraic Julia to create software for building models of epidemiology using another style of diagrams called open stock flow diagrams.
Well, stock flow diagrams, but we're making them open.
So here are some of those kind of diagrams being stuck together in an operatic style that is not end-to-end, but sort of gluing them all together to form a bigger model.
So part of the point here is that when we started talking to actual epidemiologists, we applied categories here to learn more about how they actually want to do their models, and they didn't really want to do their models using petri nets primarily.
They wanted to use a different technique that they considered congenial called stock flow diagrams.
So in fact, there's a community of epidemiologists who use stock flow diagrams to model the spread of disease.
And it includes my co-authors, Nathaniel Osgood, and his grad student, Xiaoyan Li, and one crucial fact is that they did COVID modeling for the government of Canada.
So they were requested by the government of Canada to set up COVID models for a number of different provinces.
And in the process, they gained a lot of experience with stock flow models.
They already had a lot of experience and they wouldn't have been asked to do it, but they gained a lot more experience and they learned some of the problems of the existing technology.
There's a beautiful thing about stock flow diagrams, which is that with just a little bit of training, you can read them and you can understand what they're talking about.
So a fellow named Hogman has pushed the idea of community-based modeling, where you go to a community that has some problem, like a disease or some other type of problem,
and you help model it and you model it by drawing stock flow diagrams, which here are hanging on the wall in a room in rural India.
And then people can look at those diagrams and comment on them and help you improve the model, because these people, the local people, they will have the knowledge of what's actually going on.
That you, the modeler who just flew in from Oxford or wherever, may not have.
And here we see a woman here looking at the picture on the wall, and this is actually from a story where this woman noticed that some ingredient was being left out of the model that these village elders hadn't known about or hadn't thought about, and so she helped fix the model.
So that's the example of what you can do, and you'll notice that none of the people in this story here had to know category theory, but they were, in fact, drawing morphisms in a category, unbeknownst to themselves.
Now, most stock flow modeling on the commercial level or the government level is done using a piece of software called AnyLogic, which is very powerful, but it has several big problems.
It doesn't let you compose models. It lets you make a model, but it doesn't let you take a bunch of models and stick them together.
It doesn't separate syntax from semantics. It only has one semantics, namely the differential equation semantics, which is the most important semantics, but there are others that you would like.
It has no support for what's called stratifying models. That term was very confusing to me. It's sort of jarred in this community.
What it means is taking a model and splitting one stock, one type of group of people into several stocks.
So, for example, you might have a simple model, and then you may say, oh, we should subdivide people according to age groups because older people would get the disease more than younger people or something like that.
And you would like your software to make it easy to do that.
It had no support for collaboratively building models. It's basically one person as the software, and they make the model.
They could talk to other people, but they're the one who's building the model.
And it's not free. It's a commercial piece of software, and it's not open source, so people can't get in there and modify it and improve it.
So our new work aims to fix all these problems, and I can say we're well on the way to fixing all these problems.
So the reason it's so important to close models is that the models that get actually used in the real world are immensely complex.
So here's a picture of Osgood and Lee's COVID model. This is a page in any logic, the software.
This is the whole model. As you can see, it's an enormous web of stocks and flows and such, and you really would prefer actually not to have to deal with this whole entity at once.
You'd prefer to have it be thought of as being made up out of smaller pieces, because mentally it is made up out of smaller pieces.
But that's not captured by the software, unfortunately. Any logic just doesn't do that for you.
So we've not created software that does that. It supports compositional modeling with the Stockflow Diagram.
So it's called Stockflow, and if you click on this link, you'll go to GitHub, which is where computer programmers keep their open source software, so you can download the software.
And so it lets you create and compose open Stockflow Diagrams and lets you stratify them, that is, subdivide stocks into smaller stocks.
For those of you who like Category Theory, I'll mention that that's done using a technique called Pullbacks in Category Theory.
It lets you choose among several different semantics functors, so one of which is the differential equation semantics.
And of course, it lets you solve the differential equations once you get them.
And then Nate Osgood and another student of his, Eric Reddicott, went further and made a graphical user interface for Stockflow.
So Stockflow was written in this programming language called Algebraic Julia.
To interact with it, you needed to know Algebraic Julia, but this graphical user interface called ModelCollab, it runs on a browser,
and you manipulate the model by actually dragging and dropping little boxes and drawing little edges between boxes.
And because it runs on multiple browsers, teams of different people located in different locations can collaborate to build Stockflow Diagrams.
So I could build my piece, you could build your piece, we could both save them, they'd be saved on the cloud.
I see there's this little thing called cloud here.
That's not what it's actually for though, sorry, that's a mistake.
But you can save, Nate's going to laugh at that.
Actually, clouds are these little funny things here.
But you can save your models on the internet and so that other people in different locations can access them and then glue them together to form larger models.
So in the goal to really apply mathematics, there are many levels because the next step is to actually train epidemiologists to use ModelCollab.
So we have some things going for us.
So first of all, Nate Osgood runs regular training sessions, which goes by the quasi militaristic terminology favored in computer science of boot camps because they're supposed to be intense.
So he runs boot camps on epidemiological modeling, so he is beginning to teach people ModelCollab.
Second, no understanding of category theory or the programming language Julia is required to use ModelCollab.
So it's really crucial when you're applying category theory that you can ultimately black box the category theory in so that people do not explicitly need to know it to use what you're creating.
Although they may be using it in some kind of implicit way.
And third, it's free while any logic you have to pay for should ultimately be an advantage.
But I should still say it will take a lot of work because when you have a generation of modelers trained to use any logic, this new paradigm is not so easy to shake.
So as I just already said, applying mathematics takes many steps.
And as I moved from being more of a pure mathematician towards a bit more at least some days of the week of an applied mathematician, I realized how easy pure mathematicians have it.
You just write a paper, you explain your idea, you throw it out there, and you hope that somebody reads it.
But when you're trying to actually carry out the full application of an idea, you have to interact with many people with many skills, persuade many different communities that what you're doing is actually worth doing.
And it's much more elaborate, but I should also say very satisfying endeavor.
So I'll conclude by saying that applied category theory is interesting in many ways, some of which I hope will be interesting to philosophers.
So some of these ways are separate from sort of the core mathematical ideas.
So one thing as I hope I've illustrated here by my somewhat self-centered history is that it requires new forms of communication and collaboration because they're talking to new types of people.
And luckily, these are starting to come into existence.
So there's an annual applied category theory conference that's first started in 2018, run that time by Brendan Fong and some of his other young friends.
Another is a journal, so there's a journal called Compositionality, which is again started by Brendan Fong and some of his young collaborators and friends.
This is an open access free to publish, free to read journal of applied category theory, which I recommend to your attention.
And another is called the category theory community server, which is sort of like a chat site or a discussion site for applied category theory, actually for all category theory, but it has a lot of applied category theorists there.
This was initiated by my grad student Christian Williams.
And so these are different ways for category theorists to start talking to other kinds of people, people who want to, might want to apply category theory or learn category theory.
And I hope that these catalyze the, the process that I'm trying to outline here.
Another thing is that category theory raises ethical issues in ways that category theorists aren't used to.
Sure mathematicians tend to feel themselves somewhat insulated from a lot of ethical issues because what, although their math may get used for all sorts of purposes,
they don't consider themselves particularly responsible for how their mathematics gets used because it's so abstract that they sort of can blame someone else for understanding it and doing something with it.
But when you start doing explicitly applied category theory, that sort of veil of protection is ripped open and you see that what you're doing may have a fairly immediate effect.
So for example, the biggest funder of research on applied category theory is currently the US military right now.
And also a lot of applied category theory is being used for artificial intelligence or machine learning or large language models or so on.
So I'm not saying that those are necessarily bad things.
I'm saying that those are things that definitely raise serious ethical issues.
And so I'm worried about the danger that applied category theory will wind up merely intensifying the already existing patterns in society.
That is, it will only make the richest and most powerful people even richer and more powerful.
I would prefer it if applied category theory could do something really different, really new.
This is one reason why I've tried to focus on epidemiology, which is a little bit different than some of the other applications.
Of course, even epidemiology ultimately feeds into the healthcare system.
So there are questions about that as well.
I would really like to use applied category theory for environmental issues, but I haven't quite gotten there yet.
Anyway, sorry, I just wanted to emphasize that ethics is the provenance of philosophers.
And this is a really interesting intersection of mathematics and ethics, which I hope that people think about.
And another thing applied category theory does is revitalize what is a very old question, which mathematical structures are best for describing and designing systems.
I emphasize designing because with the rise of computers, whatever you can think about clearly enough, you can make.
So it's not merely describing the external world, it's you're also making worlds based on your descriptions.
And so with this immense freedom that you have in computer science, the question is what should guide you?
And it opens progress, it opens possibilities for some really radical progress, because these are some really brand new ideas that we're talking about here that may let us organize systems in new ways.
So I think there's a lot to think about here, and I hope some people here give it a try.
Okay, I think I'll declare it done.
Brilliant.
See why I got drawn in by 30 years ago.
It's ways of conveying ideas so clearly.
Okay, let's have some questions then.
Let me bring up the people.
If people online have some questions that they can raise a hand and I hope we should be able to see for anyone here.
Okay, Mark.
I do have a question and I'm, I'm finding stuff that I thanks for that, by the way.
This is really exciting stuff for me, but I'm wondering if I'm biased and reading too much into this that that just works in my self interest.
I knew philosophy of time and I'm one of the few people who defend the notion that time flows.
And I see it in your work, but maybe it's through these biased eyes that this this project is bringing back the idea of thinking of differential equations, for instance, as things that flow that functions or something that flow.
And I noticed the importance of diagrams as these diagrams are reminiscent of what organizations would call flow charts.
And I'm wondering whether I'm reading too much into this as something that might be an answer to the static view of of in maths that came out of set theory and thinking of functions as something that is static and doesn't flow.
So I'm wondering whether or not I'm reading too much into it. So maybe maybe that's the question.
Sure.
The question of static versus dynamic is, as you know, very well, extremely tricky question because I could take any dynamic goal system and when it's, when it's done, or when we imagine it as being laid out in time, then we can think of it as a static thing with time is just another space like dimension.
And I think there's very, very hard to like definitively break out of that.
So, but nonetheless, category theory is a generalization of set theory in a sense in which instead of just having elements in a set, you have objects and also morphisms and the morphisms have are meant to convey some kind of dynamic aspect of the system.
That is an amorphism goes from an object to an object. And that's a very primitive sense of dynamics there of the start and the end and and and it brings a kind of dynamical quality to to the foundations of mathematics, which is a real thing.
It's not it's not just an illusion.
I mean, even though you could, if you ask a traditional mathematician, what is the category and they're saying, oh, it's a set of objects and a set of morphisms and some functions doing this and that right so you could say, oh, we're just back in the same old paradigm.
And that's what I meant by it's hard to definitively break out of that paradigm. I think it's more in some ways more of a question of attitude rather than than anything else.
And anyway, I think the interesting thing about the differential equations here may be the interesting new thing, maybe the study of open differential equations, which are differential equations where some quantities are explicitly labeled as affected by the outside world affected by
the part of the world, which is not modeled by the differential equation. So traditional differential equations.
Well, no, this is often like to study what are called autonomous systems of differential equations where you know everything there is to know once you know the differential equations.
Whereas open differential equations, which I should say are also studied by the system, especially engineers have certain quantities which are not determined by the differential equation, they're regarded as being affected by the outside world.
And, and that that on the one hand allows you to see systems of differential equations as morphisms that it could stick together by sticking some of these six quantities on the edge to some other quantities on the edge.
But it also means that you're, you're not just dealing with a deterministic system in the classic sense anymore because you have quantities that are affected by the unknown.
So, so they definitely changes your attitude towards differential equations.
Thanks.
A question from Toby.
It's not so much a question. Sorry, although I would love to. I mean, there's lots of questions I could ask, but I need to head off because I actually have to go give this talk again just now.
Thank you very much for inviting me and I hope the discussion is profitable.
Okay, thanks. Thanks, Toby.
I had a, I was saying the interest of people around here is is the difference between when you get variables that are just sort of associated with each other, some kind of statistical association versus when you think there's some kind of causal connection between them.
And you might think you might think you can go much better grip on the world if it isn't just association data but there's a you know that a causes be other ways of getting at this through your
or is it that you I guess the modelers are kind of coming already with their sense of what causes warden.
Is there any way representing the difference?
Yeah, so this particular line of work that I was outlining, as you say, I was mainly, most of my talk was about model building where you have your opinion about what causes what and how it affects what how X affects why and you build the model into that.
So there's a flip side of the whole modeling process, which I didn't talk about at all, which is incredibly important in epidemiology, which is inference.
So you measure data and you try to establish causality and also various numerical quantities which you would then put into your model.
So, so there's a lot that applied category theory has to offer to that and I'm afraid I'm not quite as knowledgeable about that.
I will say that Brendan Fong for his master's thesis worked on a categorical approach to Bayesian networks.
And so and and that is subsequently grown into things like what Toby was discussing.
And so that should that's that's also part of the big story.
And another part of it is that there's a technique called particle filtering where you, which is widely used by epidemiologists were once you have one of your models.
Of the sort that I've been discussing, you run it and you run it a bunch of times and you see what kind of outcomes it predicts.
But then you use that to compare to reality and use that to estimate the parameters that should be in your model.
So, so I guess what you could say is that like what I've been describing was just sort of one half of a feedback loop of interaction between modeling and then comparing model with reality.
And, and yeah, so the whole thing should be should be carefully understood and I'm afraid I have sort of focused on one half of it.
Yeah, I've seen very diagrammatic techniques from category theorists and really get it kind of causal modeling that exists out of that, doesn't it?
Yeah, that's, and that's important.
Okay.
Well, I think there's no further questions and we've reached six o'clock anyway, so let's just, oh, sorry, was there one? There was one. Sorry, there's Dominic as well. Here you go.
Yes, sorry.
I'm casting around. I've got things to say and trying to formulate them into questions.
It's difficult.
So one thing that in, I know in computer science is quite a big deal is sort of algorithms and data structures and kind of getting the right data structure for the right task to get good performance.
And I think, you know, there's a lot of things that category theory has to say about this kind of describing data structures in a more abstract ways for polynomial punctures and things like this.
So what I haven't quite sort of understood is how much of that kind of work is going on in the applied category sort of movement recently, sort of linking with, with back with computer science, the sort of like programming aspects around what I would call kind of classical compute science of algorithms and data structures.
Do you know if there's much of much of that going on within the sort of act world? Or is that largely more back with the compute scientists?
So the algebraic Julia community is really trying to blend computer programming with category theory in a really rich way so that you can write software and you can say, you know, define functor, the fine pre-sheaf category, blah, blah, blah.
So that, and that's just one of several different initiatives to try to bring category theory into programming, so not just have it help programming it, but have it actually be part of the programming.
So that's one thing.
There are lots of other things and I probably don't know the other things.
So I will just mention again this company connexus.ai uses categorical approach to databases.
So it turns out that updating databases is very nicely described using categorical ideas like plant extensions.
And Mike Johnson in Australia has been serving as a consultant for database companies using category theory ideas for many years, but now this company based on David Spivak's work is also doing that.
And there are, and there are a lot of other things I should say that there's just a lot more on the computer science side that I'm not very familiar with.
Okay, thank you very much.
Okay, so well here we've reached time so let's see what we have to do is thank John very much for his very interesting talk.
I recorded this session and we can, you said you're thinking of putting it online.
Yeah, I'd like to if that's acceptable.
Yeah, let's do that. Good.
Okay, well thanks. Thanks so much, John.
Okay, thanks very much.
Bye everyone online.
I'll see you.
See you then.
Thank you.
