Okay, so this is my website.
I'm Barry Smith.
I've been working on ontology for more than 30 years.
For the last 15 years or so, applying ontology in various areas,
starting with biology and medicine,
and then gradually through the army, army intelligence,
and more recently, more and more with industrial ontologies
and with space ontologies,
which is what we're going to be talking about today.
The basic strategy is as follows.
So we're going to be talking about ontologies for space and ground systems.
David is going to be talking about ground systems,
but you will find that when it comes to ground systems,
the ontology content that we need still needs to be worked out.
And so we're going to be relying in large degree on the people in this room
to help in building the framework that we need for ground systems.
So I'll be talking primarily about ontologies for space systems.
And these ontologies have been created in Kubrick,
which is a research institution associated with the University of Buffalo,
which performs a lot of work for military purposes,
and which has a large effort devoted to space ontology.
Most of the space ontology that you will hear about
is the product of the Kubrick group,
and specifically of Alexander Cox, who is in charge of the space ontologies.
I am one of the people who designed the methodology that Alex is using.
He used to be one of my students.
David Limbo is also a student from the Philosophy Department in Buffalo.
And DARPA paid for it,
but they don't want any responsibility to be assigned to DARPA.
So you should all read that very carefully.
And these are some of the other people who have contributed.
So the AFRL contributed in important ways.
These are some of the other Kubrick people who have been involved.
And this is a professor of space science, the Kubrick professor,
actually, in the University of Buffalo,
who's also been heavily involved in making sure that we don't make mistakes
about the mathematics.
And so this is the schedule.
I will talk about why we need ontologies, what they help us to do.
Then I'll present in a very, very rapid series of slides
the content of the space ontologies that we've already built.
And we're very proud of those space ontologies.
We think that they are the answer to the maidens, or several maidens' prayers.
And during that time, you should feel free to interrupt.
So if I'm going too slowly, or if I'm too boring,
or if you have some criticisms or questions,
then you should just raise your hand.
And I'm very happy to take questions.
Because then I will learn something,
and also I will be able to gain
whether I'm actually communicating these things successfully.
After the break, David will start the session on ontologies for ground systems.
He will give some ideas about what you can use ontologies for.
And then we will create a kind of interactive mapping out of the realm of ground systems
and where ontologies might be needed.
And we'll go into the details of how that will work later on.
All right, what ontologies are for.
Many large enterprises, and it doesn't matter which enterprise this is,
have many data systems, many relational databases, data models,
data science teams, and so forth, across the enterprise.
And these are all in different colors to show that they are independently developed.
Nobody knows everything in the data systems of a large enterprise.
And the people who are working in the orange area down here
probably know nothing about the people who are working in the turquoise area up there.
But it could be that there are important pieces of information up there
that the people down here need to know about,
but they don't know about them because the codes or the terminologies used up there
are just unfamiliar to the people down here.
And it could be that they are talking about things very similar
to what the people down here are talking about,
but they can't know that because they use different terminologies.
So this might be the Navy, it might be the NASA.
This kind of problem is endemic to every large enterprise.
And if you imagine a commercial enterprise which is being merged with another commercial enterprise,
then this problem just gets worse.
Now, we do not have a silver bullet for solving this problem.
But we do believe that we have a strategy which has been shown to be successful
in some important areas for solving part of this problem.
And my goal today is to convince you of that.
And it's possible to get you to join in because this is an important need.
And if you're interested in this kind of work,
then we need always more people to help get the work done.
All right.
Now, how do you solve a problem where you have data about X over here
and data about Y down there, but the data are described in different ways?
You can't just join the corresponding data tables by force.
You have to have somebody, a human being perhaps,
who knows very well how the data are treated over there
and how the data are treated over here.
And then probably a new data table or a new collection of data tables
has to be created from scratch.
And similarly, you can't query the data.
You can't find all the data in the enterprise which is data about X
because X is talked about under a different heading in other parts,
or different headings in other parts of the enterprise.
And this could be a very big problem.
And it gets worse not only when organizations merge,
but also when you need to receive data from other organizations.
I guess they find my voice irritating just as I find their voice.
All right.
Now, what is the solution, the partial solution that we offer,
which as I say has been successfully applied,
is basically one of terminological harmony generation.
So we don't attempt to create harmony by making everybody speak the same language
or use the same codes when they build their databases.
That will never work.
What we do is we create a layer outside the collection of data models
which are being employed in which there is terminological harmony.
That's to say we have a single controlled vocabulary
to describe everything in the enterprise.
And we have a single unique label for each X in the enterprise.
And if X is described in six different ways by different groups,
then in this terminological harmony layer is described in just one way,
and then we map to those six different ways by tagging.
We use the label in the ontology to tag wherever there is data about X in the enterprise.
And we do that for all the X's that the enterprise deals with.
Now, this is a controlled vocabulary.
It's a collection of terms.
Now, this collection grows as new missions are adopted by the enterprise,
but it grows in a stable way.
You don't have to overturn the whole ontology
if you suddenly have to work with a new company, for instance.
Because the ontology grows, the bulk of it stays the same.
It just gets bigger and bigger as time goes by.
And we have a lot of experience to demonstrate this easy extendability.
And the ontology is also navigable.
So if we think there might be somebody somewhere in the organization
who knows something about a certain kind of sensor,
then we can use the ontology to find...
We will find sensor in the ontology, and then we might find six children lower down in the tree.
And one of those children, if we're lucky, will be the kind of sensor that we are looking for.
And then that term, so X sensor, will have been used to tag databases number 14, 27 and 39 in the enterprise.
So now we have all the people in the enterprise, or all the groups of people in the enterprise,
who know about X sensors.
And again, this strategy has been demonstrated to work successfully.
Not just for finding people, but also for aggregating relevant data.
Now, I'm not sure I'm going to talk very much about this,
but we believe that we can use this same approach,
not just to tag data in databases, but also to tag equations,
or scientific papers, or engineering diagrams, blueprints.
So the same strategy can be applied to any kind of information-bearing entity.
And if we look at this, we find a very simple ontology has three...
I didn't do all of it, just the easy parts.
Three terms here.
And wherever we have free update state represented in our collection of scientific papers,
for instance, then we will use the corresponding term in this ontology,
and we will be able to aggregate all the papers which have something to say about free update state.
This is a larger ontology in which the free update state estimate would appear.
And so we can use this not just for scientific papers, for databases,
also for graphs, diagrams.
And we have not very much, but we do have some examples of success also along these lines.
So I'm giving this because it will return later
when we do in fact present an ontology of orbits, for instance.
I don't know if there are people in this room interested in orbits.
I imagine all of you should be interested in orbits.
So this I've said already.
Now, this is the historical background where ontology came from.
So the word ontology was first used in the 16th century
as the Latin translation of the Greek word metaphysics.
And I started life as a philosopher, for which I apologize.
But the word ontology was used by philosophers until around 1970
when it was introduced into AI work going on in Stanford,
primarily in the domain of robotics.
And the idea was, this was a philosophical idea, but they stole it,
the idea was that if you can capture all the common sense knowledge of a human being
in logical terms, then you could enter the corresponding logical axioms into a robot,
and then the robot would share common sense,
it would have the same common sense as a human being.
It didn't work. It was a great idea.
It started the study of ontologies, the development of what they called
ontology exchange languages or knowledge exchange languages.
And one of the leading figures, the person who really made the word ontology
a big deal in AI is a person called Tom Gruber.
He was the inventor of Siri.
And Siri is an ontology-based app.
So it runs on ontologies for restaurants and meals and films and so forth.
And so Gruber came in around 1990.
He was part of the movement to try and create ontology languages
so that people could capture the ontology of different domains,
not just human common sense, but also, for instance, the space domain
or the biology domain.
And so Prodigé, which is a very well-known piece of ontology editing software
was created, Semantic Web was created,
and AOL was created, the Web Ontology Language,
which is now the de facto standard language for expressing ontologies.
And Prodigé will output your ontology using AOL.
All right, now, but the whole thing failed.
They had these wonderful tools, languages, editing.
It worked in specific commercial areas such as Siri,
which actually came much later, of course.
But it didn't work in engineering.
Lots of people tried. It didn't work in commerce.
And the reason was that people really embraced the ontology idea,
and so they built an ontology.
But then the people in the next building embraced the ontology idea
and they built an ontology about the same thing.
And this was happening 16 different times across the country.
And so you've got 16 ontologies for X, which made the damn thing worse.
So now, instead of having a database access problem,
you have an ontology access problem,
