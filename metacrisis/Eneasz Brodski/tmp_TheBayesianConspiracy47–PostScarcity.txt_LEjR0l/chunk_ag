I've been checking back on it every couple days, which is not enough.
I should find a way to automate.
There's a way to automate this.
I just need to get in on that.
So there's futures exchanges where you can put, you can buy put contracts.
And that's where like, if it drops below four, then yeah, but that would be a very
if, because we don't know the timing, right?
So if you have, if you were going to automate this in some way, you can make
a better put contract, but you can have a long-term put contract that says next
three months, if it hits this price by it, if it hits this price sell it.
So is there anything like that currently for our future exchanges?
But there's roundabout ways of financially engineering financial
products that are similar to these contracts.
So yes.
What I'm saying is with Steven's mad programming knowledge, could he create
this tool that he was just speaking of?
Absolutely.
Someone could.
Well, I know someone could.
Had is it already out there?
Would he be the first on this ship?
No, no, okay.
Yeah, I've definitely seen stuff like this already where you can.
But one thing that I do want to, I'm sorry to disturb, but everybody acknowledges
that the user experience side of anything crypto is horrible, right?
It's shit beyond shit.
So if you, so Coinbase is popular because of that reason, you just, it's
just like signing up to anything else.
So if, if Steven or anybody wants to work on this, I would say just work on
the UX side of things, which doesn't mean a snappy node website.
Look at the whole process and just simplify it greatly.
If you can create a tool that'll, that'll track the price of Bitcoin and allow
people to make pit put contracts out there and charge 0.1 percent as a fee
for whatever they end up buying, you could make a lot of money.
Or if you're really like want to do this, you could get a pool together
and be JPMorgan.
You could call our stuff.
You could just say, this is the price I will do.
I don't know, 50 basis points.
Honey, the way give me your stuff.
I've got a long way to go before I could do either of those things.
I'll put it on the list.
Oh, and one more thing I wanted to plug before because you asked me, there's
this researcher out of Stanford law school who's, who's running the legal
design lab at Stanford, Margaret, somebody, I hate myself for forgetting
her last name, but yeah, just look up legal design lab.
And I think they're going through some of the UX problems of law as it is now.
So I think we can adapt those to, I mean, I think this is the good audience
to kind of just look at those models and come up with ideas.
So legal design lab.
Cool.
And, um, we only have two pieces of listener feedback from, from recent
because we're busting these out, you know, fast to catch up.
And they're both from the EA episode.
Would you like to stay for the listener feedback section?
Hell yeah.
All right.
So let, oh crap.
Do we have the music?
We don't.
Uh, Kyle's not on vacation yet, is he?
I don't know.
We'll have to ask him.
I think he said something about November 2nd.
So my plan was to email him and get this.
I also want his specs for what he's been doing to calibrate noise, you know,
like, uh, equalization and stuff.
Cause I'm sure he's doing it better than I did.
Okay.
Uh, so before we continue, we have to think one of our supporters.
Okay.
So, uh, we're thinking Pavel Paltsev and, uh, in case we've thanked him already,
also thinking Cody.
Oh God.
It looks French.
R-I-O-U-X.
Rue.
Rue.
Rue.
Okay.
Cody Rue.
Uh, I hope that's your, the correct pronunciation of your name.
Thank you guys for helping to support the show and making this possible.
I mean, I can't say anything other than what you just said, but yeah,
it's very much appreciated.
You know, we do this because we love it, but we also love not having to
pair on hosting bills and stuff.
So thanks for keeping this podcast alive.
Cause at some point we would dry up and probably quit doing it.
So it's really, uh, you know, on you for making this possible.
And for, for keeping us like, I find it motivating that people like it enough
to throw in like a buck or two.
I'm like, it's just, it's a nice feeling.
Um, okay.
Going on to listener feedback.
Uh, these are both from our EA episode that aired recently.
Pearl geek says, does the concept of immutable contracts written as code
scare anyone else?
Yes.
Me.
I have gray hairs because of that.
I'm sorry.
Yes.
Well, would you like to say?
Well, there's this, uh, I'm sure you guys are familiar with Larry Lessig.
With what?
What?
Lawrence Lessig.
I'm not.
Lawrence Lessig is this, uh, professor from Harvard who ran for president
last time and lost horribly, but he has this idea of, uh, things are built
with code law markets and something else.
This is off the top of my head.
So I can't forget, but Larry Lessig, you find out, uh, the issue with immutable
contracts as humans are writing these contracts, the same reason the DAO hack
happened was even though, so there can be syntactical errors in the writing
of the contract, DAO being decentralized autonomous organization.
Okay.
So it was a place where everybody put money in and voted on how to spend
that money.
Ah, okay.
Right.
And it was based off the Ethereum smart contract.
So I don't think that the tools are there, they're there now with, uh, versions
of, uh, provability.
You said the reason that hat, that hack happened was what?
I interrupted you right in the middle of that sentence.
No, no.
So that DAO hack happened, uh, 2014.
And because of that, uh, the thing forked the chain forked.
And now the latest iteration has a, uh, if people listening are into
provability logic, uh, something called Viper with a program like where you can
design provable programs for lack of a better word.
So there's processes available for immutable contracts to be provable.
Right.
So you can say, given the circumstance, do you mean, uh, what does provable
mean in this case?
I would automated test plus one, right?
You can test a program to be syntactically correct.
Okay.
That's what I think Stephen can talk a bit more about that, but you, but you
also have to prove that this will not have logical loopholes or issues that are
not syntactical, but are runtime errors for lack of a better word, right?
But they are in the damn language.
So you, it's not really a fault, but it's an exploit.
And, uh, that, uh, worries me.
And people are working on solving that issue.
And I think if immutable contracts is that person's question, Pearl geek,
there's this, uh, ribbon farm post called the unforgettable nests or I don't know
what, but he talks about the blockchain having a unforgettable memory or he's
saying, uh, VGR says, uh, there's a, there's a lot of history being written
by the victors happening in the current contract world.
So how do humans realize that?
Oh, if you, if I wrote in a mutable contract and everybody on the blockchain
knows that this deal fell apart because partner X versus partner Y did the bad
thing, partner Y or partner X is going to have negative or positive effects based
on, so it's going to, if it's open and immutable, there are societal level issues.
If it's closed immutable, there are program level issues that are people are
working on and one more plug.
And I, I know I'm talking too much, but this is just a great idea.
No, no, I, I, it's just that I've been looking at this for a very long time.
There's this company in Hong Kong or okay.
The name of the company is legalese.
I think it's out of Singapore.
They are also, so they want to build a Turing complete language for law.
Okay.
Okay.
I know, and they've been working on it for the last two years.
So Pearl Geek, look up legalese and look up all the stuff they're done.
Do you think, do you think that's even possible?
They're trying, man.
I don't know.
I mean, kind of the purpose of law is that when we don't like things, we
hack around it, right?
That's not the purpose.
That's not the stated purpose.
A stated purpose.
Well, yes, the stated purpose is not that, but right.
So back to our implementation issue and the jobs to be done framework, those
guys are making a Turing complete.
So they're going to make explicit what is now implicit, right?
That sounds awesome.
I think that sounds horrible.
No, why is it horrible?
Because I think that there are sometimes consequences of laws that you don't
notice when you first write the law and then someone comes around and hacks the
hell out of it.
And, you know, the judge and or jury says, basically, okay, you're following the
letter, but we all knew what we meant.
And fuck you, you're going to jail anyway.
You don't get to get around.
That's wrong.
I'm just saying, if you, if so, I think that one of the purposes of making a
Turing complete system for a law is to reduce that discrepancy of saying the
difference between letter and spirit should be minimal.
Yeah, but I don't think you'll ever, you'll ever reduce that to zero.
I don't think humans are good enough at writing laws to.
Tending to zero, man.
It's jazz.
Dr. Cornel West had this great line about, I think, happiness when somebody asked
