so there's rows and columns
this is a rank 2 tensor or a matrix
and that's exactly what we want
now I want to know from this
the row totals and the columns totals
so this first column will have a total
at the bottom here
16 plus 14 is 30
and 9 and 7 is going to give me 16
but then I want across
the two columns for each row as well
so I want both the row totals
and the column totals
I'm going to use the sum function
for my matrix but I say a long dimension 1
so let's see what that gives us back
that's going to give us back the 30 and the 16
so that's adding 16 and 14
and adding 7 and 9
but if I say dims equals 2
it's going to give me across
the 23 and 23
so 16 and 7 is 23 and 14 and 9 is 23
so I have the row totals and the column totals
I need those and I need the sum total as well
remember there were 46 participants
so no problem there
now I just want to know the size
as another function we haven't seen before
what is the size of this array
and that's going to give me back a tuple
of how many rows, how many columns
and if I have a higher rank tensor
I would have more elements there
but it's a 2 by 2 array
that we're passing to that
so now I'm just going to instantiate
an empty array
of similar shape
so 2 by 2 array
and they're all just going to have 0 values in it
so I want the number of rows
with this ggdim
its first value 2
and gg underscore dim its second value there
so if I had more than
2 sample space elements in each of those
group and gender
it was just male and female
and active and placebo group
so there's always going to be a 2 by 2 contingency table
but if I had more
and these were different 3,4
for instance
I would just still reference these 2
by now I could have just put by hand 2,2
but I want to show you where that comes from
this gives me this
array of all zeros
I'm just instantiating that because I want to overwrite
each of these values
and I'm going to overwrite that with a double 4 loop
I'm saying for i equals 1,2
gg underscore dim 1
so that means 2
so for i equals 1,2,2 and then for j
equals 1,2,2 as well
so I want to
iterate through all these 4 values
row 1 column 1, row 1 column 2, row 2 column 1
row 2 column 2
I want to overwrite all of those
and remember how do I get that first one
well that is this
row total
multiplied by this column total here
divided by the sum total
and that's what we're doing there
so I'm overwriting at the moment
i is 1 and j is 1
so I'm overwriting gg
as expected
which is just this 4 zeros
so I'm now in position 1 what do I do
well I take that columns total
1 times the row total
1 divided by the total 46
and that gives me that first value
now I'm going to iterate over the inner 4 loop
so j becomes 2
so that's the second column
so we now
at that one there I'm still in the first row
so now we're looking at this value up here
divided by the total
and that's going to give me that value
now we through this j loop
so we jump out to the 4 loop
and i goes from 1 to 2
now it's 2
and now we're going to go
again it's back to column 1, row 2
and then column 2, row 2
so that's with a double 4 loop
I'm going to iterate through all those
values
and if we look at the table now we see our
expected table
and that's what we would expect
is our observed values
and we want to know is there a difference
how do we do that, remember
it is
observed minus expected
but I do that element wise
so it's dot minus, dot square
all of those differences individually
so dot and to the power
2, that's to the power
2 and then each of those
I divide by
the expected
the expected value
at the end I sum over all of those
and that's how I get chi squared
and look at the beauty of Julia
you see the chi symbol there
well we can actually use unicode
so I can say backslash
alpha
and hit tab and that gives me an alpha symbol
or backslash of beta
so it is like latic
so I hit tab and I get the beta symbol
and I can assign that to
that's a variable name
so chi2 there, that's a variable name
look at that
backslash
colon
smile so you can
put all of these
little icons you can also use
for
computer variable names
it's just a little whimsy that exists
there inside of Julia
and anyways that's my chi squared value
and there we go it's 0.38
is that
significant so is there dependence between those
two
well I'm going to use from the distributions package
this time the pdf probability density
function
I'm going to use a chi squared distribution
with a
degrees of freedom of 1
remember that is the number of rows
minus 1 times the number of columns minus 1
so it's 2 minus 1 is 1 times 1 is 1
so it's a single degree of freedom
and I pass the x square value to that
and that's going to give me a p value
and oh behold it is more than an alpha
difference between those
people did not land up in one of the two groups
that was totally independent
of the gender that they were
so we have a chi squared test there
done by hand very easy
very quick
very simple to do
are four loops slow? no they're not slow
so you needn't vectorize your code
to get speed in Julia because remember
this is going to be compiled
before it gets executed
and when a for loop is compiled
very quick so no problems there
whatsoever
so that was a brief introduction just to Julia
by way of showcasing some medical statistics
some simple medical
statistics
this has been an update from
the video that I uploaded in 2015
that still used Julia 0.4
and there are certainly lots of breaking changes
when we got to Julia 1, Julia is now mature
we had version 1.4
and it really just is a pleasure to use
right inside here of
Atom
now you needn't use it inside of Atom
you can also
use it inside of Visual Studio Code
that is becoming more prevalent
and of course iJulia comes
with Julia Computing
