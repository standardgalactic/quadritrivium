But I can index that.
I can say what is group?
What is in position number four?
Seeing that this is just a column vector.
This is going to go from one to 46.
Of course, that was going to be placebo.
So instead of giving it a number specifically, what is inside number four?
I'm saying what is inside number I, because every time we loop through this,
I was going to be one, then two, then three, then four, then five, then six, etc.
Until 46.
So it's going to iterate through all of them.
And now it says, is this equal equal to placebo?
Double equal sign is a Boolean question.
It's going to return a two or false.
So it's the one I'm looking at at the moment.
So let's just look what group one.
We all know what group one is.
It's going to say placebo.
If this is placebo, then you see a little question mark.
And then give me back the placebo value that was stored there.
Else after the colon, give me the active value back.
And that means I can assign based on what is inside that group value.
And what we see here is called a ternary operator.
Let me do this for you here.
So we can say two is less than five.
And then question mark.
You've got to put these spaces.
So yes.
And it's not a comma, but a colon, no.
And those are strings.
You can put in anything you like.
Of course it is.
If we now say two is greater than or equal to five.
And then yes.
Yes.
And we've got to have those spaces there.
No.
Of course, we're going to get back.
No.
So it's just a very shortened version of an if else statement in case you were wondering.
So that's all we're doing here is saying we read that value.
And then we're going to assign one of those two values based on what we see in the group value.
We're going to push that into this BMI.
So let's do that.
And now if we have BMI, BMI before.
I'm going to get taken from the right distribution for all of those 46 values.
And then we're going to run through the same for loop there.
Now I've just created a bunch of random values, random variables there.
We've got our data point values.
Now we're going to store them inside of a data frame.
So I told you about the data frames package.
That's an excellent package just to work with data.
So if you're going to import a CSV file, comma separated value files, you're going to use CSV.read.
And then it's going to be stored as a data frame.
If you're familiar with R, that would be like R data frames or in Python, that would be like pandas.
So I see an open, there open and close set of parentheses.
So these are all arguments that I'm passing to the data frame function.
And what we can do there is give a name of our variable.
So think about it in a spreadsheet file.
That will be row number one, all the column headers.
And look at them here.
They are just passed as normal words without spaces in between or other illegal characters,
but they're not strings.
I'm not passing them in a strings just like that.
So I'm going to have ID.
Yeah, I'm going to use the range function from one comma stop equals 46.
So it's going to go from one to 46.
That's another way to create this iterator age with an uppercase A.
That's going to be my variable name inside my statistical variable name inside my data frame.
I'm passing that the age computer variable.
And I go all along all these ones that we've created, except here for cholesterol HDL cholesterol delta.
And to that I'm going to assign an operation I'm going to do on two of these variables that we have created.
We've created HDL underscore cholesterol underscore before and we've created HDL underscore cholesterol underscore after.
And I want this column to be the difference between those two, hence the name I've chosen.
And all I'm going to do, I'm going to do element wise subtraction.
Remember, this one has 46 elements in it.
This one has 46 elements in it.
And I want to do element wise subtraction in Julia.
That means the minus sign, but we have to put this dot in front.
So dot minus and that indicates in Julia that we want element wise operation.
So take those pairs of values subtract them from each other.
And then we've see all the others you see I've done a weight delta as well.
So dot minus.
So the difference between those two vectors element wise.
And you see for BMI I didn't create a delta because I'm going to show you how to do that just with code.
So enter shift return.
And now we have a data frame.
You can see a 46 by 15.
So 46 subjects there across 15 variables.
And there's not enough space.
It's going to emit some of them.
But there's my data frame and you can see it is like a spreadsheet file.
There I have my column headers, row, ID, age, gender, group, HDL before, etc.
But just below that Julia tells us what the type is of these elements.
So what is the type of this?
Well, there's 64 bit integers here and another 64 bit integers and then strings, strings, 64 bit floats.
Now sometimes you want to deal with these things not as strings, but as categorical variables.
And there's a data frames dot categorical bang function.
And if I pass it the data frame and then the column header.
And it's going to change that permanently because this is a bang from a string into a categorical type.
And what you have to notice here is this colon in front of group.
Data frames allow us to use the group name, the column names as symbols.
And that is a symbol.
Once there is this colon in front, that's a symbol.
And that is the notation that we're going to use when we want to refer to the columns inside of a data frame.
So remember that we've got to use that symbol notation.
So I'm just changing the group and the gender.
I'm going to change them to, if we have a look at them now, you'll see gender is now a categorical type,
not a string type anymore.
And there are advantages to that.
Next up I'm going to show you how we get access to only certain parts of the data.
Because if you start analyzing data, you don't want to see all the data in the data frame.
You want to narrow it down looking at something specific.
So I'm going to start off with by just looking at the ways to slice a data frame.
So remember when we said group, when we had group, we just looked at the first value in there.
And that was placebo.
But indexing, I used index notation here and that's inside of square brackets.
That's exactly what we're going to do here.
But here with the data frames we have rows and columns.
It is a, you can think of it as a rank two tensor.
We have rows and columns, not only values down a single column.
So we've got to refer to, as you do with the spreadsheet file, give the cells row and column address.
So here we're going to use a unit range, one to three.
So that's going to give me one and two and three.
So rows one, rows two, rows three, comma.
This here, if I just use the colon symbol, that shorthand will give me all of the columns.
So rows one, two and three, all the columns please.
So let's have a look at that.
I get indeed three rows across all 15 of the columns.
So only the first three rows there across all the columns.
Now let's just ask for a single column.
So still rows one, two and three, but only of the age column please.
And look again, I'm using symbol notation.
So there we go, unit, it's a vector of 64 bit integers and there's only three elements in it
because we've only asked for three elements.
If I want to use more than one column, I've got to pass them as an array.
So they're going to go inside of square brackets.
And I want the group column and the age column still only rows one to three.
So let's do that.
Now I have a three by two data frame object and I have the group and the age as I've asked for in that order.
And I see the first three rows for those.
What if I only want rows one and three, not one, two, three?
So I've got to put that inside of square brackets because this becomes an array.
An array of rows, only one to one, only one to three comma an array of all the columns that I want.
And now I'm just going to get this two by two data frame.
Only rows one and rows three and only for those two columns.
Now if I want to see all of the, remember I said up here we use colon as our short hand for give me all.
Just make note of it's becoming more prevalent just to use the exclamation mark when you want to refer to all the rows.
So the data frame object give me all the rows and then just the age column.
And I'm asking a Boolean question there.
Would that be the same as using this notation?
Am I going to get back exactly the same thing?
And the answer is true.
So I could use either of those two notations.
Now we're going to pass a rule.
We only want the data frame back all the columns but, so we're going to see all the columns,
but go down the age column and only return those that have an age of more than 50.
So how do we go about that?
So I want to see the whole data frame with all my variables,
but I only want to see it for participants who are older than 50 years of age.
So this is what we're going to do.
We have this very nice dot notation.
So if I say df.h, let's do the Tien Le Repel, df.h.
And now it's just going to give me back this 46 element array or a vector of these 46 values.
So df.h, it's a shorthand.
Otherwise I could have written df like we've done up here.
And here I would say give me all the rows only of the age, exactly the same thing.
But shorthand I can just refer to it as df.h.
It's just going to give me back this array.
And you can see there the return is not a data frame.
It is an array that we get back.
So go down each of them and see if they're greater than 50.
So the dot greater than again, that means it's going to go element-wise.
So it goes down.
Everyone, is it more than 50?
False.
It's not more than 50.
This first one, that row is now not included.
Next one, 35.
It's not more than 50.
It's not included.
And let's go down now and this would be the first row that gets included
because this participant was older than 50, comma, all the columns.
So that's very nice notation.
And you see we down to 18 participants now.
And if we go down the age column, they're all going to be older than 50.
Simple as that.
Now maybe I want to string more of these together.
Now I only want participants that were older than 50
and they were in the placebo group.
So how are we going to go about this?
Again, it's my data frame.
Rows, columns.
So there's my comma.
I want all the columns there, but let's look at what rows I want.
Well, I'm going to put these inside our parentheses.
So I've got these two rows that I want.
So one df.h and dot greater than, so element wise, 50.
Dot and, and that's the symbol for and.
So both of these have got to be true before we get a true back.
