So a couple of years ago I made a video on Julia for medical statistics, quite a successful video.
I think it's cut down about 12,000 views now and because people are interested in that.
Now it's a couple of years down the line, short couple of years and we had version 1.4
and I think that was still done in 0.4 so many things have changed and Julia's really grown up.
It is a phenomenal language for scientific computing, solves so many problems in such an easy way
and there's a big community now and there's also a big package ecosystem.
So it was time to redo this video.
The video is still going to be about showcasing Julia, how to use Julia to do medical statistics.
And what we're going to do this time around though, we're going to base it on a paper.
So an open paper, I'll put the link down below and we're just going to use some of the summary statistics
to simulate some new data and that's the data that we're going to analyze.
So I'll show you how that works out, use distributions just to create and simulate your own data.
Then we're going to go through summary statistics and plotting.
You've got to visualize your data and I'm going to show you a plotting library called GATFLY
and it really produces beautiful plots and then we're going to check for the assumptions
for the use of parametric tests and then do one or two inferential tests.
Lastly, just again to showcase the ease of the use of the language, what it can do,
we're just going to hand code a chi-square test for independence.
Now as I mentioned, Julia has really grown up.
A lot of people are using it, the community is just getting larger and larger.
Currently I'm working on a course and as soon as that one's done, I'll pop that link down below
so maybe by the time you watch this, that link will be up.
An introductory course and just teaching you how to do Julia from the ground up,
whether you've programmed before, maybe a bit of R, maybe a bit of Python
or if you've never coded at all, just to show you how easy it is to learn a programming language
and if you're going to learn how to use one, might as well be Julia, it really is going places
and if you can code in Julia, you can basically code in Python as well and you can code in R
and there's really no use just to code in one language, quite a couple of them.
It really makes life interesting and makes your work a lot more fun.
Start with Julia though, why not?
Now though, let's look at Julia using medical statistics.
And so we start off with the Julia language website, there's julialang.org, lots of information here.
You can learn about Julia, all you like in the documentation.
I am going to tell you that the documentation is on the technical side.
So at least when you start, it is a little bit of a struggle.
Of course to download and install Julia, we can just click on the Downloads button
and we can see when I made this recording, the current stable release was 1.4.1,
that's what we're going to use and that was released on April the 14th.
There's also a long term support release, if that's what you want to stick to.
And you can see we have Windows, Mac OS and all the Linux libraries
and then for some of them 32 bit and 64 bit, you will know what to install.
For Windows go for 64 bit, Mac OS, you're only going to get the 64 bit.
And then with Linux, the 64 bit would just be the norm most computers
and operating systems are 64 bit these days.
When you've installed Julia though, that is only going to be available to you in the REPL.
So that is your terminal, your command prompt.
And so you can just write little lines of code that get executed.
What you do need is a graphical user interface.
And the best one to use at the moment is Atom.
And there we go, Atom.io. When you go on the Atom website,
it will recognize, should recognize your operating system.
It says that I'm on Windows here and we can download and install that.
If Julia was installed properly, once you've downloaded it, just accept all the defaults.
It should be in your environment variables or in your path.
That means your computer knows where to find Julia when you want to start using it.
And when you install Atom, it should pick up where Julia is.
If you install Julia inside of Atom.
So Atom is a general purpose coding environment, an IDE.
And you can code, use a lot of languages inside of Atom.
Let me just open Atom for you there.
There we go. That's Atom.
And you can see right at the top there, it says Juno.
That means Julia was already installed to work inside of Atom.
And I'll show you how to go about that, two ways that you could go about that.
The best way or the easiest way I should say is just to go to Julia Computing.
So not Julialang.org but JuliaComputing.com, commercial arm of Julia.
You can find out all about what they have to offer.
But what you want to do is go down here and look at Julia Pro.
Let's click on Read More.
And there you can download Julia Pro free of charge.
And you can see there they've got 1.0.5.2, the long term release there,
but also the current stable release 1.4.1-1.
And again, you can just download those.
Might ask you to register.
It's all free of charge.
And you can go ahead and download that.
What that is going to do for you, it's going to install Atom, as we can see here.
You're going to see Atom and Julia's already connected to it.
If you do the Julialang separately and Atom separately,
you can always come to the settings page.
And you'll see for me that was control comma or command comma.
And you'll see packages there.
And I'll list all the packages that were installed.
And you can see Julia client was already installed.
Julia language already installed.
What you would have to search for is Uber.
That's U-B-E-R, Juno.
If you search for that package and install that,
that's going to install everything for you.
If everything worked well, you install Julia properly.
You installed Atom as we've done here.
You should have Juno there when you restart.
You can go down to settings and you can set all sorts of things
as far as the Julia client specifically is concerned.
You can see there's some Julia options, the UI options, etc.
Atom itself has built-in themes as well.
So you can go for a light theme or a dark theme.
Let's close this all off.
What I've got you on the left-hand side is just a project pane.
In other words, I went to file and add project folder
because the files that I want to work in, they're all in a specific folder.
And that also allows you to connect your code on a GitHub repository
and you can just continuously upload to GitHub.
What you see down at the bottom is a terminal.
And you can run the Julia in the form of a REPL right here.
So if I click the Enter return there, we can see Julia's launch there.
And when you install just base Julia, just Julia without anything else, without an IDE,
this is what you're going to see.
And I can just type some code there, 2 plus 2, hit Enter, and we're going to see 4.
In the middle here is where we see the coding environment itself.
And you see I've got a file open Julia for medicalstatistics.jl.
And that's what we're going to work with.
On the right-hand side, there's the workspace.
This is going to show me my current workspace,
the computer variables that I've created, and the objects that are assigned to them.
You get full documentation here.
So you can search the documentation.
Of course, you can just go on the website as well.
And we're going to have inline plots.
So what I like to do is I'm just going to grab the REPL here,
and I'm going to move it right up there next to workspace.
So it makes that little blue mark there, drop it there.
Now it's on the right-hand side for me.
I can also just close down this side and we've got a lot more space to work with
because some of the lines of code are quite long.
As with Python, we see that we can use the hashtag symbol or pound symbol
on the left-hand side of every line of code.
And that means that whole line of code will just be ignored by Julia.
It won't ignore that.
And inside of an IDE such as this, you can just use these comments
just to write some comments.
And when you download this file, you can see the comments that I've made.
It'll tell you a little bit about Julia, about its type system,
about multiple dispatch, why it's so fast,
why it is such a lovely language to use.
Basically, it comes down to it is as simple as Python,
but it runs along the sort of speeds that you can expect
of other compiled languages like C,
because that's exactly what Julia is.
It's a compiled language.
So when you enter some code, it gets compiled for your computer,
for your CPU.
In other words, the code is going to execute very fast.
It's just in time compiling, so it goes to a low-level virtual machine
and that is going to compile the code for your system bringing you that speed.
One more thing that I want to say about Julia before we start,
everything in Julia is a function.
Functions, it's a functional language.
In other words, you saw me type 2 plus 2 there,
but what's happening behind the scene is there is a plus function in Julia
and you start by typing the function and in this instance,
it is this plus symbol that is a function.
It's the name of a function.
And as with all functions, you pass it some arguments.
Not all functions need arguments, but most functions would need arguments.
They are separated by commas.
If they are positional arguments, we might talk a little just about keyword arguments,
perhaps not in this video, but those would follow a semi-colon.
Here I'm just passing two arguments to the plus function.
It's 2 and 2.
The plus function knows what to do with it.
Why?
Well, it understands what 2 and 2 are.
2 and the other 2, those are both 64-bit integers by default 64-bit
because this is a 64-bit operating system.
So those are 64-bit integers that I'm passing to this function through multiple dispatch.
The plus function will know what to do with integers
and that will be something very different than doing just that.
That's 2.0.
That's a floating point value.
It's going to call a different method for the plus function
because it knows what to do with floating point values.
Those are decimal point values and that's different from integers.
But Julia understands what to do, how to compile the code
so that it executes as fast as possible, as optimized as possible
for that plus function to execute.
We don't have to tell Julia what type of variable we do have.
So if I say a equals 3, I don't have to instantiate that 3.
That is, I'm instantiating this object which is actually an array,
a vector at least of a single value.
And that is assigned to the computer variable A.
So that's an instance of 64-bit integer here that I'm passing to.
But I didn't have to tell.
I didn't have to specify the type of that 3.
I didn't have to specify.
Julia is going to infer that for me.
Obviously do specify, you can specify the type
and that is going to lead to a better execution.
So all that being said, that's not what you're here for.
Let's have a look at what we can do in Julia.
Now we are going to use, make use of third-party packages.
Most other languages have packages that you can install
to greatly expand the functions that are available to you
and what you can do.
And you see here, I've just typed a single line of code here.
Import data frames.
Let me increase the size.
Just one more tick.
There we go.
That was just holding down control or command and using my mouse wheel
