The following is a conversation with Eric Schmidt.
He was the CEO of Google for 10 years and a chairman for Sixmore, guiding the company
through an incredible period of growth and a series of world-changing innovations.
He is one of the most impactful leaders in the era of the internet and the powerful voice
for the promise of technology in our society.
It was truly an honor to speak with him as part of the MIT course on artificial general
intelligence and the artificial intelligence podcast.
And now, here's my conversation with Eric Schmidt.
What was the first moment when you fell in love with technology?
I grew up in the 1960s as a boy where every boy wanted to be an astronaut and part of
the space program.
So like everyone else of my age, we would go out to the cow pasture behind my house,
which was literally a cow pasture, and we would shoot model rockets off.
And that, I think, is the beginning.
And of course, generationally, today, it would be video games and all the amazing things
that you can do online with computers.
There's a transformative, inspiring aspect of science and math that maybe rockets would
bring, would instill in individuals.
You've mentioned yesterday that eighth grade math is where the journey through Mathematical
University diverges from many people.
It's this fork in the roadway.
There's a professor of math at Berkeley, Edward Franco.
I'm not sure if you're familiar with him.
I am.
He has written this amazing book.
I recommend to everybody called Love and Math, two of my favorite words.
He says that if painting was taught like math, then students would be asked to paint a fence,
which is just his analogy of essentially how math is taught, and you never get a chance
to discover the beauty of the art of painting or the beauty of the art of math.
So how, when, and where did you discover that beauty?
I think what happens with people like myself is that your math enabled pretty early, and
all of a sudden you discover that you can use that to discover new insights.
The great scientists will all tell a story, the men and women who are fantastic today,
that somewhere when they were in high school or in college, they discovered that they could
discover something themselves, and that sense of building something, of having an impact
that you own drives knowledge, acquisition, and learning.
In my case, it was programming, and the notion that I could build things that had not existed
that I had built, that it had my name on it, and this was before open source, but you could
think of it as open source contributions.
So today, if I were a 16 or 17-year-old boy, I'm sure that I would aspire as a computer
scientist to make a contribution like the open source heroes of the world today.
That would be what would be driving me, and I'd be trying and learning and making mistakes,
and so forth, in the ways that it works.
The repository that GitHub represents and that open source libraries represent is an
enormous bank of knowledge of all of the people who are doing that, and one of the lessons
that I learned at Google was that the world is a very big place, and there's an awful
lot of smart people, and an awful lot of them are underutilized.
So here's an opportunity, for example, building parts of programming, building new ideas to
contribute to the greater of society.
So in that moment in the 70s, the inspiring moment where there was nothing, and then you
created something through programming, that magical moment.
So in 1975, I think you've created a program called Lex, which I especially like because
my name is Lex.
So thank you.
Thank you for creating a brand that established a reputation that's long-lasting, reliable,
and has a big impact on the world, and still used today.
So thank you for that.
More seriously, in that time, in the 70s, as an engineer, personal computers were being
born.
Do you think you'd be able to predict the 80s, 90s, and the aughts of where computers
would go?
I'm sure I could not and would not have gotten it right.
I was the beneficiary of the great work of many, many people who saw it clearer than
I did.
With Lex, I worked with a fellow named Michael Lesk, who was my supervisor, and he essentially
helped me architect and deliver a system that's still in use today.
After that, I worked at Xerox Palo Alto Research Center, where the Alto was invented, and the
Alto is the predecessor of the modern personal computer, or Macintosh, and so forth.
And the Altos were very rare, and I had to drive an hour from Berkeley to go use them,
but I made a point of skipping classes and doing whatever it took to have access to this
extraordinary achievement.
I knew that they were consequential.
What I did not understand was scaling.
I did not understand what would happen when you had 100 million as opposed to 100.
And so since then, and I have learned the benefit of scale, I always look for things
which are going to scale to platforms, so mobile phones, Android, all those things.
There are many, many people in the world.
People really have needs.
They really will use these platforms, and you can build big businesses on top of them.
So it's interesting.
So when you see a piece of technology, now you think, what will this technology look
like when it's in the hands of a billion people?
That's right.
So an example would be that the market is so competitive now that if you can't figure
out a way for something to have a million users or a billion users, it probably is not
going to be successful because something else will become the general platform, and your
idea will become a lost idea or a specialized service with relatively few users.
So it's a path to generality.
It's a path to general platform use.
It's a path to broad applicability.
Now, there are plenty of good businesses that are tiny, so luxury goods, for example.
But if you want to have an impact at scale, you have to look for things which are of
common value, common pricing, common distribution, and solve common problems, the problems that
everyone has.
And by the way, people have lots of problems, information, medicine, health, education,
and so forth.
Work on those problems.
Like you said, you're a big fan of the middle class.
Because there's so many of them.
There's so many of them.
By definition.
So any product, any thing that has a huge impact and improves their lives is a great
business decision and it's just good for society.
And there's nothing wrong with starting off in the high end as long as you have a plan
to get to the middle class.
There's nothing wrong with starting with a specialized market in order to learn and
to build and to fund things.
So you start a luxury market to build a general purpose market.
But if you define yourself as only a narrow market, someone else can come along with a
general purpose market that can push you to the corner, can restrict the scale of operation,
can force you to be a lesser impact than you might be.
So it's very important to think in terms of broad businesses and broad impact, even
if you start in a little corner somewhere.
So as you look to the 70s, but also in the decades to come, and you saw computers, did
you see them as tools or was there a little element of another entity?
I remember a quote saying AI began with our dream to create the gods.
Is there a feeling when you wrote that program that you were creating another entity, giving
life to something?
I wish I could say otherwise, but I simply found the technology platforms so exciting.
That's what I was focused on.
I think the majority of the people that I've worked with, and there are a few exceptions,
Steve Jobs being an example, really saw this as a great technological play.
I think relatively few of the technical people understood the scale of its impact.
I used NCP, which is a predecessor to TCPIP.
It just made sense to connect things.
We didn't think of it in terms of the internet, and then companies, and then Facebook, and
then Twitter, and then politics and so forth.
We never did that build.
We didn't have that vision.
I think most people, it's a rare person who can see compounding at scale.
Most people can see, if you ask people to predict the future, they'll say, they'll give
you an answer of six to nine months or 12 months, because that's about as far as people
can imagine.
But there's an old saying, which actually was attributed to a professor at MIT a long
time ago, that we overestimate what can be done in one year, and we underestimate what
can be done in a decade.
There's a great deal of evidence that these core platforms at hardware and software take
a decade.
Think about self-driving cars.
Self-driving cars were thought about in the 90s.
There were projects around them.
The first DARPA Durand Challenge was roughly 2004, so that's roughly 15 years ago.
And today, we have self-driving cars operating in a city in Arizona, so 15 years, and we
still have a ways to go before they're more generally available.
So you've spoken about the importance.
You just talked about predicting into the future.
You've spoken about the importance of thinking five years ahead and having a plan for those
five years.
And the way to say it is that almost everybody has a one-year plan.
Almost no one has a proper five-year plan.
And the key thing to having a five-year plan is having a model for what's going to happen
under the underlying platforms.
So here's an example.
Computer Moore's Law, as we know it, the thing that powered improvements in CPUs, has largely
halted in its traditional shrinking mechanism, because the costs have just gotten so high.
It's getting harder and harder.
But there's plenty of algorithmic improvements and specialized hardware improvements.
So you need to understand the nature of those improvements and where they'll go in order
to understand how it will change the platform.
In the area of network connectivity, what are the gains that are going to be possible
in wireless?
It looks like there's an enormous expansion of wireless connectivity at many different
bands.
And that we will primarily, historically I've always thought that we were primarily going
to be using fiber, but now it looks like we're going to be using fiber plus very powerful
high band width sort of short distance connectivity to bridge the last mile.
That's an amazing achievement.
If you know that, then you're going to build your systems differently.
By the way, those networks have different latency properties, right?
Because they're more symmetric, the algorithms feel faster for that reason.
And so when you think about whether it's fiber or just technologies in general, so there's
this barber wooden poem or quote that I really like.
It's from the champions of the impossible rather than the slaves of the possible that
evolution draws its creative force.
In predicting the next five years, I'd like to talk about the impossible and the possible.
Well, and again, one of the great things about humanity is that we produce dreamers.
We literally have people who have a vision and a dream.
They are, if you will, disagreeable in the sense that they disagree with the, they disagree
with what the sort of zeitgeist is.
They say there is another way.
They have a belief.
They have a vision.
If you look at science, science is always marked by such people who went against some
conventional wisdom, collected the knowledge at the time and assembled it in a way that
produced a powerful platform.
And you've been amazingly honest about, in an inspiring way about things you've been
wrong about predicting, and you've obviously been right about a lot of things.
But in this kind of tension, how do you balance as a company, predicting the next five years,
the impossible, planning for the impossible.
So listening to those crazy dreamers, letting them do, letting them run away and make the
impossible real, make it happen, and slow, you know, that's how programmers often think.
And slowing things down and saying, well, this is the rational, this is the possible,
the pragmatic, the dreamer versus the pragmatist.
So it's helpful to have a model which encourages a predictable revenue stream, as well as the
ability to do new things.
So in Google's case, we're big enough and well enough managed and so forth that we
have a pretty good sense of what our revenue will be for the next year or two, at least
for a while.
And so we have enough cash generation that we can make bets.
And indeed, Google has become alphabet, so the corporation is organized around these
