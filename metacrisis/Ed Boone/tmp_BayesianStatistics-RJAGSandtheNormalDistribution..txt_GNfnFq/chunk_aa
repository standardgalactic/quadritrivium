Welcome to Bayesian Statistics, we're going to go into JAGS this time and JAGS stands for
just another Gibbs sampler.
So I'm going to quickly review what we said was a Gibbs sampler before and this is the
very simplistic version, there's a lot more detailed versions of this but this is the
simplest one.
Pick starting values, this is going to be where we start sampling from and what we do
is we just alternate sampling between the two using their conditional distributions.
So that requires us to need the full conditionals in order to do this.
Once I've pulled the two samples, the two together form a sample from the joint and
we do this again and again and again and we create a chain of samples of size M from
our posterior distribution.
This is basically the idea of Gibbs sampling, this is what JAGS is doing, sort of, but in
order to do this we need to know all the full conditionals and we need to work them out
and the nice thing about JAGS is it will take care of that for us.
However, we need to learn how to interact with JAGS in order to make this happen and
we're going to work on using R to interact with JAGS using a package called R2JAGS.
So if you don't have JAGS, go download JAGS, just put in JAGS, let's see here, Gibbs sampler
into Google, it'll take you to some place, you can download it, I think it's on Sourceforge.
Download that, go to R, load the package, RJAGS and R2JAGS.
Alright, so we're going to look at the normal distribution again, we looked at it last time
because I showed you exactly how a Gibbs sampler works from programming standpoint
in R, but now we're going to let JAGS do the work and so we're going to look at the syntax
differently.
Alright, so Nufe is interested in the weight of blue crabs in the Chesapeake Bay, so there's
these crabs, they're quite blue, and they live in Chesapeake Bay.
She believes that most blue crabs are 150 kilograms, or 150 grams plus or minus 15 grams.
Okay, so that would give us a prior distribution for Mu of 150, 15, and here we're going to
have sigma not squared is 15 squared.
So here is our prior distribution, our likelihood that's going to come from a normal distribution
with mean Mu and variance sigma squared.
We can't use the conjugate prior that we would like to because JAGS doesn't have an inverse
chi squared, so we're going to have to kind of just do something different, and in this
case we're going to use a sigma squared follows a gamma 11 and this isn't an unreasonable
thought in the sense that sigma squared has to be positive, right, gamma is positive,
so it's not the worst choice in the world.
Okay, so here we go, we've got our pieces here, we've got our two prior distributions,
one from Mu, one from sigma squared, here's our likelihood, and we're just going to write
this into JAGS, and we've got a model statement here.
And remember we're going to be typing this into R, so don't type it into JAGS, okay,
so we're going to define a model and we are going to put it in quotes, okay, so it's going
to be in quotes, and if you copy and paste this over it probably won't work, you have
to reset the quotes, just because it uses different characters. But anyway, so here
we're going to have a loop for i in one to n one and n one is going to be the same as
n here. Okay, so we're just going to go across all of these, we're going to have a likelihood
here x one i, well I have x, I here, so you can see where that comes from, it comes from
and it uses this twiddle just like here, d norm, which is the normal piece here, Mu
one is its mean, sig one is its variance, but it's not actually its variance, it's actually
precision, but we'll talk about that later. Okay, so JAGS uses precision versus using
variance and precision is one over the variance. Okay, so we're going to have to have a prior
distribution so Mu follows d norm 150, one over 15 squared in order to get that to work
out. Okay, it's not 15 squared, it's one over 15 squared. And then here I've got sig
one is equal to d camo one one. So that's our model statement here. So we have to make
sure we get it right. Take a moment, maybe pause the video to make sure you type this
incorrectly. Because then the next thing we're going to do is we're going to write it out
to a file. Okay, so I just compacted all this down. This is the same code as last time.
So we're going to write lines this mod one to mod one dot JAGS, whatever your working
directory is is where this is going to go. Now this is the name of your model on the
machine and you're going to have to remember that because JAGS is going to want to know
where that is. Alright, so now we can prepare the data to put it into the model. So we've
got a model, we've written it out, it's sitting in our working directory. Okay, so she goes
out and collects some data. Here's the data she collected. And what we want to do is calculate
things from it. So I'm going to put this data into a x one and I'm using x one because
it's the same as the x one here. Things should match up. Otherwise, things can get ugly.
So x one I plugged in all the numbers here that makes it into a vector. Alright, so the
next thing we need to do is find out how many of them are so we're going to have n one and
I chose n one because I'm going to scroll back to the code. We've got n one here. Okay,
so that's how many x's there are. And that's what this says. What's the length of that?
Okay, then we're going to put the data together in a list. So the data is going to be equal
to a list quotes x one comma quotes n one. So it knows which ones of these to hand off
to JAGS. The next thing we need to do is define the parameters we want to export at the end
basically the ones we want to keep track of. And you'd say why when you want to keep track
of all of them? Well, when you get hundreds of parameters, maybe you don't want to keep
track of all of them. Maybe you just want to keep track of mu and sigma one. Alright,
and then like we mentioned with the Gibbs sampler, we need the starting values. Okay,
so here I've got mu is 120 sigma is one. Okay, so this is what we have here. And I just chose
them. They seem to be reasonable numbers. So we have all the pieces to run the model.
Okay, so now this is how we run the model here. So we're going to run the JAGS model
model one dot JAGS. And here we're going to use the JAGS function. Data is our data that
we put together in its one is our initial values we put together parameters to save
as part of ones those were the parameters we said to save off. And iterations is how
long do I want it to sample. I'm going to have sample 1000 times and the number of chains
I want to use. So basically how many times do I want to do this do I want to go back
and start over and come back at it. And then it says the last one is the model dot file.
And this is mod one JAGS. And this is the one that's in quotes. And this is the one
that sits in your working directory. So if it's not in your working directory, this
needs to point wherever that file is. Okay, so here we're getting the number of samples
we're going to pull and is the number of chains that we're going to use for this. All right,
then once I've run this it will run everything and then I can update it again if I want to
get more samples. And that's what I'm going to try to do is I'm going to try to get 5000
more samples. No way I don't have to worry about the first 1000 here. All right, the
next thing I want to do is pull them back into our so mod one Sam's is as dot mcmc mod
one dot JAGS two. So this is going to go out and take and peel the samples off of our JAGS
object. Okay, then we're going to want to look at trace plots and a trace plot is basically
the samples through time. And they should look like fuzzy caterpillars. This one does
not look bad at all. This one does not look bad at all. This one looks pretty good. Okay,
what I mean by fuzzy caterpillars, they should be flat, but they should be fuzzy. And they
shouldn't wander up or wander down and I'll show you some bad ones here in a second. All
right, so this is a good trace plot. Fuzzy caterpillar is probably pretty good. This
is a bad trace plot. Notice it just keeps on wandering and wandering and wandering. So
this means it's not converged to a region of high probability. So once it reaches a
region of high probability, should start looking like a fuzzy caterpillar. Here's another bad
trace plot. So this one is a bunch of stair steps. And this is what we would call a sticky
chain. So this means that the sampler is having a rough time finding new values to plug in.
And there's lots of reasons for that. But just know that this is not good. All right, now
that I've ran everything, I'm going to peel the samples off chain one, chain two, remember
I did two chains. So I'm going to do mod one stamps, bracket, bracket one, and mod one
stamps bracket, bracket two. Okay, and then I'm going to stack them on top of each other
so that all the data is in one long chain under the name chains one. Then from this I can
actually just get the quantiles that I wanted to get out of this. Okay, so here are my quantiles
for my posterior credible interval. And I can get a posterior credible interval on sigma
one. But remember, this is precision. So I need to do one over that to get it to be
something useful. We can use the plot density chains one comma two type equals l and you
can see you get this nice picture here of what the posterior looks like for the first
one. And for the second one, notice that this one's way more symmetric. And this one's more
right skewed, just like we would expect means and variances to be. Alright, and then if
we did one over the density, this is what we get here, which is more like what we would
be after. Alright, so I can take square root of that, then it becomes more like a standard
deviation allows us to think about things that way. Alright, so now we played with Jags
a bit and everything else we're going to do from here on out. We're going to keep using
Jags. Why? Because it'll handle a lot of this for us. Now you'll just have to hang on here
and we'll do lots of other examples. And you'll learn how to use Jags at least at a beginners
level and that's for most people enough. Alright, so we're going to talk about how to use this
information again to do like a two sample t test in the next video. So I will see you
there.
