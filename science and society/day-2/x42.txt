tree uh in a more efficient way which

steps uh to to rewrite your integral uh

would be uh more likely to lead you

faster to uh this solution H similar to

what we have today using reinforcement

learning in such a context is is

actually um let's say um uh rather

efficient because uh the reward is is

well defined you either solve the the

integral or you don't solve it so it's a

very binary uh feedback signal that is

given to to the system and that allows

of course to to learn uh efficiently we

cannot always do that but if you have a

very clear reward signal it of course

helps uh for the

training and that brings me to uh the

very dominant uh approach of of the 80s

which was called expert systems so um

there you see the rule base to the the

right top corner so the rule base was

fit by expertise from the um EXP expert

very often there was also a support Tool

uh that allowed you allow you to um talk

to the expert and translate uh into uh a

set of rules and there was also uh tools

that could help you in this uh then the

the inference engine this is how you

Traverse basically on the search tree

and it turns out that people um are

using different uh typical prototypical

strategies uh so in the past we were

talking about forward chaining backward

chaining Blackboard systems and that

were examples of typical reasoning

methods uh if you want to solve such a

problem uh and this was also encoded in

these uh inference

engines also very important is

explainable system so they there's a lot

of complaints that AI systems cannot

explains well in expert systems at that

time you could not deploy an expert

system if it would not have uh such a

interface to explain its reasoning yeah

and that was basically and the chain of

rules that were being applied sometimes

also uh reasons why it uh and then

confidence levels uh and so on uh so

these systems were not hallucinating if

